[{"title":"4/22美团后端实习面经一面","url":"/2022/09/19/4%E6%9C%8822%E6%97%A5%E7%BE%8E%E5%9B%A2%E5%90%8E%E7%AB%AF%E5%AE%9E%E4%B9%A0%E9%9D%A2%E7%BB%8F%E4%B8%80%E9%9D%A2/","content":"<h3 id=\"1-自我介绍\"><a href=\"#1-自我介绍\" class=\"headerlink\" title=\"1.自我介绍\"></a>1.自我介绍</h3><blockquote>\n<p>略</p>\n</blockquote>\n<h3 id=\"2-介绍项目（基本面试官好像都喜欢挖项目）\"><a href=\"#2-介绍项目（基本面试官好像都喜欢挖项目）\" class=\"headerlink\" title=\"2.介绍项目（基本面试官好像都喜欢挖项目）\"></a>2.介绍项目（基本面试官好像都喜欢挖项目）</h3><blockquote>\n<p>略，后面补充</p>\n</blockquote>\n<h3 id=\"3-项目里提到的Mysql，开始展开提问\"><a href=\"#3-项目里提到的Mysql，开始展开提问\" class=\"headerlink\" title=\"3.项目里提到的Mysql，开始展开提问\"></a>3.项目里提到的Mysql，开始展开提问</h3><blockquote>\n<p>略</p>\n</blockquote>\n<h3 id=\"4-mysql的索引引擎，有什么，之间区别\"><a href=\"#4-mysql的索引引擎，有什么，之间区别\" class=\"headerlink\" title=\"4.mysql的索引引擎，有什么，之间区别\"></a>4.mysql的索引引擎，有什么，之间区别</h3><blockquote>\n<p>有InnoDB,MyISAM,Memory</p>\n<h2 id=\"InnoDB\"><a href=\"#InnoDB\" class=\"headerlink\" title=\"InnoDB:\"></a>InnoDB:</h2><ul>\n<li>主键自增</li>\n<li>支持外键</li>\n<li>DML操作支持事务</li>\n<li>支持行级锁</li>\n</ul>\n<h2 id=\"MyISAM\"><a href=\"#MyISAM\" class=\"headerlink\" title=\"MyISAM:\"></a>MyISAM:</h2><ul>\n<li>支持表锁，不支持行锁</li>\n<li>不支持外键</li>\n<li>不支持事务</li>\n<li>占用空间小，访问速度快</li>\n</ul>\n<h2 id=\"Memory\"><a href=\"#Memory\" class=\"headerlink\" title=\"Memory:\"></a>Memory:</h2><ul>\n<li>内存存放</li>\n<li>支持哈希索引</li>\n</ul>\n</blockquote>\n<h3 id=\"5-InnoDB采用什么结构存储？为什么？\"><a href=\"#5-InnoDB采用什么结构存储？为什么？\" class=\"headerlink\" title=\"5.InnoDB采用什么结构存储？为什么？\"></a>5.InnoDB采用什么结构存储？为什么？</h3><blockquote>\n<p>B+树</p>\n<ol>\n<li>节点排序（用来加快查询速度）    </li>\n<li>一个节点多个元素存取（B树高度不会很高）</li>\n<li>叶子节点有指针（可以方便支持全表扫描，范围查找）</li>\n<li>叶子节点冗余（提升范围查找的效率）</li>\n</ol>\n</blockquote>\n<h3 id=\"6-B-树存储怎么能确定高度？\"><a href=\"#6-B-树存储怎么能确定高度？\" class=\"headerlink\" title=\"6.B+树存储怎么能确定高度？\"></a>6.B+树存储怎么能确定高度？</h3><blockquote>\n<p>InnoDB最小存储单位是页，叶子节点和非叶子节点最小单位都是页，页大小Mysql 默认设定16384字节，约为16KB。我们假设主键ID为bigint类型，长度为8字节，而指针大小在InnoDB源码中设置为6字节，这样一共14字节<br> 我们一个页中能存放多少这样的索引元素，其实就代表有多少指针，即16384/14=1170;</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">假设一行记录的数据大小为1k，实际上现在很多互联网业务数据记录大小通常就是1K左右</span><br></pre></td></tr></table></figure>\n\n<p>高度为2的B+树能存放1170×16=18720<br>高度为3的B+树能存放1170×1170×16 = 21902400</p>\n</blockquote>\n<h3 id=\"7-最左匹配（给举个例子，说出能否用索引）\"><a href=\"#7-最左匹配（给举个例子，说出能否用索引）\" class=\"headerlink\" title=\"7.最左匹配（给举个例子，说出能否用索引）\"></a>7.最左匹配（给举个例子，说出能否用索引）</h3><blockquote>\n<p>略</p>\n</blockquote>\n<h3 id=\"8-mysql中行锁具体怎么锁（当时理解错了，答得MVCC，面试官也是耐心听完了，然后问我，那行锁呢？就很尴尬）\"><a href=\"#8-mysql中行锁具体怎么锁（当时理解错了，答得MVCC，面试官也是耐心听完了，然后问我，那行锁呢？就很尴尬）\" class=\"headerlink\" title=\"8.mysql中行锁具体怎么锁（当时理解错了，答得MVCC，面试官也是耐心听完了，然后问我，那行锁呢？就很尴尬）\"></a>8.mysql中行锁具体怎么锁（当时理解错了，答得MVCC，面试官也是耐心听完了，然后问我，那行锁呢？就很尴尬）</h3><blockquote>\n<p>用记录锁、间隙锁、临键锁（都是排他锁）</p>\n<p><strong>(1)记录锁(Record):</strong> 通过主键或唯一索引加锁，锁定某行记录，锁定的是已存在的记录</p>\n<p><strong>(2)间隙锁(Gap):</strong> 锁定的是索引记录中的间隔，锁定的是未存在记录的区间。</p>\n<p><strong>(3)临键锁(Next-key):</strong> 既包含已存在的记录，又包含未存在记录的区间（记录锁+间隙锁）</p>\n<p><strong>锁的触发条件</strong></p>\n<p>1.记录锁(Record)触发条件: 查询的条件中只包含表中存在的记录</p>\n<p>2.间隙锁(Gap)触发条件: 查询的条件中不包含表中任何记录</p>\n<p>3.临键锁(Next-key)触发条件: 查询的条件中既包含表中存在的记录，也包含表中不存在的记录</p>\n</blockquote>\n<h3 id=\"9-redis在应用时怎么保证数据一致性的（问的是项目里用的时候）\"><a href=\"#9-redis在应用时怎么保证数据一致性的（问的是项目里用的时候）\" class=\"headerlink\" title=\"9.redis在应用时怎么保证数据一致性的（问的是项目里用的时候）\"></a>9.redis在应用时怎么保证数据一致性的（问的是项目里用的时候）</h3><blockquote>\n<h4 id=\"采用延时双删策略\"><a href=\"#采用延时双删策略\" class=\"headerlink\" title=\"采用延时双删策略\"></a>采用延时双删策略</h4><p>（1）先淘汰缓存<br>（2）再写数据库（这两步和原来一样）<br>（3）休眠1秒，再次淘汰缓存</p>\n<h3 id=\"先更新数据库，再删除缓存（推荐）\"><a href=\"#先更新数据库，再删除缓存（推荐）\" class=\"headerlink\" title=\"先更新数据库，再删除缓存（推荐）\"></a>先更新数据库，再删除缓存（推荐）</h3></blockquote>\n<h3 id=\"10-有没有想过用本地缓存，不用redis（当时不了解memcache，随便说了个更新频繁）\"><a href=\"#10-有没有想过用本地缓存，不用redis（当时不了解memcache，随便说了个更新频繁）\" class=\"headerlink\" title=\"10.有没有想过用本地缓存，不用redis（当时不了解memcache，随便说了个更新频繁）\"></a>10.有没有想过用本地缓存，不用redis（当时不了解memcache，随便说了个更新频繁）</h3><blockquote>\n<ol>\n<li>使用ConcurrentHashMap实现本地缓存<br>缓存的本质就是存储在内存中的KV数据结构，对应的就是jdk中线程安全的ConcurrentHashMap，但是要实现缓存，还需要考虑淘汰、最大限制、缓存过期时间淘汰等等功能；</li>\n</ol>\n<p>优点是实现简单，不需要引入第三方包，比较适合一些简单的业务场景。缺点是如果需要更多的特性，需要定制化开发，成本会比较高，并且稳定性和可靠性也难以保障。对于比较复杂的场景，建议使用比较稳定的开源工具。</p>\n<ol start=\"2\">\n<li>基于Guava Cache实现本地缓存<br>Guava是Google团队开源的一款 Java 核心增强库，包含集合、并发原语、缓存、IO、反射等工具箱，性能和稳定性上都有保障，应用十分广泛。Guava Cache支持很多特性：</li>\n</ol>\n<p>支持最大容量限制<br>支持两种过期删除策略（插入时间和访问时间）<br>支持简单的统计功能<br>基于LRU算法实现</p>\n</blockquote>\n<h3 id=\"11-接10问，redis一般存哪种数据结构（存的list，所以本地缓存用不了）\"><a href=\"#11-接10问，redis一般存哪种数据结构（存的list，所以本地缓存用不了）\" class=\"headerlink\" title=\"11.接10问，redis一般存哪种数据结构（存的list，所以本地缓存用不了）\"></a>11.接10问，redis一般存哪种数据结构（存的list，所以本地缓存用不了）</h3><blockquote>\n<p>存String</p>\n</blockquote>\n<h3 id=\"12-想没想过redis宕机怎么办？\"><a href=\"#12-想没想过redis宕机怎么办？\" class=\"headerlink\" title=\"12.想没想过redis宕机怎么办？\"></a>12.想没想过redis宕机怎么办？</h3><blockquote>\n<p>如果是一台机器，利用AOF和RDB机制进行redis数据恢复</p>\n<p>从机宕机:</p>\n<ul>\n<li>只要把从的redis重新启动，再和主的进行连接就可以</li>\n<li>如果从redis上面做数据的持久化，可以直接连接到主的上面，只要实现增量备份。</li>\n</ul>\n<p>主机宕机:</p>\n<ul>\n<li>先把从的redis升级为主的redis. 执行slave of one命令<br>原来的主的可以重新启动，作为从的redis, 连接到主的redis上面做主从复制。<br>可以使用Redis 提供哨兵 机制来简化上面的操作。</li>\n</ul>\n</blockquote>\n<h3 id=\"13-了不了解垃圾回收器，说一下CMS的过程？\"><a href=\"#13-了不了解垃圾回收器，说一下CMS的过程？\" class=\"headerlink\" title=\"13.了不了解垃圾回收器，说一下CMS的过程？\"></a>13.了不了解垃圾回收器，说一下CMS的过程？</h3><blockquote>\n<ul>\n<li>初始标记</li>\n<li>并发标记</li>\n<li>重新标记</li>\n<li>并发清除</li>\n</ul>\n</blockquote>\n<h3 id=\"14-FullGC发生的条件？（面试官说应该有三种，只说上两种）\"><a href=\"#14-FullGC发生的条件？（面试官说应该有三种，只说上两种）\" class=\"headerlink\" title=\"14.FullGC发生的条件？（面试官说应该有三种，只说上两种）\"></a>14.FullGC发生的条件？（面试官说应该有三种，只说上两种）</h3><blockquote>\n<ol>\n<li>年老代（Tenured）被写满；</li>\n<li>持久代（Perm）被写满；</li>\n<li>System.gc()被显示调用；</li>\n<li>上一次GC之后Heap的各域分配策略动态变化；</li>\n</ol>\n</blockquote>\n<h3 id=\"15-了解线程池吗？主要参数？\"><a href=\"#15-了解线程池吗？主要参数？\" class=\"headerlink\" title=\"15.了解线程池吗？主要参数？\"></a>15.了解线程池吗？主要参数？</h3><blockquote>\n<p>了解</p>\n<p>corePoolSize核心线程数</p>\n<p>maximumPoolSize最大线程数</p>\n<p>keepAliveTime线程空闲时间</p>\n<p>unit时间单位</p>\n<p>workQueue阻塞队列</p>\n<p>threadFactory线程工厂</p>\n<p>handler任务拒绝处理器</p>\n</blockquote>\n<h3 id=\"16-线程池的执行过程？\"><a href=\"#16-线程池的执行过程？\" class=\"headerlink\" title=\"16.线程池的执行过程？\"></a>16.线程池的执行过程？</h3><blockquote>\n<p>当我们利用线程池执行任务时:</p>\n<p>1.如果此时线程池中的线程数量小于corePoolSize，即使线程池中的线程都处于空闲状态，也要创建新的线程来处理被添加的任务。</p>\n<p>⒉.如果此时线程池中的线程数量等于corePoolSize，但是缓冲队列workQueue未满，那么任务被放入缓冲队列。</p>\n<p>3.如果此时线程池中的线程数量大于等于corePoolSize，缓冲队列workQueue满，并且线程池中的数量小于maximumPoolSize，建新的线程来处理被添加的任务。</p>\n<p>4.如果此时线程池中的线程数量大于corePoolSize，缓冲队列workQueue满，并且线程池中的数量等于maximumPoolSize，那么通过 handler所指定的策略来处理此任务。</p>\n<p>5.当线程池中的线程数量大于corePoolSize时，如果某线程空闲时间超过keepAliveTime，线程将被终止。这样，线程池可以动态的调整池中的线程数</p>\n</blockquote>\n<h3 id=\"17-可重入锁是怎么实现的？\"><a href=\"#17-可重入锁是怎么实现的？\" class=\"headerlink\" title=\"17.可重入锁是怎么实现的？\"></a>17.可重入锁是怎么实现的？</h3><blockquote>\n<p>利用AQS实现(AbstractQueueSynchronize)抽象队列同步器</p>\n</blockquote>\n<h3 id=\"18-由于17问说不知道，提醒出了18问AQS知道吗？（答完之后，面试官说这就是可重入锁实现）\"><a href=\"#18-由于17问说不知道，提醒出了18问AQS知道吗？（答完之后，面试官说这就是可重入锁实现）\" class=\"headerlink\" title=\"18.由于17问说不知道，提醒出了18问AQS知道吗？（答完之后，面试官说这就是可重入锁实现）\"></a>18.由于17问说不知道，提醒出了18问AQS知道吗？（答完之后，面试官说这就是可重入锁实现）</h3><blockquote>\n<p>AQS 中有两个重要的东西，一个以Node为节点实现的链表的队列(CHL队列)，还有一个STATE标志，并且通过CAS来改变它的值。</p>\n<p>CLH队列：</p>\n<p>链表结构，在头尾结点中，需要特别指出的是头结点是一个空对象结点，无任何意义，即傀儡结点；</p>\n<p>每一个Node结点都维护了一个指向前驱的指针和指向后驱的指针，结点与结点之间相互关联构成链表；</p>\n<p>入队在尾，出队在头，出队后需要激活该出队结点的后继结点，若后继结点为空或后继结点waitStatus&gt;0，则从队尾向前遍历取waitStatus&lt;0的触发阻塞唤醒；</p>\n<p>队列中节点状态值（waitStatus，只能为以下值）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//常量：表示节点的线程是已被取消的</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">CANCELLED</span> <span class=\"operator\">=</span>  <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"comment\">//常量：表示当前节点的后继节点的线程需要被唤醒</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">SIGNAL</span>    <span class=\"operator\">=</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"comment\">//常量：表示线程正在等待某个条件</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">CONDITION</span> <span class=\"operator\">=</span> -<span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"comment\">//常量：表示下一个共享模式的节点应该无条件的传播下去</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">PROPAGATE</span> <span class=\"operator\">=</span> -<span class=\"number\">3</span>;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h3 id=\"19-CAS是什么\"><a href=\"#19-CAS是什么\" class=\"headerlink\" title=\"19.CAS是什么\"></a>19.CAS是什么</h3><blockquote>\n<p>CAS是compare and swap的缩写，即我们所说的比较交换。cas是一种基于锁的操作，而且是乐观锁。在java中锁分为乐观锁和悲观锁。悲观锁是将资源锁住，等一个之前获得锁的线程释放锁之后，下一个线程才可以访问。而乐观锁采取了一种宽泛的态度，通过某种方式不加锁来处理资源，比如通过给记录加version来获取数据，性能较悲观锁有很大的提高。</p>\n<p>CAS 操作包含三个操作数 —— 内存位置（V）、预期原值（A）和新值(B)。如果内存地址里面的值和A的值是一样的，那么就将内存里面的值更新成B。</p>\n<p>CAS是通过无限循环来获取数据的，若果在第一轮循环中，a线程获取地址里面的值被b线程修改了，那么a线程需要自旋，到下次循环才有可能机会执行。</p>\n<p>ps:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">问题:</span><br><span class=\"line\">①.CAS容易造成ABA问题。一个线程a将数值改成了b，接着又改成了a，此时CAS认为是没有变化，其实是已经变化过了，而这个问题的解决方案可以使用版本号标识，每操作一次version加1。在java5中，已经提供了AtomicStampedReference来解决问题。</span><br><span class=\"line\">②.CAS造成CPU利用率增加。之前说过了CAS里面是一个循环判断的过程，如果线程一直没有获取到状态，cpu资源会一直被占用。</span><br></pre></td></tr></table></figure>\n\n\n</blockquote>\n<h3 id=\"反问\"><a href=\"#反问\" class=\"headerlink\" title=\"反问\"></a>反问</h3><h3 id=\"20-打算实习时间\"><a href=\"#20-打算实习时间\" class=\"headerlink\" title=\"20.打算实习时间\"></a>20.打算实习时间</h3><blockquote>\n<p>大约寒假就可以开始</p>\n</blockquote>\n<p>转载<a href=\"https://blog.nowcoder.net/n/18665b426d354fba9064db4f2af43863\">美团Java后端实习面经（一二面），已接offer~_牛客博客 (nowcoder.net)</a></p>\n","categories":["面试"],"tags":["Java","面试"]},{"title":"Git面试","url":"/2022/07/02/Git%E9%9D%A2%E8%AF%95/","content":"<h2 id=\"Git\"><a href=\"#Git\" class=\"headerlink\" title=\"Git\"></a>Git</h2><h3 id=\"1-什么是git\"><a href=\"#1-什么是git\" class=\"headerlink\" title=\"1.什么是git?\"></a>1.什么是git?</h3><blockquote>\n<p>git是一个常用的分布式版本管理工具。</p>\n</blockquote>\n<h3 id=\"2-git常用的命令\"><a href=\"#2-git常用的命令\" class=\"headerlink\" title=\"2.git常用的命令\"></a>2.git常用的命令</h3><blockquote>\n<ul>\n<li>git add 添加文件到暂存区</li>\n<li>git commit 提交文件到本地仓库</li>\n<li>git pull 从远程仓库拉取项目到本地</li>\n<li>git push 将本地仓库的新的改变推送到远程仓库</li>\n<li>git clone 将远程仓库复制到本地</li>\n<li>git fetch 抓取</li>\n<li>git merge 合并</li>\n</ul>\n</blockquote>\n<h3 id=\"3-git-pull、git-merge、git-fetch三个命令的区别？\"><a href=\"#3-git-pull、git-merge、git-fetch三个命令的区别？\" class=\"headerlink\" title=\"3.git pull、git merge、git fetch三个命令的区别？\"></a>3.<code>git pull</code>、<code>git merge</code>、<code>git fetch</code>三个命令的区别？</h3><blockquote>\n<p>git clone：是在本地没有版本库的情况下，从远程仓库克隆一份到本地，是一个本地版本库从无到有的过程</p>\n<p>git pull：是在本地仓库已经存在的情况下，将远程最新的commits抓取并合并到本地版本库的过程</p>\n<p>git fetch： 从远程版本库抓取最新的commits，不会进行合并</p>\n<p>git merge：合并</p>\n<p>所以git pull = git fetch + git merge</p>\n</blockquote>\n<h3 id=\"4-push之前一定要进行哪个操作？\"><a href=\"#4-push之前一定要进行哪个操作？\" class=\"headerlink\" title=\"4.push之前一定要进行哪个操作？\"></a>4.push之前一定要进行哪个操作？</h3><blockquote>\n<p>push之前一定要进行本地更新操作。使用<code>git pull</code>命令或者使用<code>git fetch</code>和<code>git merge</code>的命令组合。这时候，可能会出现版本冲突，如果出现的话，需要解决完冲突再进行代码push。</p>\n</blockquote>\n<h3 id=\"5-如何解决版本冲突\"><a href=\"#5-如何解决版本冲突\" class=\"headerlink\" title=\"5.如何解决版本冲突\"></a>5.如何解决版本冲突</h3><blockquote>\n<p>版本冲突多出现在合并操作(合并远程仓库代码或者合并分支代码)中。如果出现版本冲突，需要具体分析出现冲突的代码区，手动进行代码合并，然后再进行提交。</p>\n</blockquote>\n<h3 id=\"6-别人在远程推送的新分支怎么合并在自己上面\"><a href=\"#6-别人在远程推送的新分支怎么合并在自己上面\" class=\"headerlink\" title=\"6.别人在远程推送的新分支怎么合并在自己上面\"></a>6.别人在远程推送的新分支怎么合并在自己上面</h3><blockquote>\n<p>假设别人分支是A，我是B</p>\n<p>git checkout B;//到自己分区</p>\n<p>git merge A;//合并分支</p>\n<p>git push;//提交</p>\n</blockquote>\n","categories":["面试"],"tags":["面试","Git"]},{"title":"9/16华为技术面","url":"/2022/09/16/9%E6%9C%8816%E6%97%A5%E5%8D%8E%E4%B8%BA%E6%8A%80%E6%9C%AF%E9%9D%A2/","content":"<h3 id=\"1-Java的跨平台的机制是什么？\"><a href=\"#1-Java的跨平台的机制是什么？\" class=\"headerlink\" title=\"1. Java的跨平台的机制是什么？\"></a>1. Java的跨平台的机制是什么？</h3><blockquote>\n<p><em>java语言编写的程序,一次编译后,可以在多个系统平台上运行</em></p>\n<p>Java程序是通过java虚拟机在系统平台上运行的，只要该系统可以安装相应的java虚拟机，该系统就可以运行java程序</p>\n</blockquote>\n<h3 id=\"2-JVM-内存是怎么管理的？\"><a href=\"#2-JVM-内存是怎么管理的？\" class=\"headerlink\" title=\"2. JVM  内存是怎么管理的？\"></a>2. JVM  内存是怎么管理的？</h3><blockquote>\n<p>堆，方法区，程序计数器，虚拟机栈，本地方法栈</p>\n</blockquote>\n<h3 id=\"3-GC-一般在什么时候触发？\"><a href=\"#3-GC-一般在什么时候触发？\" class=\"headerlink\" title=\"3.GC  一般在什么时候触发？\"></a>3.GC  一般在什么时候触发？</h3><blockquote>\n<ul>\n<li>Young GC 一般是在新生代的 Eden 区满了之后触发的</li>\n<li>Full GC<ol>\n<li>年老代（Tenured）被写满；</li>\n<li>持久代（Perm）被写满；</li>\n<li>System.gc()被显示调用；</li>\n<li>上一次GC之后Heap的各域分配策略动态变化；</li>\n</ol>\n</li>\n</ul>\n</blockquote>\n<h3 id=\"4-调用GC（System-gc-）之后会立即触发吗？如果立马触发的话，会导致频繁回收，又会带来什么问题？\"><a href=\"#4-调用GC（System-gc-）之后会立即触发吗？如果立马触发的话，会导致频繁回收，又会带来什么问题？\" class=\"headerlink\" title=\"4. 调用GC（System.gc()）之后会立即触发吗？如果立马触发的话，会导致频繁回收，又会带来什么问题？\"></a>4. 调用GC（System.gc()）之后会立即触发吗？如果立马触发的话，会导致频繁回收，又会带来什么问题？</h3><p> 如果不是，是什么机制来保障的（finalize）</p>\n<blockquote>\n<p>不会立马触发。甚至可能不会垃圾回收。</p>\n<p>造成系统卡顿</p>\n<p>用justRanFinalization来保障System.gc()执不执行</p>\n</blockquote>\n<h3 id=\"5-Java-有了-GC-之后还会有内存泄漏问题吗？\"><a href=\"#5-Java-有了-GC-之后还会有内存泄漏问题吗？\" class=\"headerlink\" title=\"5. Java  有了  GC  之后还会有内存泄漏问题吗？\"></a>5. Java  有了  GC  之后还会有内存泄漏问题吗？</h3><blockquote>\n<ol>\n<li><p>静态集合类泄漏<br>静态集合类像HashMap，Vector等的使用最容易出现内存泄漏，静态变量的声明周期与应用程序一直，所有的对象Object也不能内释放，因为被其他对象引用着。</p>\n</li>\n<li><p>单例造成的泄漏</p>\n<p>单例对象在初始化后将在JVM的整个生命周期中存在（以静态变量的方式），如果单例对象持有外部的引用，那么这个对象将不能被JVM正常回收，导致内存泄漏。</p>\n</li>\n<li><p>各种连接<br>数据库连接，网络连接，IO连接等没有显式调用close()关闭，会导致内存泄漏。</p>\n</li>\n<li><p>监听器的使用<br>在释放对象的同时，没有删除相应监听器，也会造成内存泄漏。</p>\n</li>\n</ol>\n</blockquote>\n<h3 id=\"6-哪些可以作为-GC-Roots-？\"><a href=\"#6-哪些可以作为-GC-Roots-？\" class=\"headerlink\" title=\"6. 哪些可以作为  GC Roots  ？\"></a>6. 哪些可以作为  GC Roots  ？</h3><blockquote>\n<ol>\n<li>虚拟机栈(栈帧中的本地变量表)中引用的对象</li>\n<li>方法区中类静态属性引用的对象</li>\n<li>方法区中常量引用的对象</li>\n<li>本地方法栈中JNI引用的对象</li>\n</ol>\n</blockquote>\n<h3 id=\"7-String-类型不可修改，为什么呢？字符串常量，或者new一个String对象，创建对象的时候有什么差异吗？非要改String类型的值，能改的到吗？new一个String对象，是放在哪里的？StringBuilder和StringBuffer有什么区别？\"><a href=\"#7-String-类型不可修改，为什么呢？字符串常量，或者new一个String对象，创建对象的时候有什么差异吗？非要改String类型的值，能改的到吗？new一个String对象，是放在哪里的？StringBuilder和StringBuffer有什么区别？\" class=\"headerlink\" title=\"7. String  类型不可修改，为什么呢？字符串常量，或者new一个String对象，创建对象的时候有什么差异吗？非要改String类型的值，能改的到吗？new一个String对象，是放在哪里的？StringBuilder和StringBuffer有什么区别？\"></a>7. String  类型不可修改，为什么呢？字符串常量，或者new一个String对象，创建对象的时候有什么差异吗？非要改String类型的值，能改的到吗？new一个String对象，是放在哪里的？StringBuilder和StringBuffer有什么区别？</h3><blockquote>\n<p>String不可变是因为字符数组被final和private修饰。并且String没有提供可以修改字符数组的API</p>\n<p>new一个对象时指向堆里面的，字符串常量时指向方法区里的字符串常量池</p>\n<p>反射可以修改（不是声明底层字段会失败）</p>\n<p>放在堆里（Heap）</p>\n<p>一个线程不安全一个线程安全</p>\n</blockquote>\n<h3 id=\"8-反射机制有了解吗？反射创建对象和new创建对象有什么区别？反射和new的性能哪个更高一点？\"><a href=\"#8-反射机制有了解吗？反射创建对象和new创建对象有什么区别？反射和new的性能哪个更高一点？\" class=\"headerlink\" title=\"8.  反射机制有了解吗？反射创建对象和new创建对象有什么区别？反射和new的性能哪个更高一点？\"></a>8.  反射机制有了解吗？反射创建对象和new创建对象有什么区别？反射和new的性能哪个更高一点？</h3><blockquote>\n<p>有</p>\n<p>new属于静态编译<br>反射属于动态编译，意思就说只有到运行时才会去获得该对象的实例,Spring就是使用的反射</p>\n<p>new性能更高</p>\n</blockquote>\n<h3 id=\"9-多线程了解吗？通过什么类来实现？\"><a href=\"#9-多线程了解吗？通过什么类来实现？\" class=\"headerlink\" title=\"9. 多线程了解吗？通过什么类来实现？\"></a>9. 多线程了解吗？通过什么类来实现？</h3><blockquote>\n<p>了解</p>\n<p>主要通过Thread类</p>\n</blockquote>\n<h3 id=\"10-设计模式有了解吗？用了这些模式，带来的好处是什么？为什么要用这些设计模式（方便管理类、分工开发）\"><a href=\"#10-设计模式有了解吗？用了这些模式，带来的好处是什么？为什么要用这些设计模式（方便管理类、分工开发）\" class=\"headerlink\" title=\"10. 设计模式有了解吗？用了这些模式，带来的好处是什么？为什么要用这些设计模式（方便管理类、分工开发）\"></a>10. 设计模式有了解吗？用了这些模式，带来的好处是什么？为什么要用这些设计模式（方便<a href>管理类</a>、分工开发）</h3><blockquote>\n<p>​    了解</p>\n<ul>\n<li>方便重用，方便移植</li>\n<li>方便阅读，方便他人了解</li>\n<li>代码可靠性更高，降低错误发生</li>\n<li>节省写项目的时间</li>\n</ul>\n</blockquote>\n<h3 id=\"11-Redis-和大型数据库有什么区别？为什么要用这个数据库（Redis）\"><a href=\"#11-Redis-和大型数据库有什么区别？为什么要用这个数据库（Redis）\" class=\"headerlink\" title=\"11.Redis  和大型数据库有什么区别？为什么要用这个数据库（Redis）\"></a>11.Redis  和大型数据库有什么区别？为什么要用这个<a href>数据</a>库（Redis）</h3><blockquote>\n<ul>\n<li>Redis是非关系型数据库，Mysql是关系型数据库</li>\n<li>Mysql持久化到硬盘中，读取较慢，Redis数据存储到内存中，读取速度快</li>\n</ul>\n<p>为什么要用:</p>\n<p>反复连接数据库需要花费很多时间，从而导致<strong>运行效率过慢</strong>，反复连接也会导致<strong>数据库负载变高</strong>。由于Redis是基于内存操作，所以<code>CPU不是性能瓶颈</code>，机器的<code>内存和宽带才是Redis的瓶颈</code>，所以用Redis可以减少访问数据库的次数，提高运行效率。</p>\n</blockquote>\n<h3 id=\"12-编码的时候，会做网络字节序转换，大小端转换，为什么要做这个转换呢？-（不会）\"><a href=\"#12-编码的时候，会做网络字节序转换，大小端转换，为什么要做这个转换呢？-（不会）\" class=\"headerlink\" title=\"12. 编码的时候，会做网络字节序转换，大小端转换，为什么要做这个转换呢？   （不会）\"></a>12. 编码的时候，会做网络字节序转换，大小端转换，为什么要做这个转换呢？   （不会）</h3><blockquote>\n<p> 因为不同的计算机都有自己的主机字节序，为了保证数据传输的统一性，就是让数据在所有计算机上都以一种通用形式呈现，所以会作网络字节序转换。</p>\n<p>TCP/IP协议规定使用“大端”字节序作为网络字节序。</p>\n</blockquote>\n<h3 id=\"13-ICMP-协议，有了解吗？\"><a href=\"#13-ICMP-协议，有了解吗？\" class=\"headerlink\" title=\"13.  ICMP  协议，有了解吗？\"></a>13.  ICMP  协议，有了解吗？</h3><blockquote>\n<p>ICMP（Internet Control Message Protocol）Internet控制报文协议。它是TCP/IP协议簇的一个子协议，用于在IP主机、路由器之间传递控制消息。控制消息是指网络通不通、主机是否可达、路由是否可用等网络本身的消息。这些控制消息虽然并不传输用户数据，但是对于用户数据的传递起着重要的作用。</p>\n<p>它的功能是报告无法传送的数据包的错误，并帮助对这些错误进行疑难解答。</p>\n<p>典型应用:PING,traceroute（检查路由（路径）并测量跨Internet协议（IP）网络的传输延迟数据包的工具）</p>\n</blockquote>\n<h3 id=\"14-HTTP-和-HTTPS-的区别是什么？\"><a href=\"#14-HTTP-和-HTTPS-的区别是什么？\" class=\"headerlink\" title=\"14. HTTP  和  HTTPS  的区别是什么？\"></a>14. HTTP  和  HTTPS  的区别是什么？</h3><blockquote>\n<p>1、https协议需要到ca申请证书，一般免费证书较少，因而需要一定费用。</p>\n<p>2、http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl加密传输协议。</p>\n<p>3、http和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。</p>\n<p>4、http的连接很简单，是无状态的；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。</p>\n</blockquote>\n<h3 id=\"15-数字证书使用了什么机制？数字证书为什么被创建？\"><a href=\"#15-数字证书使用了什么机制？数字证书为什么被创建？\" class=\"headerlink\" title=\"15. 数字证书使用了什么机制？数字证书为什么被创建？\"></a>15. 数字证书使用了什么机制？数字证书为什么被创建？</h3><blockquote>\n<p>数字证书采用公钥体制，即利用一对互相匹配的密钥进行加密、解密。用于加密和验证签名。当发送一份保密文件时，发送方使用接收方的公钥对数据加密，而接收方则使用自己的私钥解密，这样信息就可以安全无误地到达目的地了。通过数字的手段保证加密过程是一个不可逆过程，即只有用私有密钥才能解密。</p>\n<p>为了防止信息泄露，所以必须保证网络安全的四大要素:</p>\n<ul>\n<li>信息传输的保密性</li>\n<li>数据交换的完整性</li>\n<li>发送信息的不可否认性</li>\n<li>交易者身份的确定性</li>\n</ul>\n<p>所以创建数字证书</p>\n</blockquote>\n<p>摘自华为面经-Java-西安_笔经面经_牛客网(<a href=\"https://www.nowcoder.com/discuss/1053917\">https://www.nowcoder.com/discuss/1053917</a>)</p>\n","categories":["面试"],"tags":["Java","面试"]},{"title":"HashMap为什么线程不安全","url":"/2022/08/08/HashMap%E4%B8%BA%E4%BB%80%E4%B9%88%E7%BA%BF%E7%A8%8B%E4%B8%8D%E5%AE%89%E5%85%A8/","content":"<h4 id=\"HashMap原理\"><a href=\"#HashMap原理\" class=\"headerlink\" title=\"HashMap原理\"></a>HashMap原理</h4><p>数据结构上：数组+(链表和红黑树)</p>\n<h4 id=\"HashMap线程不安全问题\"><a href=\"#HashMap线程不安全问题\" class=\"headerlink\" title=\"HashMap线程不安全问题\"></a>HashMap线程不安全问题</h4><blockquote>\n<p>HashMap 是线程不安全的，原因就在于 HashMap 的 <strong>rehash</strong>。<strong>rehash</strong> 是 HashMap 扩容过程种的一个步骤。 HashMap 的容量是有限的。当经过多次元素插入，使得 HashMap 达到一定饱和度时，Key 映射位置发生冲突的几率会逐渐提高。 这时候，HashMap 需要扩展它的长度，也就是进行 Resize。 影响发生 Resize 的因素有两个：</p>\n<p>1.<strong>Capacity</strong></p>\n<p>HashMap 的当前长度。上一期曾经说过，HashMap 的长度是 2 的幂。</p>\n<p>2.<strong>LoadFactor</strong></p>\n<p>HashMap 负载因子，默认值为 0.75f。</p>\n<p>衡量 HashMap 是否进行 Resize 的 条件如下：</p>\n<p>HashMap.Size  &gt;= Capacity * LoadFactor</p>\n<p>HashMap 的扩容主要分为两步：</p>\n<ol>\n<li><p>扩容</p>\n<p>创建一个新的 Entry 空数组，长度是原数组的 2 倍</p>\n</li>\n<li><p>ReHash</p>\n<p>遍历原 Entry 数组，把所有的 Entry 重新 Hash 到新数组。为什么要重新 Hash 呢？因为长度扩大以后，Hash 的规则也随之改变。</p>\n<p>让我们回顾一下 Hash 公式：</p>\n<p>index = HashCode（Key） &amp; （Length - 1）**(计算哈希索引)**</p>\n<p>当原数组长度为 8 时，Hash 运算是和 111B 做与运算；新数组长度为 16，Hash 运算是和 1111B 做与运算。Hash 结果显然不同。</p>\n<p>ReHash 的 Java 代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Transfers all entries from current table to newTable.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">transfer</span><span class=\"params\">(Entry[] newTable, <span class=\"type\">boolean</span> rehash)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">newCapacity</span> <span class=\"operator\">=</span> newTable.length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Entry&lt;K,V&gt; e : table) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"literal\">null</span> != e) &#123;</span><br><span class=\"line\">            Entry&lt;K,V&gt; next = e.next;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (rehash) &#123;</span><br><span class=\"line\">                e.hash = <span class=\"literal\">null</span> == e.key ? <span class=\"number\">0</span> : hash(e.key);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> indexFor(e.hash, newCapacity);</span><br><span class=\"line\">            e.next = newTable[i];</span><br><span class=\"line\">            newTable[i] = e;</span><br><span class=\"line\">            e = next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上过程单线程下不会出现问题，但是当两个线程同时触发resize的时候就有可能出现问题</p>\n<p>假设一个HashMap已经到了Resize的临界点。此时有两个线程A和B，在同一时刻对HashMap进行Put操作：</p>\n<p><img src=\"https://static.oschina.net/uploads/space/2017/1229/171705_8KHj_1860759.png\" alt=\"img\"></p>\n<p>此时达到Resize条件，两个线程各自进行Rezie的第一步，也就是扩容：</p>\n<p><img src=\"https://static.oschina.net/uploads/space/2017/1229/171730_nKJe_1860759.png\" alt=\"img\"></p>\n<p>这时候，两个线程都走到了ReHash的步骤。让我们回顾一下ReHash的代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Entry&lt;K,V&gt; next = e.next;</span><br></pre></td></tr></table></figure>\n\n<p>假如此时线程B遍历到Entry3对象，刚执行完红框里的这行代码，线程就被挂起。对于线程B来说：</p>\n<p>e = Entry3</p>\n<p>next = Entry2</p>\n<p>这时候线程A畅通无阻地进行着Rehash，当ReHash完成后，结果如下（图中的e和next，代表线程B的两个引用）：</p>\n<p><img src=\"https://static.oschina.net/uploads/space/2017/1229/174539_nVJj_1860759.png\" alt=\"img\"></p>\n<p>直到这一步，看起来没什么毛病。接下来线程B恢复，继续执行属于它自己的ReHash。线程B刚才的状态是：</p>\n<p>e = Entry3</p>\n<p>next = Entry2</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> indexFor(e.hash, newCapacity);</span><br></pre></td></tr></table></figure>\n\n<p>当执行到上面这一行时，显然 i = 3，因为刚才线程A对于Entry3的hash结果也是3。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">newTable[i] = e;</span><br><span class=\"line\">e = next;</span><br></pre></td></tr></table></figure>\n\n<p>我们继续执行到这两行，Entry3放入了线程B的数组下标为3的位置，并且e指向了Entry2。此时e和next的指向如下：</p>\n<p>e = Entry2</p>\n<p>next = Entry2</p>\n<p>整体情况如图所示：</p>\n<p><img src=\"https://static.oschina.net/uploads/space/2017/1229/174637_jMIL_1860759.png\" alt=\"img\"></p>\n<p>接着是新一轮循环，又执行到红框内的代码行：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Entry&lt;K,V&gt; next = e.next;</span><br></pre></td></tr></table></figure>\n\n<p>e = Entry2</p>\n<p>next = Entry3</p>\n<p>整体情况如图所示：</p>\n<p><img src=\"https://static.oschina.net/uploads/space/2017/1229/174707_4fJ8_1860759.png\" alt=\"img\"></p>\n<p>接下来执行下面的三行，用头插法把Entry2插入到了线程B的数组的头结点：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">e.next = newTable[i];</span><br><span class=\"line\">newTable[i] = e;</span><br><span class=\"line\">e = next;</span><br></pre></td></tr></table></figure>\n\n<p>整体情况如图所示：</p>\n<p><img src=\"https://static.oschina.net/uploads/space/2017/1229/174732_ZDEZ_1860759.png\" alt=\"img\"></p>\n<p>第三次循环开始，又执行到红框的代码：</p>\n<p>e = Entry3</p>\n<p>next = Entry3.next = null</p>\n<p>最后一步，当我们执行下面这一行的时候，见证奇迹的时刻来临了：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">e.next = newTable[i];</span><br></pre></td></tr></table></figure>\n\n<p>newTable[i] = Entry2</p>\n<p>e = Entry3</p>\n<p>Entry2.next = Entry3</p>\n<p>Entry3.next = Entry2</p>\n<p>链表出现了环形！</p>\n<p>整体情况如图所示：</p>\n<p><img src=\"https://static.oschina.net/uploads/space/2017/1229/174818_kap6_1860759.png\" alt=\"img\"></p>\n<p>此时，问题还没有直接产生。当调用Get查找一个不存在的Key，而这个Key的Hash结果恰好等于3的时候，由于位置3带有环形链表，所以程序将会进入死循环！**(此问题在JDK8中已经解决，上图过程看看就好)**</p>\n<p>主要的问题是，两个线程在同一个数组索引下标添加元素时，比如A添加key2,B添加key3,会可能导致key2或者key3丢失。</p>\n</li>\n</ol>\n</blockquote>\n<h3 id=\"ConCurrentHashMap安全吗，是怎么保证安全的？\"><a href=\"#ConCurrentHashMap安全吗，是怎么保证安全的？\" class=\"headerlink\" title=\"ConCurrentHashMap安全吗，是怎么保证安全的？\"></a>ConCurrentHashMap安全吗，是怎么保证安全的？</h3><blockquote>\n<p>目前有如下一些方式可以获得线程安全的HashMap：</p>\n<ul>\n<li><em>Collections.synchronizedMap</em></li>\n<li>HashTable</li>\n<li>ConcurrentHashMap</li>\n</ul>\n<p>其中，前两种方式由于全局锁的问题，存在很严重的性能问题。所以，著名的并发编程大师Doug Lea在JDK1.5的java.util.concurrent包下面添加了一大堆并发工具。其中就包含ConcurrentHashMap这个线程安全的HashMap。</p>\n<p>ConcurrentHashMap在JDK7和JDK8中的实现方式上有较大的不同。首先我们先来大概回顾一下ConcurrentHashMap在JDK7中的原理是怎样的。</p>\n<h4 id=\"1-分段锁技术-JDK7\"><a href=\"#1-分段锁技术-JDK7\" class=\"headerlink\" title=\"1.分段锁技术(JDK7)\"></a>1.分段锁技术(JDK7)</h4><blockquote>\n<p>针对HashTable会锁整个hash表的问题，ConcurrentHashMap提出了分段锁的解决方案。</p>\n<p>分段锁的思想就是：<strong>锁的时候不锁整个hash表，而是只锁一部分</strong>。</p>\n<p>如何实现呢？这就用到了ConcurrentHashMap中最关键的Segment。</p>\n<p>ConcurrentHashMap中维护着一个Segment数组，每个Segment可以看做是一个HashMap。</p>\n<p>而Segment本身继承了ReentrantLock，它本身就是一个锁。</p>\n<p>在Segment中通过HashEntry数组来维护其内部的hash表。</p>\n<p>每个HashEntry就代表了map中的一个K-V，用HashEntry可以组成一个链表结构，通过next字段引用到其下一个元素。</p>\n<p>上述内容在源码中的表示如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ConcurrentHashMap</span>&lt;K, V&gt; <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractMap</span>&lt;K, V&gt;</span><br><span class=\"line\">        <span class=\"keyword\">implements</span> <span class=\"title class_\">ConcurrentMap</span>&lt;K, V&gt;, Serializable &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ... 省略 ...</span></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * The segments, each of which is a specialized hash table.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> Segment&lt;K,V&gt;[] segments;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ... 省略 ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Segment是ConcurrentHashMap的静态内部类</span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * Segments are specialized versions of hash tables.  This</span></span><br><span class=\"line\"><span class=\"comment\">     * subclasses from ReentrantLock opportunistically, just to</span></span><br><span class=\"line\"><span class=\"comment\">     * simplify some locking and avoid separate construction.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Segment</span>&lt;K,V&gt; <span class=\"keyword\">extends</span> <span class=\"title class_\">ReentrantLock</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Serializable</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ... 省略 ...</span></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * The per-segment table. Elements are accessed via</span></span><br><span class=\"line\"><span class=\"comment\">         * entryAt/setEntryAt providing volatile semantics.</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">transient</span> <span class=\"keyword\">volatile</span> HashEntry&lt;K,V&gt;[] table;</span><br><span class=\"line\">        <span class=\"comment\">// ... 省略 ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// ... 省略 ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * ConcurrentHashMap list entry. Note that this is never exported</span></span><br><span class=\"line\"><span class=\"comment\">     * out as a user-visible Map.Entry.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HashEntry</span>&lt;K,V&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">int</span> hash;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> K key;</span><br><span class=\"line\">        <span class=\"keyword\">volatile</span> V value;</span><br><span class=\"line\">        <span class=\"keyword\">volatile</span> HashEntry&lt;K,V&gt; next;</span><br><span class=\"line\">        <span class=\"comment\">// ... 省略 ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://pic1.zhimg.com/80/v2-f53c2717e40e288ba87738bc45822dd0_1440w.jpg\" alt=\"img\"></p>\n<p>由上图可见，只要我们的hash值足够分散，那么每次put的时候就会put到不同的segment中去。 而segment自己本身就是一个锁，put的时候，当前segment会将自己锁住，此时其他线程无法操作这个segment， 但不会影响到其他segment的操作。这个就是锁分段带来的好处。</p>\n</blockquote>\n<h4 id=\"2-线程安全的put\"><a href=\"#2-线程安全的put\" class=\"headerlink\" title=\"2.线程安全的put\"></a>2.线程安全的put</h4><p>ConcurrentHashMap的put方法源码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> V <span class=\"title function_\">put</span><span class=\"params\">(K key, V value)</span> &#123;</span><br><span class=\"line\">    Segment&lt;K,V&gt; s;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value == <span class=\"literal\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NullPointerException</span>();</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">hash</span> <span class=\"operator\">=</span> hash(key);</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> (hash &gt;&gt;&gt; segmentShift) &amp; segmentMask;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 根据key的hash定位出一个segment，如果指定index的segment还没初始化，则调用ensureSegment方法初始化</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((s = (Segment&lt;K,V&gt;)UNSAFE.getObject          <span class=\"comment\">// nonvolatile; recheck</span></span><br><span class=\"line\">         (segments, (j &lt;&lt; SSHIFT) + SBASE)) == <span class=\"literal\">null</span>) <span class=\"comment\">//  in ensureSegment</span></span><br><span class=\"line\">        s = ensureSegment(j);</span><br><span class=\"line\">    <span class=\"comment\">// 调用segment的put方法</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> s.put(key, hash, value, <span class=\"literal\">false</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最终会调用segment的put方法，将元素put到HashEntry数组中，这里的注释中只给出锁相关的说明</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> V <span class=\"title function_\">put</span><span class=\"params\">(K key, <span class=\"type\">int</span> hash, V value, <span class=\"type\">boolean</span> onlyIfAbsent)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 因为segment本身就是一个锁</span></span><br><span class=\"line\">    <span class=\"comment\">// 这里调用tryLock尝试获取锁</span></span><br><span class=\"line\">    <span class=\"comment\">// 如果获取成功，那么其他线程都无法再修改这个segment</span></span><br><span class=\"line\">    <span class=\"comment\">// 如果获取失败，会调用scanAndLockForPut方法根据key和hash尝试找到这个node，如果不存在，则创建一个node并返回，如果存在则返回null</span></span><br><span class=\"line\">    <span class=\"comment\">// 查看scanAndLockForPut源码会发现他在查找的过程中会尝试获取锁，在多核CPU环境下，会尝试64次tryLock()，如果64次还没获取到，会直接调用lock()</span></span><br><span class=\"line\">    <span class=\"comment\">// 也就是说这一步一定会获取到锁</span></span><br><span class=\"line\">    HashEntry&lt;K,V&gt; node = tryLock() ? <span class=\"literal\">null</span> :</span><br><span class=\"line\">        scanAndLockForPut(key, hash, value);</span><br><span class=\"line\">    V oldValue;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        HashEntry&lt;K,V&gt;[] tab = table;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">index</span> <span class=\"operator\">=</span> (tab.length - <span class=\"number\">1</span>) &amp; hash;</span><br><span class=\"line\">        HashEntry&lt;K,V&gt; first = entryAt(tab, index);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (HashEntry&lt;K,V&gt; e = first;;) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (e != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                K k;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((k = e.key) == key ||</span><br><span class=\"line\">                    (e.hash == hash &amp;&amp; key.equals(k))) &#123;</span><br><span class=\"line\">                    oldValue = e.value;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (!onlyIfAbsent) &#123;</span><br><span class=\"line\">                        e.value = value;</span><br><span class=\"line\">                        ++modCount;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                e = e.next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (node != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                    node.setNext(first);</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                    node = <span class=\"keyword\">new</span> <span class=\"title class_\">HashEntry</span>&lt;K,V&gt;(hash, key, value, first);</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> count + <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (c &gt; threshold &amp;&amp; tab.length &lt; MAXIMUM_CAPACITY)</span><br><span class=\"line\">                    <span class=\"comment\">// 扩容</span></span><br><span class=\"line\">                    rehash(node);</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                    setEntryAt(tab, index, node);</span><br><span class=\"line\">                ++modCount;</span><br><span class=\"line\">                count = c;</span><br><span class=\"line\">                oldValue = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 释放锁</span></span><br><span class=\"line\">        unlock();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> oldValue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-线程安全的扩容-Rehash\"><a href=\"#3-线程安全的扩容-Rehash\" class=\"headerlink\" title=\"3.线程安全的扩容(Rehash)\"></a>3.线程安全的扩容(Rehash)</h4><p>HashMap的线程安全问题大部分出在扩容(rehash)的过程中。</p>\n<p>ConcurrentHashMap的扩容<strong>只针对每个segment</strong>中的HashEntry数组进行扩容。</p>\n<p>由上述put的源码可知，ConcurrentHashMap在rehash的时候是有锁的，所以在rehash的过程中，其他线程无法对segment的hash表做操作，这就保证了线程安全。</p>\n<h3 id=\"1-JDK8中ConcurrentHashMap的初始化\"><a href=\"#1-JDK8中ConcurrentHashMap的初始化\" class=\"headerlink\" title=\"1.JDK8中ConcurrentHashMap的初始化\"></a>1.JDK8中ConcurrentHashMap的初始化</h3><p>以无参数构造函数为例，来看一下ConcurrentHashMap类初始化的时候会做些什么。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">ConcurrentHashMap&lt;String, String&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">ConcurrentHashMap</span>&lt;&gt;();</span><br></pre></td></tr></table></figure>\n\n<p>首先会执行静态代码块和初始化类变量。 主要会初始化以下这些类变量：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">这里用到了Unsafe类，其中objectFieldOffset方法用于获取指定Field(例如sizeCtl)在内存中的偏移量。<span class=\"comment\">// Unsafe mechanics</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> sun.misc.Unsafe U;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> SIZECTL;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> TRANSFERINDEX;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> BASECOUNT;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> CELLSBUSY;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> CELLVALUE;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> ABASE;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> ASHIFT;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        U = sun.misc.Unsafe.getUnsafe();</span><br><span class=\"line\">        Class&lt;?&gt; k = ConcurrentHashMap.class;</span><br><span class=\"line\">        SIZECTL = U.objectFieldOffset</span><br><span class=\"line\">            (k.getDeclaredField(<span class=\"string\">&quot;sizeCtl&quot;</span>));</span><br><span class=\"line\">        TRANSFERINDEX = U.objectFieldOffset</span><br><span class=\"line\">            (k.getDeclaredField(<span class=\"string\">&quot;transferIndex&quot;</span>));</span><br><span class=\"line\">        BASECOUNT = U.objectFieldOffset</span><br><span class=\"line\">            (k.getDeclaredField(<span class=\"string\">&quot;baseCount&quot;</span>));</span><br><span class=\"line\">        CELLSBUSY = U.objectFieldOffset</span><br><span class=\"line\">            (k.getDeclaredField(<span class=\"string\">&quot;cellsBusy&quot;</span>));</span><br><span class=\"line\">        Class&lt;?&gt; ck = CounterCell.class;</span><br><span class=\"line\">        CELLVALUE = U.objectFieldOffset</span><br><span class=\"line\">            (ck.getDeclaredField(<span class=\"string\">&quot;value&quot;</span>));</span><br><span class=\"line\">        Class&lt;?&gt; ak = Node[].class;</span><br><span class=\"line\">        ABASE = U.arrayBaseOffset(ak);</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">scale</span> <span class=\"operator\">=</span> U.arrayIndexScale(ak);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((scale &amp; (scale - <span class=\"number\">1</span>)) != <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&quot;data type scale not a power of two&quot;</span>);</span><br><span class=\"line\">        ASHIFT = <span class=\"number\">31</span> - Integer.numberOfLeadingZeros(scale);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;这里用到了Unsafe类，其中objectFieldOffset方法用于获取指定Field(例如sizeCtl)在内存中的偏移量。</span><br></pre></td></tr></table></figure>\n\n<p>这里用到了Unsafe类，其中objectFieldOffset方法用于获取指定Field(例如sizeCtl)在内存中的偏移量。</p>\n<h3 id=\"2-内部数据结构\"><a href=\"#2-内部数据结构\" class=\"headerlink\" title=\"2.内部数据结构\"></a>2.内部数据结构</h3><p>先来从源码角度看一下JDK8中是怎么定义的存储结构。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * The array of bins. Lazily initialized upon first insertion.</span></span><br><span class=\"line\"><span class=\"comment\"> * Size is always a power of two. Accessed directly by iterators.</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * hash表，在第一次put数据的时候才初始化，他的大小总是2的倍数。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">transient</span> <span class=\"keyword\">volatile</span> Node&lt;K,V&gt;[] table;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 用来存储一个键值对</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * Key-value entry.  This class is never exported out as a</span></span><br><span class=\"line\"><span class=\"comment\"> * user-mutable Map.Entry (i.e., one supporting setValue; see</span></span><br><span class=\"line\"><span class=\"comment\"> * MapEntry below), but can be used for read-only traversals used</span></span><br><span class=\"line\"><span class=\"comment\"> * in bulk tasks.  Subclasses of Node with a negative hash field</span></span><br><span class=\"line\"><span class=\"comment\"> * are special, and contain null keys and values (but are never</span></span><br><span class=\"line\"><span class=\"comment\"> * exported).  Otherwise, keys and vals are never null.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Node</span>&lt;K,V&gt; <span class=\"keyword\">implements</span> <span class=\"title class_\">Map</span>.Entry&lt;K,V&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">int</span> hash;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> K key;</span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> V val;</span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> Node&lt;K,V&gt; next;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以发现，JDK8与JDK7的实现由较大的不同，JDK8中不在使用Segment的概念，他更像HashMap的实现方式。</p>\n<p><img src=\"https://pic1.zhimg.com/80/v2-53355a611b890d50b91f857222ac3e7c_1440w.jpg\" alt=\"img\"></p>\n<h3 id=\"3-线程安全的hash表初始化\"><a href=\"#3-线程安全的hash表初始化\" class=\"headerlink\" title=\"3.线程安全的hash表初始化\"></a>3.线程安全的hash表初始化</h3><p>由上文可知ConcurrentHashMap是用table这个成员变量来持有hash表的。</p>\n<p>table的初始化采用了延迟初始化策略，他会在第一次执行put的时候初始化table。</p>\n<p>put方法源码如下（省略了暂时不相关的代码）：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Maps the specified key to the specified value in this table.</span></span><br><span class=\"line\"><span class=\"comment\"> * Neither the key nor the value can be null.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;The value can be retrieved by calling the &#123;<span class=\"doctag\">@code</span> get&#125; method</span></span><br><span class=\"line\"><span class=\"comment\"> * with a key that is equal to the original key.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> key key with which the specified value is to be associated</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> value value to be associated with the specified key</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> the previous value associated with &#123;<span class=\"doctag\">@code</span> key&#125;, or</span></span><br><span class=\"line\"><span class=\"comment\"> *         &#123;<span class=\"doctag\">@code</span> null&#125; if there was no mapping for &#123;<span class=\"doctag\">@code</span> key&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@throws</span> NullPointerException if the specified key or value is null</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> V <span class=\"title function_\">put</span><span class=\"params\">(K key, V value)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> putVal(key, value, <span class=\"literal\">false</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** Implementation for put and putIfAbsent */</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> V <span class=\"title function_\">putVal</span><span class=\"params\">(K key, V value, <span class=\"type\">boolean</span> onlyIfAbsent)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (key == <span class=\"literal\">null</span> || value == <span class=\"literal\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NullPointerException</span>();</span><br><span class=\"line\">    <span class=\"comment\">// 计算key的hash值</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">hash</span> <span class=\"operator\">=</span> spread(key.hashCode());</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">binCount</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Node&lt;K,V&gt;[] tab = table;;) &#123;</span><br><span class=\"line\">        Node&lt;K,V&gt; f; <span class=\"type\">int</span> n, i, fh;</span><br><span class=\"line\">        <span class=\"comment\">// 如果table是空，初始化之</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tab == <span class=\"literal\">null</span> || (n = tab.length) == <span class=\"number\">0</span>)</span><br><span class=\"line\">            tab = initTable();</span><br><span class=\"line\">        <span class=\"comment\">// 省略...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 省略...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>initTable源码如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Initializes table, using the size recorded in sizeCtl.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Node&lt;K,V&gt;[] initTable() &#123;</span><br><span class=\"line\">    Node&lt;K,V&gt;[] tab; <span class=\"type\">int</span> sc;</span><br><span class=\"line\">    <span class=\"comment\">// #1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> ((tab = table) == <span class=\"literal\">null</span> || tab.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// sizeCtl的默认值是0，所以最先走到这的线程会进入到下面的else if判断中</span></span><br><span class=\"line\">        <span class=\"comment\">// #2</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((sc = sizeCtl) &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            Thread.yield(); <span class=\"comment\">// lost initialization race; just spin</span></span><br><span class=\"line\">        <span class=\"comment\">// 尝试原子性的将指定对象(this)的内存偏移量为SIZECTL的int变量值从sc更新为-1</span></span><br><span class=\"line\">        <span class=\"comment\">// 也就是将成员变量sizeCtl的值改为-1</span></span><br><span class=\"line\">        <span class=\"comment\">// #3</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (U.compareAndSwapInt(<span class=\"built_in\">this</span>, SIZECTL, sc, -<span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 双重检查，原因会在下文分析</span></span><br><span class=\"line\">                <span class=\"comment\">// #4</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((tab = table) == <span class=\"literal\">null</span> || tab.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"type\">int</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> (sc &gt; <span class=\"number\">0</span>) ? sc : DEFAULT_CAPACITY; <span class=\"comment\">// 默认初始容量为16</span></span><br><span class=\"line\">                    <span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class=\"line\">                    Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])<span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>&lt;?,?&gt;[n];</span><br><span class=\"line\">                    <span class=\"comment\">// #5</span></span><br><span class=\"line\">                    table = tab = nt; <span class=\"comment\">// 创建hash表，并赋值给成员变量table</span></span><br><span class=\"line\">                    sc = n - (n &gt;&gt;&gt; <span class=\"number\">2</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// #6</span></span><br><span class=\"line\">                sizeCtl = sc;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tab;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>成员变量sizeCtl在ConcurrentHashMap中的其中一个作用相当于HashMap中的threshold，当hash表中元素个数超过sizeCtl时，触发扩容； 他的另一个作用类似于一个标识，例如，当他等于-1的时候，说明已经有某一线程在执行hash表的初始化了，一个小于-1的值表示某一线程正在对hash表执行resize。</p>\n<p>这个方法首先判断sizeCtl是否小于0，如果小于0，直接将当前线程变为就绪状态的线程。</p>\n<p>当sizeCtl大于等于0时，当前线程会尝试通过CAS的方式将sizeCtl的值修改为-1。修改失败的线程会进入下一轮循环，判断sizeCtl&lt;0了，被yield住；修改成功的线程会继续执行下面的初始化代码。</p>\n<p>在new Node[]之前，要再检查一遍table是否为空，这里做双重检查的原因在于，如果另一个线程执行完#1代码后挂起，此时另一个初始化的线程执行完了#6的代码，此时sizeCtl是一个大于0的值，那么再切回这个线程执行的时候，是有可能重复初始化的。关于这个问题会在下图的并发场景中说明。</p>\n<p>然后初始化hash表，并重新计算sizeCtl的值，最终返回初始化好的hash表。</p>\n<h3 id=\"4-线程安全的put\"><a href=\"#4-线程安全的put\" class=\"headerlink\" title=\"4 .线程安全的put\"></a>4 .线程安全的put</h3><p>put操作可分为以下两类 <em>当前hash表对应当前key的index上没有元素时</em> 当前hash表对应当前key的index上已经存在元素时(hash碰撞)</p>\n<h3 id=\"4-1-hash表上没有元素时\"><a href=\"#4-1-hash表上没有元素时\" class=\"headerlink\" title=\"4.1 hash表上没有元素时\"></a>4.1 hash表上没有元素时</h3><p>对应源码如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((f = tabAt(tab, i = (n - <span class=\"number\">1</span>) &amp; hash)) == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (casTabAt(tab, i, <span class=\"literal\">null</span>,</span><br><span class=\"line\">                 <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>&lt;K,V&gt;(hash, key, value, <span class=\"literal\">null</span>)))</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;                   <span class=\"comment\">// no lock when adding to empty bin</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> &lt;K,V&gt; Node&lt;K,V&gt; <span class=\"title function_\">tabAt</span><span class=\"params\">(Node&lt;K,V&gt;[] tab, <span class=\"type\">int</span> i)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (Node&lt;K,V&gt;)U.getObjectVolatile(tab, ((<span class=\"type\">long</span>)i &lt;&lt; ASHIFT) + ABASE);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> &lt;K,V&gt; <span class=\"type\">boolean</span> <span class=\"title function_\">casTabAt</span><span class=\"params\">(Node&lt;K,V&gt;[] tab, <span class=\"type\">int</span> i,</span></span><br><span class=\"line\"><span class=\"params\">                                    Node&lt;K,V&gt; c, Node&lt;K,V&gt; v)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> U.compareAndSwapObject(tab, ((<span class=\"type\">long</span>)i &lt;&lt; ASHIFT) + ABASE, c, v);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>tabAt方法通过Unsafe.getObjectVolatile()的方式获取数组对应index上的元素，getObjectVolatile作用于对应的内存偏移量上，是具备volatile内存语义的。</p>\n<p>如果获取的是空，尝试用cas的方式在数组的指定index上创建一个新的Node。</p>\n<h3 id=\"4-2-hash碰撞时\"><a href=\"#4-2-hash碰撞时\" class=\"headerlink\" title=\"4.2 hash碰撞时\"></a>4.2 hash碰撞时</h3><p>对应源码如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">V</span> <span class=\"variable\">oldVal</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 锁f是在4.1中通过tabAt方法获取的</span></span><br><span class=\"line\">    <span class=\"comment\">// 也就是说，当发生hash碰撞时，会以链表的头结点作为锁</span></span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span> (f) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 这个检查的原因在于：</span></span><br><span class=\"line\">        <span class=\"comment\">// tab引用的是成员变量table，table在发生了rehash之后，原来index上的Node可能会变</span></span><br><span class=\"line\">        <span class=\"comment\">// 这里就是为了确保在put的过程中，没有收到rehash的影响，指定index上的Node仍然是f</span></span><br><span class=\"line\">        <span class=\"comment\">// 如果不是f，那这个锁就没有意义了</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tabAt(tab, i) == f) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 确保put没有发生在扩容的过程中，fh=-1时表示正在扩容</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (fh &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                binCount = <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (Node&lt;K,V&gt; e = f;; ++binCount) &#123;</span><br><span class=\"line\">                    K ek;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (e.hash == hash &amp;&amp;</span><br><span class=\"line\">                        ((ek = e.key) == key ||</span><br><span class=\"line\">                         (ek != <span class=\"literal\">null</span> &amp;&amp; key.equals(ek)))) &#123;</span><br><span class=\"line\">                        oldVal = e.val;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (!onlyIfAbsent)</span><br><span class=\"line\">                            e.val = value;</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    Node&lt;K,V&gt; pred = e;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> ((e = e.next) == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// 在链表后面追加元素</span></span><br><span class=\"line\">                        pred.next = <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>&lt;K,V&gt;(hash, key,</span><br><span class=\"line\">                                                  value, <span class=\"literal\">null</span>);</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (f <span class=\"keyword\">instanceof</span> TreeBin) &#123;</span><br><span class=\"line\">                Node&lt;K,V&gt; p;</span><br><span class=\"line\">                binCount = <span class=\"number\">2</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((p = ((TreeBin&lt;K,V&gt;)f).putTreeVal(hash, key,</span><br><span class=\"line\">                                               value)) != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    oldVal = p.val;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (!onlyIfAbsent)</span><br><span class=\"line\">                        p.val = value;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (binCount != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果链表长度超过8个，将链表转换为红黑树，与HashMap相同，相对于JDK7来说，优化了查找效率</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (binCount &gt;= TREEIFY_THRESHOLD)</span><br><span class=\"line\">            treeifyBin(tab, i);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (oldVal != <span class=\"literal\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> oldVal;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>不同于JDK7中segment的概念，JDK8中直接用链表的头节点做为锁。 JDK7中，HashMap在多线程并发put的情况下可能会形成环形链表，ConcurrentHashMap通过这个锁的方式，使同一时间只有有一个线程对某一链表执行put，解决了并发问题。</p>\n<h3 id=\"5-线程安全的扩容\"><a href=\"#5-线程安全的扩容\" class=\"headerlink\" title=\"5 线程安全的扩容\"></a>5 线程安全的扩容</h3><p>put方法的最后一步是统计hash表中元素的个数，如果超过sizeCtl的值，触发扩容。</p>\n<p>扩容的代码略长，可大致看一下里面的中文注释，再参考下面的分析。 其实我们主要的目的是弄明白ConcurrentHashMap是如何解决HashMap的并发问题的。 带着这个问题来看源码就好。关于HashMap存在的问题，参考本文一开始说的笔者的另一篇文章即可。</p>\n<p>其实HashMap的并发问题多半是由于put和扩容并发导致的。</p>\n<p>这里我们就来看一下ConcurrentHashMap是如何解决的。</p>\n<p>扩容涉及的代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * The array of bins. Lazily initialized upon first insertion.</span></span><br><span class=\"line\"><span class=\"comment\"> * Size is always a power of two. Accessed directly by iterators.</span></span><br><span class=\"line\"><span class=\"comment\"> * 业务中使用的hash表</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">transient</span> <span class=\"keyword\">volatile</span> Node&lt;K,V&gt;[] table;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * The next table to use; non-null only while resizing.</span></span><br><span class=\"line\"><span class=\"comment\"> * 扩容时才使用的hash表，扩容完成后赋值给table，并将nextTable重置为null。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">transient</span> <span class=\"keyword\">volatile</span> Node&lt;K,V&gt;[] nextTable;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Adds to count, and if table is too small and not already</span></span><br><span class=\"line\"><span class=\"comment\"> * resizing, initiates transfer. If already resizing, helps</span></span><br><span class=\"line\"><span class=\"comment\"> * perform transfer if work is available.  Rechecks occupancy</span></span><br><span class=\"line\"><span class=\"comment\"> * after a transfer to see if another resize is already needed</span></span><br><span class=\"line\"><span class=\"comment\"> * because resizings are lagging additions.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> x the count to add</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> check if &lt;0, don&#x27;t check resize, if &lt;= 1 only check if uncontended</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addCount</span><span class=\"params\">(<span class=\"type\">long</span> x, <span class=\"type\">int</span> check)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ----- 计算键值对的个数 start -----</span></span><br><span class=\"line\">    CounterCell[] as; <span class=\"type\">long</span> b, s;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((as = counterCells) != <span class=\"literal\">null</span> ||</span><br><span class=\"line\">        !U.compareAndSwapLong(<span class=\"built_in\">this</span>, BASECOUNT, b = baseCount, s = b + x)) &#123;</span><br><span class=\"line\">        CounterCell a; <span class=\"type\">long</span> v; <span class=\"type\">int</span> m;</span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">uncontended</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (as == <span class=\"literal\">null</span> || (m = as.length - <span class=\"number\">1</span>) &lt; <span class=\"number\">0</span> ||</span><br><span class=\"line\">            (a = as[ThreadLocalRandom.getProbe() &amp; m]) == <span class=\"literal\">null</span> ||</span><br><span class=\"line\">            !(uncontended =</span><br><span class=\"line\">              U.compareAndSwapLong(a, CELLVALUE, v = a.value, v + x))) &#123;</span><br><span class=\"line\">            fullAddCount(x, uncontended);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (check &lt;= <span class=\"number\">1</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        s = sumCount();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// ----- 计算键值对的个数 end -----</span></span><br><span class=\"line\">    <span class=\"comment\">// ----- 判断是否需要扩容 start -----</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (check &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        Node&lt;K,V&gt;[] tab, nt; <span class=\"type\">int</span> n, sc;</span><br><span class=\"line\">        <span class=\"comment\">// 当上面计算出来的键值对个数超出sizeCtl时，触发扩容，调用核心方法transfer</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (s &gt;= (<span class=\"type\">long</span>)(sc = sizeCtl) &amp;&amp; (tab = table) != <span class=\"literal\">null</span> &amp;&amp;</span><br><span class=\"line\">               (n = tab.length) &lt; MAXIMUM_CAPACITY) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">rs</span> <span class=\"operator\">=</span> resizeStamp(n);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (sc &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((sc &gt;&gt;&gt; RESIZE_STAMP_SHIFT) != rs || sc == rs + <span class=\"number\">1</span> ||</span><br><span class=\"line\">                    sc == rs + MAX_RESIZERS || (nt = nextTable) == <span class=\"literal\">null</span> ||</span><br><span class=\"line\">                    transferIndex &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"comment\">// 如果有已经在执行的扩容操作，nextTable是正在扩容中的新的hash表</span></span><br><span class=\"line\">                <span class=\"comment\">// 如果并发扩容，transfer直接使用正在扩容的新hash表，保证了不会出现hash表覆盖的情况</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (U.compareAndSwapInt(<span class=\"built_in\">this</span>, SIZECTL, sc, sc + <span class=\"number\">1</span>))</span><br><span class=\"line\">                    transfer(tab, nt);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 更新sizeCtl的值，更新成功后为负数，扩容开始</span></span><br><span class=\"line\">            <span class=\"comment\">// 此时没有并发扩容的情况，transfer中会new一个新的hash表来扩容</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (U.compareAndSwapInt(<span class=\"built_in\">this</span>, SIZECTL, sc,</span><br><span class=\"line\">                                         (rs &lt;&lt; RESIZE_STAMP_SHIFT) + <span class=\"number\">2</span>))</span><br><span class=\"line\">                transfer(tab, <span class=\"literal\">null</span>);</span><br><span class=\"line\">            s = sumCount();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// ----- 判断是否需要扩容 end -----</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Moves and/or copies the nodes in each bin to new table. See</span></span><br><span class=\"line\"><span class=\"comment\"> * above for explanation.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title function_\">transfer</span><span class=\"params\">(Node&lt;K,V&gt;[] tab, Node&lt;K,V&gt;[] nextTab)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> tab.length, stride;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((stride = (NCPU &gt; <span class=\"number\">1</span>) ? (n &gt;&gt;&gt; <span class=\"number\">3</span>) / NCPU : n) &lt; MIN_TRANSFER_STRIDE)</span><br><span class=\"line\">        stride = MIN_TRANSFER_STRIDE; <span class=\"comment\">// subdivide range</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nextTab == <span class=\"literal\">null</span>) &#123;            <span class=\"comment\">// initiating</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class=\"line\">            <span class=\"comment\">// 初始化新的hash表，大小为之前的2倍，并赋值给成员变量nextTable</span></span><br><span class=\"line\">            Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])<span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>&lt;?,?&gt;[n &lt;&lt; <span class=\"number\">1</span>];</span><br><span class=\"line\">            nextTab = nt;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable ex) &#123;      <span class=\"comment\">// try to cope with OOME</span></span><br><span class=\"line\">            sizeCtl = Integer.MAX_VALUE;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        nextTable = nextTab;</span><br><span class=\"line\">        transferIndex = n;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">nextn</span> <span class=\"operator\">=</span> nextTab.length;</span><br><span class=\"line\">    ForwardingNode&lt;K,V&gt; fwd = <span class=\"keyword\">new</span> <span class=\"title class_\">ForwardingNode</span>&lt;K,V&gt;(nextTab);</span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">advance</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">finishing</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>; <span class=\"comment\">// to ensure sweep before committing nextTab</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>, bound = <span class=\"number\">0</span>;;) &#123;</span><br><span class=\"line\">        Node&lt;K,V&gt; f; <span class=\"type\">int</span> fh;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (advance) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> nextIndex, nextBound;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (--i &gt;= bound || finishing)</span><br><span class=\"line\">                advance = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((nextIndex = transferIndex) &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                i = -<span class=\"number\">1</span>;</span><br><span class=\"line\">                advance = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (U.compareAndSwapInt</span><br><span class=\"line\">                     (<span class=\"built_in\">this</span>, TRANSFERINDEX, nextIndex,</span><br><span class=\"line\">                      nextBound = (nextIndex &gt; stride ?</span><br><span class=\"line\">                                   nextIndex - stride : <span class=\"number\">0</span>))) &#123;</span><br><span class=\"line\">                bound = nextBound;</span><br><span class=\"line\">                i = nextIndex - <span class=\"number\">1</span>;</span><br><span class=\"line\">                advance = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &lt; <span class=\"number\">0</span> || i &gt;= n || i + n &gt;= nextn) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> sc;</span><br><span class=\"line\">            <span class=\"comment\">// 扩容完成时，将成员变量nextTable置为null，并将table替换为rehash后的nextTable</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (finishing) &#123;</span><br><span class=\"line\">                nextTable = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                table = nextTab;</span><br><span class=\"line\">                sizeCtl = (n &lt;&lt; <span class=\"number\">1</span>) - (n &gt;&gt;&gt; <span class=\"number\">1</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (U.compareAndSwapInt(<span class=\"built_in\">this</span>, SIZECTL, sc = sizeCtl, sc - <span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((sc - <span class=\"number\">2</span>) != resizeStamp(n) &lt;&lt; RESIZE_STAMP_SHIFT)</span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                finishing = advance = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                i = n; <span class=\"comment\">// recheck before commit</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((f = tabAt(tab, i)) == <span class=\"literal\">null</span>)</span><br><span class=\"line\">            advance = casTabAt(tab, i, <span class=\"literal\">null</span>, fwd);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((fh = f.hash) == MOVED)</span><br><span class=\"line\">            advance = <span class=\"literal\">true</span>; <span class=\"comment\">// already processed</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 接下来是遍历每个链表，对每个链表的元素进行rehash</span></span><br><span class=\"line\">            <span class=\"comment\">// 仍然用头结点作为锁，所以在扩容的时候，无法对这个链表执行put操作</span></span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (f) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (tabAt(tab, i) == f) &#123;</span><br><span class=\"line\">                    Node&lt;K,V&gt; ln, hn;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (fh &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        <span class=\"type\">int</span> <span class=\"variable\">runBit</span> <span class=\"operator\">=</span> fh &amp; n;</span><br><span class=\"line\">                        Node&lt;K,V&gt; lastRun = f;</span><br><span class=\"line\">                        <span class=\"keyword\">for</span> (Node&lt;K,V&gt; p = f.next; p != <span class=\"literal\">null</span>; p = p.next) &#123;</span><br><span class=\"line\">                            <span class=\"type\">int</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> p.hash &amp; n;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (b != runBit) &#123;</span><br><span class=\"line\">                                runBit = b;</span><br><span class=\"line\">                                lastRun = p;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (runBit == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                            ln = lastRun;</span><br><span class=\"line\">                            hn = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                            hn = lastRun;</span><br><span class=\"line\">                            ln = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">for</span> (Node&lt;K,V&gt; p = f; p != lastRun; p = p.next) &#123;</span><br><span class=\"line\">                            <span class=\"type\">int</span> <span class=\"variable\">ph</span> <span class=\"operator\">=</span> p.hash; <span class=\"type\">K</span> <span class=\"variable\">pk</span> <span class=\"operator\">=</span> p.key; <span class=\"type\">V</span> <span class=\"variable\">pv</span> <span class=\"operator\">=</span> p.val;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> ((ph &amp; n) == <span class=\"number\">0</span>)</span><br><span class=\"line\">                                ln = <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>&lt;K,V&gt;(ph, pk, pv, ln);</span><br><span class=\"line\">                            <span class=\"keyword\">else</span></span><br><span class=\"line\">                                hn = <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>&lt;K,V&gt;(ph, pk, pv, hn);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"comment\">// setTabAt方法调用了Unsafe.putObjectVolatile来完成hash表元素的替换，具备volatile内存语义</span></span><br><span class=\"line\">                        setTabAt(nextTab, i, ln);</span><br><span class=\"line\">                        setTabAt(nextTab, i + n, hn);</span><br><span class=\"line\">                        setTabAt(tab, i, fwd);</span><br><span class=\"line\">                        advance = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (f <span class=\"keyword\">instanceof</span> TreeBin) &#123;</span><br><span class=\"line\">                        TreeBin&lt;K,V&gt; t = (TreeBin&lt;K,V&gt;)f;</span><br><span class=\"line\">                        TreeNode&lt;K,V&gt; lo = <span class=\"literal\">null</span>, loTail = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                        TreeNode&lt;K,V&gt; hi = <span class=\"literal\">null</span>, hiTail = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                        <span class=\"type\">int</span> <span class=\"variable\">lc</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>, hc = <span class=\"number\">0</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">for</span> (Node&lt;K,V&gt; e = t.first; e != <span class=\"literal\">null</span>; e = e.next) &#123;</span><br><span class=\"line\">                            <span class=\"type\">int</span> <span class=\"variable\">h</span> <span class=\"operator\">=</span> e.hash;</span><br><span class=\"line\">                            TreeNode&lt;K,V&gt; p = <span class=\"keyword\">new</span> <span class=\"title class_\">TreeNode</span>&lt;K,V&gt;</span><br><span class=\"line\">                                (h, e.key, e.val, <span class=\"literal\">null</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> ((h &amp; n) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                                <span class=\"keyword\">if</span> ((p.prev = loTail) == <span class=\"literal\">null</span>)</span><br><span class=\"line\">                                    lo = p;</span><br><span class=\"line\">                                <span class=\"keyword\">else</span></span><br><span class=\"line\">                                    loTail.next = p;</span><br><span class=\"line\">                                loTail = p;</span><br><span class=\"line\">                                ++lc;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                                <span class=\"keyword\">if</span> ((p.prev = hiTail) == <span class=\"literal\">null</span>)</span><br><span class=\"line\">                                    hi = p;</span><br><span class=\"line\">                                <span class=\"keyword\">else</span></span><br><span class=\"line\">                                    hiTail.next = p;</span><br><span class=\"line\">                                hiTail = p;</span><br><span class=\"line\">                                ++hc;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        ln = (lc &lt;= UNTREEIFY_THRESHOLD) ? untreeify(lo) :</span><br><span class=\"line\">                            (hc != <span class=\"number\">0</span>) ? <span class=\"keyword\">new</span> <span class=\"title class_\">TreeBin</span>&lt;K,V&gt;(lo) : t;</span><br><span class=\"line\">                        hn = (hc &lt;= UNTREEIFY_THRESHOLD) ? untreeify(hi) :</span><br><span class=\"line\">                            (lc != <span class=\"number\">0</span>) ? <span class=\"keyword\">new</span> <span class=\"title class_\">TreeBin</span>&lt;K,V&gt;(hi) : t;</span><br><span class=\"line\">                        setTabAt(nextTab, i, ln);</span><br><span class=\"line\">                        setTabAt(nextTab, i + n, hn);</span><br><span class=\"line\">                        setTabAt(tab, i, fwd);</span><br><span class=\"line\">                        advance = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>根据上述代码，对ConcurrentHashMap是如何解决HashMap并发问题这一疑问进行简要说明。</p>\n<ul>\n<li>首先new一个新的hash表(nextTable)出来，大小是原来的2倍。后面的rehash都是针对这个新的hash表操作，不涉及原hash表(table)。</li>\n<li>然后会对原hash表(table)中的每个链表进行rehash，此时会尝试获取头节点的锁。这一步就保证了在rehash的过程中不能对这个链表执行put操作。</li>\n<li>通过sizeCtl控制，使扩容过程中不会new出多个新hash表来。</li>\n<li>最后，将所有键值对重新rehash到新表(nextTable)中后，用nextTable将table替换。这就避免了HashMap中get和扩容并发时，可能get到null的问题。</li>\n<li>在整个过程中，共享变量的存储和读取全部通过volatile或CAS的方式，保证了线程安全。</li>\n</ul>\n</blockquote>\n<p>[ ]转载:<a href=\"https://my.oschina.net/muziH/blog/1596801\">HashMap原理及线程不安全详解 - 木子H的个人空间 - OSCHINA - 中文开源技术交流社区</a></p>\n<p>[]参考:<a href=\"https://zhuanlan.zhihu.com/p/84390205\">Java8中ConcurrentHashMap是如何保证线程安全的 - 知乎 (zhihu.com)</a></p>\n","categories":["java知识"],"tags":["Java","面试"]},{"title":"Java 线程和操作系统的线程有啥区别","url":"/2022/09/17/Java%20%E7%BA%BF%E7%A8%8B%E5%92%8C%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%9C%89%E5%95%A5%E5%8C%BA%E5%88%AB/","content":"<h2 id=\"1-用户空间和内核空间\"><a href=\"#1-用户空间和内核空间\" class=\"headerlink\" title=\"1. 用户空间和内核空间\"></a><strong>1. 用户空间和内核空间</strong></h2><blockquote>\n<p>至于什么是系统空间和用户空间也非常好理解：在操作系统中，内存通常会被分成用户空间（User space）与内核空间（Kernel space）这两个部分。当进程/线程运行在用户空间时就处于用户态，运行在内核空间时就处于内核态：</p>\n<ul>\n<li>运行在内核态的程序可以访问用户空间和内核空间，或者说它可以访问计算机的任何资源，不受限制，为所欲为，例如协调 CPU 资源，分配内存资源，提供稳定的环境供应用程序运行等</li>\n<li>而应用程序基本都是运行在用户态的，或者说用户态就是提供应用程序运行的空间。运行在用户态的程序只能访问用户空间</li>\n</ul>\n<p><strong>那为什么要区分用户态和内核态呢</strong>？</p>\n<p>其实早期操作系统是不区分用户态和内核态的，也就是说应用程序可以访问任意内存空间，如果程序不稳定常常会让系统崩溃，比如清除了操作系统的内存数据。为此大佬们设计出了一套规则：对于那些比较危险的操作需要切到内核态才能运行，比如 CPU、内存、设备等资源管理器程序就应该在内核态运行，否则安全性没有保证。</p>\n<p>举个例子，对于文件系统和数据来说，文件系统数据和管理就必须放在内核态，但是用户的数据和管理可以放在用户态。</p>\n<p><strong>用户态的程序不能随意操作内核地址空间，这样有效地防止了操作系统程序受到应用程序的侵害</strong>。</p>\n<p>那如果处于用户态的程序想要访问内核空间的话怎么办呢？就需要进行系统调用从用户态切换到内核态。</p>\n</blockquote>\n<h2 id=\"2-操作系统线程\"><a href=\"#2-操作系统线程\" class=\"headerlink\" title=\"2. 操作系统线程\"></a><strong>2. 操作系统线程</strong></h2><h3 id=\"①-在用户空间中实现线程\"><a href=\"#①-在用户空间中实现线程\" class=\"headerlink\" title=\"① 在用户空间中实现线程\"></a><strong>① 在用户空间中实现线程</strong></h3><p>在<strong>早期</strong>的操作系统中，所有的线程都是在用户空间下实现的，操作系统只能看到线程所属的进程，而不能看到线程。</p>\n<p><img src=\"/2022/09/17/Java%20%E7%BA%BF%E7%A8%8B%E5%92%8C%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%9C%89%E5%95%A5%E5%8C%BA%E5%88%AB/1620.png\" alt=\"img\"></p>\n<p>从我们开发者的角度来理解用户级线程就是说：在这种模型下，我们需要自己定义线程的数据结构、创建、销毁、调度和维护等，这些线程运行在操作系统的某个进程内，然后操作系统直接对进程进行调度。</p>\n<p>这种方式的好处一目了然，首先第一点，就是即使操作系统原生不支持线程，我们也可以通过库函数来支持线程；第二点，线程的调度只发生在用户态，避免了操作系统从内核态到用户态的转换开销。</p>\n<p>当然缺点也很明显：由于操作系统看不见线程，不知道线程的存在，而 CPU 的时间片切换是以进程为维度的，所以如果进程中某个线程进行了耗时比较长的操作，那么由于用户空间中没有时钟中断机制，就会导致此进程中的其它线程因为得不到 CPU 资源而长时间的持续等待；另外，如果某个线程进行系统调用时比如缺页中断而导致了线程阻塞，此时操作系统也会阻塞住整个进程，即使这个进程中其它线程还在工作。</p>\n<h3 id=\"②-在内核空间中实现线程\"><a href=\"#②-在内核空间中实现线程\" class=\"headerlink\" title=\"② 在内核空间中实现线程\"></a><strong>② 在内核空间中实现线程</strong></h3><blockquote>\n<p>所谓内核级线程就是运行在内核空间的线程， 直接由内核负责，只能由内核来完成线程的调度。</p>\n<p>几乎所有的<strong>现代</strong>操作系统，包括 Windows、Linux、Mac OS X 和 Solaris 等，都支持内核线程。</p>\n<p>每个内核线程可以视为内核的一个分身，这样操作系统就有能力同时处理多件事情，<strong>支持多线程的内核就叫做多线程内核</strong>（Multi-Threads Kernel）。</p>\n<p>从我们开发者的角度来理解内核级线程就是说：我们可以直接使用操作系统中已经内置好的线程，线程的创建、销毁、调度和维护等，都是直接由操作系统的内核来实现，我们只需要使用系统调用就好了，不需要像用户级线程那样自己设计线程调度等。</p>\n</blockquote>\n<p><img src=\"/2022/09/17/Java%20%E7%BA%BF%E7%A8%8B%E5%92%8C%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%9C%89%E5%95%A5%E5%8C%BA%E5%88%AB/1620-1663408134188-3.png\" alt=\"img\"></p>\n<p>上图画的是 1：1 的线程模型，所谓线程模型，也就是用户线程和内核线程之间的关联方式，线程模型当然不止 1：1 这一种，下面我们来详细解释以下这三种多线程模型：</p>\n<p>1）<strong>多对一线程模型</strong>：</p>\n<p><img src=\"/2022/09/17/Java%20%E7%BA%BF%E7%A8%8B%E5%92%8C%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%9C%89%E5%95%A5%E5%8C%BA%E5%88%AB/1620-1663408160035-6.png\" alt=\"img\"></p>\n<ul>\n<li>在多对一模型中，多个用户级线程映射到某一个内核线程上</li>\n<li>线程管理由用户空间中的线程库处理，这非常有效</li>\n<li>但是，如果进行了阻塞系统调用，那么即使其他用户线程能够继续，整个进程也会阻塞</li>\n<li>由于单个内核线程只能在单个 CPU 上运行，因此多对一模型不允许在多个 CPU 之间拆分单个进程</li>\n</ul>\n<p>从并发性角度来总结下，虽然多对一模型允许开发人员创建任意多的用户线程，但是由于内核只能一次调度一个线程，所以并未增加并发性。现在已经几乎没有操作系统来使用这个模型了，因为它无法利用多个处理核。</p>\n<p>2）<strong>一对一线程模型</strong>：</p>\n<p><img src=\"/2022/09/17/Java%20%E7%BA%BF%E7%A8%8B%E5%92%8C%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%9C%89%E5%95%A5%E5%8C%BA%E5%88%AB/1620-1663408160035-7.png\" alt=\"img\"></p>\n<ul>\n<li>一对一模型克服了多对一模型的问题</li>\n<li>一对一模型创建一个单独的内核线程来处理每个用户线程</li>\n<li>但是，管理一对一模型的开销更大，涉及更多开销和减慢系统速度</li>\n<li>此模型的大多数实现都限制了可以创建的线程数</li>\n</ul>\n<p>从并发性角度来总结下，虽然一对一模型提供了更大的并发性，但是开发人员应注意不要在应用程序内创建太多线程（有时系统可能会限制创建线程的数量），因为管理一对一模型的开销更大。<strong>Windows (从 Win95 开始) 和 Linux 都实现了线程的一对一模型</strong>。</p>\n<p>3）<strong>多对多线程模型</strong>：</p>\n<p>![img](Java 线程和操作系统的线程有啥区别/1620-1663408160035-8.png)</p>\n<ul>\n<li>多对多模型将任意数量的用户线程复用到相同或更少数量的内核线程上，结合了一对一和多对一模型的最佳特性</li>\n<li>用户对创建的线程数没有限制</li>\n<li>阻止内核系统调用不会阻止整个进程</li>\n<li>进程可以分布在多个处理器上</li>\n<li>可以为各个进程分配可变数量的内核线程，具体取决于存在的 CPU 数量和其他因素</li>\n</ul>\n<h2 id=\"3-Java-线程\"><a href=\"#3-Java-线程\" class=\"headerlink\" title=\"3. Java 线程\"></a><strong>3. Java 线程</strong></h2><blockquote>\n<p>在进入 Java 线程主题之前，有必要讲解一下<strong>线程库</strong> Thread library 的概念。</p>\n<p>在上面的模型介绍中，我们提到了通过线程库来创建、管理线程，那么什么是线程库呢？</p>\n<p><strong>线程库就是为开发人员提供创建和管理线程的一套 API</strong>。</p>\n<p>当然，线程库不仅可以在用户空间中实现，还可以在内核空间中实现。前者涉及仅在用户空间内实现的 API 函数，没有内核支持。后者涉及系统调用，也就是说调用库中的一个 API 函数将会导致对内核的系统调用，并且需要具有线程库支持的内核。</p>\n<p>下面简单介绍下三个主要的线程库：</p>\n<p>1）POSIX Pthreads：可以作为用户或内核库提供，作为 POSIX 标准的扩展</p>\n<p>2）Win32 线程：用于 Window 操作系统的内核级线程库</p>\n<p>3）Java 线程：<strong>Java 线程 API 通常采用宿主系统的线程库来实现</strong>，也就是说在 Win 系统上，Java 线程 API 通常采用 Win API 来实现，在 UNIX 类系统上，采用 Pthread 来实现。</p>\n<p>下面我们来详细讲解 Java 线程：</p>\n<p>事实上，<strong>在 JDK 1.2 之前</strong>，Java 线程是基于称为 “绿色线程”（Green Threads）的用户级线程实现的，也就是说程序员大佬们为 JVM 开发了自己的一套线程库或者说线程管理机制。</p>\n<p>而<strong>在 JDK 1.2 及以后</strong>，JVM 选择了更加稳定且方便使用的操作系统原生的内核级线程，通过系统调用，将线程的调度交给了操作系统内核。而对于不同的操作系统来说，它们本身的设计思路基本上是完全不一样的，因此它们各自对于线程的设计也存在种种差异，所以 JVM 中明确声明了：<strong>虚拟机中的线程状态，不反应任何操作系统中的线程状态</strong>。</p>\n<p>也就是说，在 JDK 1.2 及之后的版本中，Java 的线程很大程度上依赖于操作系统采用什么样的线程模型，这点在不同的平台上没有办法达成一致，JVM 规范中也并未限定 Java 线程需要使用哪种线程模型来实现，可能是一对一，也可能是多对多或多对一。</p>\n<p>总结来说，回答下文题，<strong>现今 Java 中线程的本质，其实就是操作系统中的线程，其线程库和线程模型很大程度上依赖于操作系统（宿主系统）的具体实现，比如在 Windows 中 Java 就是基于 Wind32 线程库来管理线程，且 Windows 采用的是一对一的线程模型</strong>。</p>\n</blockquote>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><h3 id=\"1-java线程是操作系统的线程吗，调度也是依据操作系统调度吗\"><a href=\"#1-java线程是操作系统的线程吗，调度也是依据操作系统调度吗\" class=\"headerlink\" title=\"1.java线程是操作系统的线程吗，调度也是依据操作系统调度吗\"></a>1.java线程是操作系统的线程吗，调度也是依据操作系统调度吗</h3><blockquote>\n<p>现今 Java 中线程的本质，其实就是操作系统中的线程，其线程库和线程模型很大程度上依赖于操作系统（宿主系统）的具体实现</p>\n</blockquote>\n<p>[转载]Java 线程和操作系统的线程有啥区别？ - 腾讯云开发者社区-腾讯云 (tencent.com)](<a href=\"https://cloud.tencent.com/developer/article/1818151\">https://cloud.tencent.com/developer/article/1818151</a>)</p>\n","categories":["面试"],"tags":["Java","面试"]},{"title":"Java面试基础（1）","url":"/2022/06/11/Java%E9%9D%A2%E8%AF%95%E5%9F%BA%E7%A1%80(1)/","content":"<h2 id=\"java基础-1\"><a href=\"#java基础-1\" class=\"headerlink\" title=\"java基础(1)\"></a>java基础(1)</h2><h3 id=\"1-int和interger的区别\"><a href=\"#1-int和interger的区别\" class=\"headerlink\" title=\"1.int和interger的区别\"></a>1.int和interger的区别</h3><blockquote>\n<ul>\n<li><p>Integer是int的包装类；int是基本数据类型；</p>\n</li>\n<li><p>Integer变量必须实例化后才能使用；int变量不需要；</p>\n</li>\n<li><p>Integer实际是对象的引用，指向此new的Integer对象；int是直接存储数据值 ；</p>\n</li>\n<li><p>Integer的默认值是null；int的默认值是0。</p>\n<p>延伸：<br>关于Integer和int的比较<br>1、由于Integer变量实际上是对一个Integer对象的引用，所以两个通过new生成的Integer变量永远是不相等的（因为new生成的是两个对象，其内存地址不同）。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Integer</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Integer</span>(<span class=\"number\">100</span>);</span><br><span class=\"line\"><span class=\"type\">Integer</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Integer</span>(<span class=\"number\">100</span>);</span><br><span class=\"line\">System.out.print(i == j); <span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n\n<p>2、Integer变量和int变量比较时，只要两个变量的值是相等的，则结果为true（因为包装类Integer和基本数据类型int比较时，java会自动拆包装为int，然后进行比较，实际上就变为两个int变量的比较）</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Integer</span> i <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"type\">Integer</span>(<span class=\"number\">100</span>);</span><br><span class=\"line\"><span class=\"type\">int</span> j <span class=\"operator\">=</span> <span class=\"number\">100</span>；</span><br><span class=\"line\">System.out.print(i <span class=\"operator\">=</span><span class=\"operator\">=</span> j); <span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>3、非new生成的Integer变量和new Integer()生成的变量比较时，结果为false。（因为 ①当变量值在-128到127之间时，非new生成的Integer变量指向的是java常量池中的对象，而new Integer()生成的变量指向堆中新建的对象，两者在内存中的地址不同；②当变量值不在-128到127之间时，非new生成Integer变量时，java API中最终会按照new Integer(i)进行处理（参考下面第4条），最终两个Interger的地址同样是不相同的）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Integer</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Integer</span>(<span class=\"number\">100</span>);</span><br><span class=\"line\"><span class=\"type\">Integer</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">100</span>;</span><br><span class=\"line\">System.out.print(i == j); <span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n\n<p>4、对于两个非new生成的Integer对象，进行比较时，如果两个变量的值在区间-128到127之间，则比较结果为true，如果两个变量的值不在此区间，则比较结果为false</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Integer</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"type\">Integer</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">100</span>;</span><br><span class=\"line\">System.out.print(i == j); <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"type\">Integer</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">128</span>;</span><br><span class=\"line\"><span class=\"type\">Integer</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">128</span>;</span><br><span class=\"line\">System.out.print(i == j); <span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n\n<p>对于第4条的原因：<br>java在编译Integer i = 100 ;时，会翻译成为Integer i = Integer.valueOf(100)；，而java API中对Integer类型的valueOf的定义如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Integer <span class=\"title function_\">valueOf</span><span class=\"params\">(<span class=\"type\">int</span> i)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> IntegerCache.high &gt;= <span class=\"number\">127</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Integer</span>(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>java对于-128到127之间的数，会进行缓存，Integer i = 127时，会将127进行缓存，下次再写Integer j = 127时，就会直接从缓存中取，就不会new了</p>\n</li>\n</ul>\n</blockquote>\n<h3 id=\"2-什么时候用list什么时候用数组，linklist和arraylist的区别以及什么时候用link什么时候用array\"><a href=\"#2-什么时候用list什么时候用数组，linklist和arraylist的区别以及什么时候用link什么时候用array\" class=\"headerlink\" title=\"2.什么时候用list什么时候用数组，linklist和arraylist的区别以及什么时候用link什么时候用array\"></a>2.什么时候用list什么时候用数组，linklist和arraylist的区别以及什么时候用link什么时候用array</h3><blockquote>\n<ul>\n<li><p>当数据量固定时或者多维度时，我们可以使用数组，而当我们可以根据需要自动扩充，修改数据时，应该使用list</p>\n<p>linklist和arraylist的区别</p>\n</li>\n<li><p>ArrayList是实现了基于动态数组的数据结构，LinkedList基于链表的数据结构。 </p>\n</li>\n<li><p>对于随机访问get和set，ArrayList优于LinkedList，因为LinkedList要移动指针。</p>\n<p>对于新增和删除操作add和remove，LinkedList比较占优势，因为ArrayList要移动数据。</p>\n</li>\n</ul>\n</blockquote>\n<h3 id=\"3-集合有哪些接口，他们有什么区别\"><a href=\"#3-集合有哪些接口，他们有什么区别\" class=\"headerlink\" title=\"3.集合有哪些接口，他们有什么区别\"></a>3.集合有哪些接口，他们有什么区别</h3><blockquote>\n<p> Collection接口：单列集合，两个子接口<br> ①List接口：有序可重复<br> LinkedList：基于链表实现，每个元素储存本身内存地址还储存下一个元素的地址。（增删快，查找慢）</p>\n<p> ArrayList：基于数组实现，每次增删都要重新创建新的数组，但数组有索引。（增删慢，查找快）</p>\n<p> Vector：基于数组，线程安全相关，效率低。</p>\n<p> ②Set接口：不可重复<br> HashSet: 储存的元素无序，不可重复，底层是哈希表</p>\n<p> LinkedHashSet：储存元素有序，不可重复，底层是哈希表和链表的结合</p>\n<p> TreeSet：可以指定一个顺序，对象存入之后会按照指定的顺序排序。</p>\n<p> 2 . Map接口：双列集合<br> HashMap：非线程安全，高效，支持null</p>\n<p> LinkedHashMap：是HashMap的一个子类，保存了记录的插入顺序</p>\n<p> HashTable：线程安全，低效，不支持null</p>\n<p> TreeMap：能够把他保存的记录根据键排序，默认是键值的升序排序</p>\n</blockquote>\n<h3 id=\"4-重载和重写的区别\"><a href=\"#4-重载和重写的区别\" class=\"headerlink\" title=\"4.重载和重写的区别\"></a>4.重载和重写的区别</h3><blockquote>\n<p>方法重载Overload：</p>\n<p>1、同一个类中</p>\n<p>2、方法名相同，参数列表不同（参数顺序、个数、类型）</p>\n<p>3、方法返回值、访问修饰符任意</p>\n<p>4、与方法的参数名无关</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//重载</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">eat</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;我是干饭人&quot;</span> );</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//    public int eat()&#123;  会报错</span></span><br><span class=\"line\"><span class=\"comment\">//        return 4;</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125;</span></span><br><span class=\"line\"> <span class=\"comment\">//报错原因：参数类型和个数一样,返回值类型不同是不算重载的</span></span><br><span class=\"line\"> <span class=\"comment\">//因为在调用方法的时候,我们还不知道方法的返回值类型,所以编译器无法区分你调用的是哪个方法。</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">eat</span><span class=\"params\">(String name)</span>&#123;</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;我是干饭人:&quot;</span>+name );</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">eat</span><span class=\"params\">(String name,<span class=\"type\">int</span> age)</span>&#123;</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;我是干饭人:&quot;</span>+name+<span class=\"string\">&quot;我今年&quot;</span>+age );</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>方法重写Override：</p>\n<p>1、有继承关系的子类中</p>\n<p>2、方法名相同，参数列表相同（参数顺序、个数、类型），方法返回值相同</p>\n<p>3、访问修饰符，访问范围需要大于等于父类的访问范围</p>\n<p>4、与方法的参数名无关</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//重载</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Father</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">walk</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;我是父亲&quot;</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Son</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Father</span> &#123;</span><br><span class=\"line\"> <span class=\"meta\">@Override</span><span class=\"comment\">//方法重写</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">walk</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;我是儿子&quot;</span>);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h3 id=\"5-接口和抽象类的区别\"><a href=\"#5-接口和抽象类的区别\" class=\"headerlink\" title=\"5.接口和抽象类的区别\"></a>5.接口和抽象类的区别</h3><blockquote>\n<p>A:成员的区别<br>抽象类：<br>构造方法：有构造方法，用于子类实例化使用。<br>成员变量：可以是变量，也可以是常量。<br>成员方法：可以是抽象的，也可以是非抽象的。</p>\n<p>接口：<br>构造方法：没有构造方法<br>成员变量：只能是常量。默认修饰符：public static final<br>成员方法：jdk1.7只能是抽象的。默认修饰符：public abstract (推荐：默认修饰符请自己永远手动给出)<br>jdk1.8可以写以default和static开头的具体方法</p>\n<p>B:类和接口的关系区别<br>类与类：<br>继承关系,只能单继承。可以多层继承。</p>\n<p>类与接口：<br>实现关系,可以单实现,也可以多实现。<br>类还可以在继承一个类的同时实现多个接口。</p>\n<p>接口与接口：<br>继承关系,可以单继承,也可以多继承。</p>\n<p>C:体现的理念不同<br>抽象类里面定义的都是一个继承体系中的共性内容。<br>接口是功能的集合,是一个体系额外的功能，是暴露出来的规则。</p>\n</blockquote>\n<h3 id=\"6-字符串转为json用什么接口\"><a href=\"#6-字符串转为json用什么接口\" class=\"headerlink\" title=\"6.字符串转为json用什么接口\"></a>6.字符串转为json用什么接口</h3><blockquote>\n<p>JSONObject jsonObject = JSON.parseObject(tt);</p>\n<p>fastjson</p>\n</blockquote>\n<h3 id=\"7-hashmap和hashset的区别及原理\"><a href=\"#7-hashmap和hashset的区别及原理\" class=\"headerlink\" title=\"7.hashmap和hashset的区别及原理\"></a>7.hashmap和hashset的区别及原理</h3><blockquote>\n<p>HashSet是通过HasMap来实现的，HashMap的输入参数有Key、Value两个组成，在实现HashSet的时候，保持HashMap的Value为常量，相当于在HashMap中只对Key对象进行处理。<br>HashMap的底层是一个数组结构，数组中的每一项对应了一个链表，这种结构称“链表散列”的数据结构，即数组和链表的结合体；也叫散列表、哈希表。</p>\n<p>HahMap存储对象的过程如下<br>①、对HahMap的Key调用hashCode()方法，返回int值，即对应的hashCode；</p>\n<p>②、把此hashCode作为哈希表的索引，查找哈希表的相应位置，若当前位置内容为NULL，则把hashMap的Key、Value包装成Entry数组，放入当前位置；</p>\n<p>③、若当前位置内容不为空，则继续查找当前索引处存放的链表，利用equals方法，找到Key相同的Entry数组，则用当前Value去替换旧的Value；</p>\n<p>④、若未找到与当前Key值相同的对象，则把当前位置的链表后移（Entry数组持有一个指向下一个元素的引用），把新的Entry数组放到链表表头；</p>\n<p>HashSet存储对象的过程<br>往HashSet添加元素的时候，HashSet会先调用元素的hashCode方法得到元素的哈希值 ，</p>\n<p>然后通过元素 的哈希值经过移位等运算，就可以算出该元素在哈希表中 的存储位置。</p>\n<p>情况1： 如果算出元素存储的位置目前没有任何元素存储，那么该元素可以直接存储到该位置上。</p>\n<p>情况2： 如果算出该元素的存储位置目前已经存在有其他的元素了，那么会调用该元素的equals方法与该位置的元素再比较一次</p>\n<p>，如果equals返回的是true，那么该元素与这个位置上的元素就视为重复元素，不允许添加，如果equals方法返回的是false，那么该元素运行添加。</p>\n<p>注意:现在Hashmap不是数组加链表实现，而是数组，链表，红黑树，链表节点数大于8时会从链表结构变成树结构。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;ConcurrentHashMap线程安全，锁部分</span><br><span class=\"line\">Hashtable线程安全，锁全部</span><br><span class=\"line\">上者效率更高</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h3 id=\"8-io有哪些类型\"><a href=\"#8-io有哪些类型\" class=\"headerlink\" title=\"8.io有哪些类型\"></a>8.io有哪些类型</h3><blockquote>\n<p>Java IO方式大体上可以分为三类，基于不同的io模型可以简单分为同步阻塞的BIO,同步非阻塞的NIO和异步非阻塞的AIO.</p>\n<p>BIO：Block IO 同步阻塞式 IO，就是咱们日常使用的传统 IO，它的特色是模式简单使用方便，并发处理能力低。</p>\n<p>NIO：Non IO 同步非阻塞 IO，是传统 IO 的升级，客户端和服务器端经过 Channel(通道)通信，实现了多路复用。</p>\n<p>AIO：Asynchronous IO 是 NIO 的升级，也叫 NIO2，实现了异步非堵塞 IO ，异步 IO 的操做基于事件和回调机制。</p>\n</blockquote>\n<h3 id=\"9-说说对耦合的理解\"><a href=\"#9-说说对耦合的理解\" class=\"headerlink\" title=\"9.说说对耦合的理解\"></a>9.说说对耦合的理解</h3><blockquote>\n<p>耦合就是模块与模块之间的联系程度</p>\n<figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">高内聚，低耦合有什么好处呢？</span><br><span class=\"line\"></span><br><span class=\"line\">事实上，你会发现，短期来看，并没有很明显的好处，甚至会有一些人抱怨，“我这样写不行吗？有舍么问题？” “我写了十几年代码都是这样写的也没见有什么问题。”等等；还有个最重要的，这样甚至在短期内会影响系统的开发进度，因为高内聚，低耦合的系统对开发设计人员提出了更高的要求。高内聚，低耦合的好处体现在系统持续发展的过程中，高内聚，低耦合的系统具有更好的重用性，维护性，扩展性，可以更高效的完成系统的维护开发，持续的支持业务的发展，而不会成为业务发展的障碍。</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">高内聚，低耦合是否意味着内聚越高越好，耦合越低越好？</span><br><span class=\"line\">(内聚性，又称块内联系，指模块的功能强度的度量，即一个模块内部各个元素彼此结合的紧密程度的度量。)</span><br><span class=\"line\">（1）并不是内聚越高越好，耦合越低越好，真正好的设计是在高内聚和低耦合间进行平衡，也就是说高内聚和低耦合是冲突的。</span><br><span class=\"line\"></span><br><span class=\"line\">（2）最强的内聚莫过于一个类只写一个函数，这样内聚性绝对是最高的。但这会带来一个明显的问题：类的数量急剧增多，这样就导致了其它类的耦合特别多，于是整个设计就变成了“高内聚高耦合”了。由于高耦合，整个系统变动同样非常频繁。</span><br><span class=\"line\"></span><br><span class=\"line\">（3）对于耦合来说，最弱的耦合是一个类将所有的函数都包含了，这样类完全不依赖其它类，耦合性是最低的。但这样会带来一个明显的问题：内聚性很低，于是整个设计就变成了“低耦合低内聚”了。由于低内聚，整个类的变动同样非常频繁。</span><br><span class=\"line\"></span><br><span class=\"line\">（4）真正做到高内聚、低耦合是很难的，很多时候未必一定要这样，更多的时候“最适合”的才是最好的，不过、审时度势、融会贯通、人尽其才、物尽其用，才是设计的王道。</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h3 id=\"10-8大基本数据类型\"><a href=\"#10-8大基本数据类型\" class=\"headerlink\" title=\"10.8大基本数据类型\"></a>10.8大基本数据类型</h3><blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">byte</span><br><span class=\"line\"></span><br><span class=\"line\">byte属于Java中的整型，长度为1字节8bit，取值10000000（-128）到 01111111（127），变量初始化默认值为0，包装类Byte</span><br><span class=\"line\"></span><br><span class=\"line\">short</span><br><span class=\"line\"></span><br><span class=\"line\">short属于Java中的整型，长度为2字节16bit，取值10000000 00000000（-32768）到 01111111 11111111（32767），变量初始化默认值为0，包装类Short</span><br><span class=\"line\"></span><br><span class=\"line\">int</span><br><span class=\"line\"></span><br><span class=\"line\">int属于Java中的整型，长度为4字节32bit，取值-2^31 （-2,147,483,648）到 2^31-1（2,147,483,647），变量初始化默认值为0，包装类Integer</span><br><span class=\"line\"></span><br><span class=\"line\">long</span><br><span class=\"line\"></span><br><span class=\"line\">long属于Java中的整型，长度为8字节64bit，取值-2^63 （-9,223,372,036,854,775,808‬）到 2^63-1（9,223,372,036,854,775,8087），变量初始化默认值为0或0L，包装类Long</span><br><span class=\"line\"></span><br><span class=\"line\">float</span><br><span class=\"line\"></span><br><span class=\"line\">float属于Java中的浮点型，也叫单精度浮点型，长度为4字节32bit，变量初始化默认值0.0f，包装类Float</span><br><span class=\"line\"></span><br><span class=\"line\">double</span><br><span class=\"line\"></span><br><span class=\"line\">double属于Java中的浮点型，也叫双精度浮点型，长度为8字节64bit，变量初始化默认值0.0d，包装类Double</span><br><span class=\"line\"></span><br><span class=\"line\">char</span><br><span class=\"line\"></span><br><span class=\"line\">char属于java中的字符型，占2字节16bit，可以赋值单字符以及整型数值, 变量初始化无默认值，包装类Character。</span><br><span class=\"line\"></span><br><span class=\"line\">boolean</span><br><span class=\"line\"></span><br><span class=\"line\">在JVM中并没有提供boolean专用的字节码指令，而boolean类型数据在经过编译后在JVM中会通过int类型来表示，此时boolean数据4字节32位，而boolean数组将会被编码成Java虚拟机的byte数组，此时每个boolean数据1字节占8bit.</span><br><span class=\"line\"></span><br><span class=\"line\">--Java虚拟机规范</span><br><span class=\"line\"></span><br><span class=\"line\">仅有两个值true, false，变量初始化默认值false</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h3 id=\"11-和equal的区别\"><a href=\"#11-和equal的区别\" class=\"headerlink\" title=\"11.==和equal的区别\"></a>11.==和equal的区别</h3><blockquote>\n<p>equal与==</p>\n<p>1.最大的区别是，==是运算符，equal是方法</p>\n<p>简述几种情况下的equal与==</p>\n<p>java基本类型<br>比较包装类型<br>比较String类型<br>比较对象<br>1.java基本类型（short，int，long，byte，char，float，double，boolean）</p>\n<p>比较基本类型，只能用==，不能用equal，这里的==比较的是两个变量的值</p>\n<p>2.比较包装类型</p>\n<p>==比较的是内存地址，因为a和b是new出来的，是两个不同的对象，所以地址肯定是不同的，而equal比较的是值.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">equals</span><span class=\"params\">(Object obj)</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (obj <span class=\"keyword\">instanceof</span> Integer) &#123;</span><br><span class=\"line\">      <span class=\"type\">return</span> <span class=\"variable\">value</span> <span class=\"operator\">=</span>= ((Integer)obj).intValue();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3.比较String类型</p>\n<p>==比较的是内存地址，equal比较的是值</p>\n<p>4.比较对象</p>\n<p>==和equal比较的都是内存地址，因为equal没有被重写，没有被重写的equal都是object的equal方法</p>\n</blockquote>\n<h3 id=\"12-String-与-StringBuffer-和-StringBuilder-的区别\"><a href=\"#12-String-与-StringBuffer-和-StringBuilder-的区别\" class=\"headerlink\" title=\"12.String 与 StringBuffer 和 StringBuilder 的区别\"></a>12.String 与 StringBuffer 和 StringBuilder 的区别</h3><blockquote>\n<ul>\n<li>String 是不可变的，而 StringBuffer 和 StringBuilder 是可变类。</li>\n<li>StringBuffer 是线程安全和同步的，而 StringBuilder 不是。这就是 StringBuilder 比 StringBuffer 快的原因。</li>\n<li>字符串连接运算符 (+) 在内部使用 StringBuilder 类。</li>\n<li>对于非多线程环境中的字符串操作，我们应该使用 StringBuilder 否则使用 StringBuffer 类。</li>\n</ul>\n</blockquote>\n<h3 id=\"13-CopyOnWriteArrayList的底层原理\"><a href=\"#13-CopyOnWriteArrayList的底层原理\" class=\"headerlink\" title=\"13.CopyOnWriteArrayList的底层原理\"></a>13.CopyOnWriteArrayList的底层原理</h3><blockquote>\n<p><strong>CopyOnWriteArrayList容器允许并发读，读操作是无锁的，性能较高。至于写操作，比如向容器中添加一个元素，则首先将当前容器复制一份，然后在新副本上执行写操作，结束之后再将原容器的引用指向新容器。</strong></p>\n<p><strong>优点：</strong></p>\n<p>　　读操作性能很高，因为无需任何同步措施，比较适用于<strong>读多写少</strong>的并发场景。Java的list在遍历时，若中途有别的线程对list容器进行修改，则会抛出<strong>ConcurrentModificationException</strong>异常。而CopyOnWriteArrayList由于其”读写分离”的思想，遍历和修改操作分别作用在不同的list容器，所以在使用迭代器进行遍历时候，也就不会抛出ConcurrentModificationException异常了</p>\n<p><strong>缺点：</strong></p>\n<p>　　缺点也很明显，<strong>一是内存占用问题</strong>，毕竟每次执行写操作都要将原容器拷贝一份，数据量大时，对内存压力较大，可能会引起频繁GC；<strong>二是无法保证实时性</strong>，Vector对于读写操作均加锁同步，可以保证读和写的强一致性。而CopyOnWriteArrayList由于其实现策略的原因，写和读分别作用在新老不同容器上，在写操作执行过程中，读不会阻塞但读取到的却是老容器的数据。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">add</span><span class=\"params\">(E e)</span> &#123;</span><br><span class=\"line\">     <span class=\"comment\">//ReentrantLock加锁，保证线程安全</span></span><br><span class=\"line\">     <span class=\"keyword\">final</span> <span class=\"type\">ReentrantLock</span> <span class=\"variable\">lock</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.lock;</span><br><span class=\"line\">     lock.lock();</span><br><span class=\"line\">     <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">         Object[] elements = getArray();</span><br><span class=\"line\">         <span class=\"type\">int</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span> elements.length;</span><br><span class=\"line\">         <span class=\"comment\">//拷贝原容器，长度为原容器长度加一</span></span><br><span class=\"line\">         Object[] newElements = Arrays.copyOf(elements, len + <span class=\"number\">1</span>);</span><br><span class=\"line\">         <span class=\"comment\">//在新副本上执行添加操作</span></span><br><span class=\"line\">         newElements[len] = e;</span><br><span class=\"line\">         <span class=\"comment\">//将原容器引用指向新副本</span></span><br><span class=\"line\">         setArray(newElements);</span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">     &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">         <span class=\"comment\">//解锁</span></span><br><span class=\"line\">         lock.unlock();</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n</blockquote>\n<h3 id=\"14-深拷贝和浅拷贝的区别\"><a href=\"#14-深拷贝和浅拷贝的区别\" class=\"headerlink\" title=\"14.深拷贝和浅拷贝的区别\"></a>14.深拷贝和浅拷贝的区别</h3><p>对于基本数据类型，两者都是值传递</p>\n<p>对于引用数据类型，浅拷贝是地址拷贝，而深拷贝是创建一个新的对象，将值复制进去</p>\n","categories":["面试"],"tags":["面试","java基础"]},{"title":"Java面试基础（2）","url":"/2022/07/02/Java%E9%9D%A2%E8%AF%95%E5%9F%BA%E7%A1%80(2)/","content":"<h2 id=\"java基础-2\"><a href=\"#java基础-2\" class=\"headerlink\" title=\"java基础(2)\"></a>java基础(2)</h2><h3 id=\"1-java你用过的jdk版本\"><a href=\"#1-java你用过的jdk版本\" class=\"headerlink\" title=\"1..java你用过的jdk版本\"></a>1..java你用过的jdk版本</h3><blockquote>\n<p>jdk1.8或者jdk11</p>\n<p>关键问:</p>\n<h3 id=\"你知道jdk1-8相较于1-7有什么新特性吗\"><a href=\"#你知道jdk1-8相较于1-7有什么新特性吗\" class=\"headerlink\" title=\"你知道jdk1.8相较于1.7有什么新特性吗\"></a>你知道jdk1.8相较于1.7有什么新特性吗</h3><ul>\n<li>新增<strong>Lambda表达式</strong> ：Lambda允许把函数作为一个方法的参数（函数作为参数传递到方法中）。</li>\n<li>新增<strong>Stream API</strong>:对容器功能加强，可以对容器进行高效操作</li>\n<li>新增<strong>方法引用</strong>:通过方法的名字来指向一个方法，用::</li>\n<li>新增<strong>Optional类</strong>:解决空指针异常</li>\n<li>新增default:接口可以有具体方法</li>\n<li>新增<strong>日期API</strong></li>\n</ul>\n<p>(接下来可能会问Lambda表达式和StreamAPI)</p>\n<h3 id=\"你知道jdk11有什么新特性吗\"><a href=\"#你知道jdk11有什么新特性吗\" class=\"headerlink\" title=\"你知道jdk11有什么新特性吗\"></a>你知道jdk11有什么新特性吗</h3><ul>\n<li>新增本地类型推断:用var直接定义变量，编译器能自动推断类型</li>\n<li>Optianal类增强，可以转换成流使用</li>\n<li>字符类增加一些功能API</li>\n</ul>\n</blockquote>\n<h3 id=\"2-用过final关键字吗？它有什么作用\"><a href=\"#2-用过final关键字吗？它有什么作用\" class=\"headerlink\" title=\"2.用过final关键字吗？它有什么作用\"></a>2.用过final关键字吗？它有什么作用</h3><blockquote>\n<p> final关键字表示不可变，它可以修饰在类、方法、成员变量中。</p>\n<ol>\n<li>如果修饰在类上，则表示该类不允许被继承</li>\n<li>修饰在方法上，表示该方法无法被重写</li>\n<li>修饰在变量上，表示该变量无法被修改，而且JVM会隐性定义为一个常量。(但是可以通过反射去破坏，但是<strong>反射无法修改被final和static同时修饰的变量</strong>)</li>\n</ol>\n<p> 另外，<code>final</code>修饰的关键字，还可以避免因为指令重排序带来的可见性问题，原因是，final遵循两个重排序规则</p>\n<ol>\n<li>构造函数内，对一个 final 变量的写入，与随后把这个被构造对象的引用赋值给一个变量，这两个操作之间不可重排序。</li>\n<li>首次读一个包含 final 变量的对象，与随后首次读这个 final 变量，这两个操作之间不可以重排序。</li>\n</ol>\n</blockquote>\n<h3 id=\"3-反射知道吗-通过反射可以获取到一些什么东西\"><a href=\"#3-反射知道吗-通过反射可以获取到一些什么东西\" class=\"headerlink\" title=\"3.反射知道吗 通过反射可以获取到一些什么东西\"></a>3.反射知道吗 通过反射可以获取到一些什么东西</h3><blockquote>\n<p>反射是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性；这种动态获取的信息以及动态调用对象的方法的功能称为 Java 语言的反射机制。</p>\n<p><strong>① 通过反射获取类中的属性和属性值</strong></p>\n<p><strong>② 通过反射获取反射类中的构造方法</strong></p>\n<p><strong>③ 通过反射获取反射类的父类（超类）和接口</strong></p>\n<p><strong>④通过反射获取反射类的方法</strong></p>\n</blockquote>\n<h3 id=\"4-序列化ID有什么作用？怎么生成的？\"><a href=\"#4-序列化ID有什么作用？怎么生成的？\" class=\"headerlink\" title=\"4.序列化ID有什么作用？怎么生成的？\"></a>4.序列化ID有什么作用？怎么生成的？</h3><blockquote>\n<p>作用:验证版本一致性</p>\n<p>反序列化时，程序会比较磁盘中的序列化版本号ID是否与当前类结构生成的版本号ID一致，如果一致，则反序列化成功</p>\n<p>下图就是反序列化异常情况</p>\n<p><img src=\"/2022/07/02/Java%E9%9D%A2%E8%AF%95%E5%9F%BA%E7%A1%80(2)/image-20220709221426112.png\" alt=\"image-20220709221426112\"></p>\n<p>生成方式：</p>\n<p>首先，相关的类要实现Serializable接口</p>\n<ul>\n<li><p>手动生成</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> <span class=\"variable\">serialVersionUID</span> <span class=\"operator\">=</span> <span class=\"number\">1L</span>;</span><br><span class=\"line\">好处就是即使在原来类上加字段，也不会发生上图的反序列化失败，老版本兼容</span><br></pre></td></tr></table></figure></li>\n<li><p>代码调用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ObjectStreamClass c = ObjectStreamClass.lookup(Student.class);</span><br><span class=\"line\">long serialVersionUID = c.getSerialVersionUID();</span><br></pre></td></tr></table></figure></li>\n<li><p>ide快捷工具</p>\n</li>\n</ul>\n</blockquote>\n<h3 id=\"5-为什么重写-equals-的同时必须重写-hashCode\"><a href=\"#5-为什么重写-equals-的同时必须重写-hashCode\" class=\"headerlink\" title=\"5.为什么重写 equals 的同时必须重写 hashCode\"></a>5.为什么重写 equals 的同时必须重写 hashCode</h3><blockquote>\n<p>程序先进行 hashcode 的比较，如果不同，那没就不必在进行 equals 的比较了，这样就大大减少了 equals 比较的次数，这对比需要比较的数量很大的效率提高是很明显的，一个很好的例子就是在集合中的使用</p>\n<p>hashCode 和 equals 两个方法是用来协同判断两个对象是否相等的，采用这种方式的原因是可以提高程序插入和查询的速度，如果在重写 equals 时，不重写 hashCode，就会导致在某些场景下，例如将两个相等的自定义对象存储在 Set 集合时，就会出现程序执行的异常，为了保证程序的正常执行，所以我们就需要在重写 equals 时，也一并重写 hashCode 方法才行。</p>\n<p>回答:因为程序会先进行hashcode，我们希望Set集合能过滤相同数值的对象，因为涉及对象的值比较，我们重写equals，但我们要保证两个对象 equals 相等，那么hashcode也要相同，所以要重写hashcode，否则还是不能去重。（hashcode不是内存地址，跟内存地址相关）</p>\n</blockquote>\n","categories":["面试"],"tags":["面试","java基础"]},{"title":"Juc面试(1)","url":"/2022/06/11/Juc%E9%9D%A2%E8%AF%95(1)/","content":"<h2 id=\"juc-1\"><a href=\"#juc-1\" class=\"headerlink\" title=\"juc(1)\"></a>juc(1)</h2><h3 id=\"1-了解线程吗，他和进程有什么区别\"><a href=\"#1-了解线程吗，他和进程有什么区别\" class=\"headerlink\" title=\"1.了解线程吗，他和进程有什么区别\"></a>1.了解线程吗，他和进程有什么区别</h3><blockquote>\n<p>线程的基本概念<br>　　线程是进程中执行运算的最小单位，是进程中的一个实体，是被系统独立调度和分派的基本单位，线程基本上自己不拥有系统资源，只拥有一点在运行中必不可少的资源，但它可与同属一个进程的其它线程共享进程所拥有的全部资源。一个线程可以创建和撤消另一个线程，同一进程中的多个线程之间可以并发执行。</p>\n<p>好处 ：</p>\n<p>​        （1）易于调度。</p>\n<p>​        （2）提高并发性。通过线程可方便有效地实现并发性。进程可创建多个线程来执行同一程序的不同部分。</p>\n<p>​        （3）开销少。创建线程比创建进程要快，所需开销很少。</p>\n<p>​        （4）利于充分发挥多处理器的功能。通过创建多线程进程，每个线程在一个处理器上运行，从而实现应用程序的并发性，使每个处理器都得到充分运行</p>\n<p>线程和进程的区别一</p>\n<p>　　简单地讲,任何的一个程序都必须有且有一个以上的进程,而相对于一个进程而言也必须要有且有一个以上的线程。相对于进程而言，对线程进行划分的尺度一般要小很多，这就导致了多线程的一些程序能够出现更高的并发性。</p>\n<p><strong>（线程相比进程划分尺度小，迸发性更高）</strong></p>\n<p>线程和进程的区别二</p>\n<p>　　在执行进程的时候，一般会具有相互独立的多个内存单元。但是多个线程是可以共享内存的，这样运行效率就很大的程度上被提高了。相对于单个的独立进程而言都会有相应程序的运行入口以及一些程序等出口。线程就不一样了，它不能独立的去执行而必须要依附在相应的应用程序里面。这样的话应用程序就可以执行多个线程并进行相应的控制。</p>\n<p><strong>（同一进程的线程共享内存，运行效率高）</strong></p>\n<p>线程和进程的区别三</p>\n<p>　　通过了解逻辑角度我们可以得知，多线程这样的意义是相对于在一个应用程序里面的，能够同时的执行。而操作系统不会认为多个线程就是多个独立应用，因此也就不会使其调度以及管理实现资源的分配。</p>\n<p><strong>(线程没有资源分配</strong>)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">了解的，线程时进程中执行运算的最小单位，是被系统独立调度和分派的基本单位。可以创建线程或者撤销另一个线程，可以迸发执行。</span><br><span class=\"line\">区别：</span><br><span class=\"line\">\t（<span class=\"number\">1</span>）调度：线程作为调度和分配的基本单位，进程作为拥有资源的基本单位</span><br><span class=\"line\"></span><br><span class=\"line\">（<span class=\"number\">2</span>）并发性：不仅进程之间可以并发执行，同一个进程的多个线程之间也可并发执行</span><br><span class=\"line\"></span><br><span class=\"line\">（<span class=\"number\">3</span>）拥有资源：进程是拥有资源的一个独立单位，线程不拥有系统资源，但可以访问隶属于进程的资源.</span><br><span class=\"line\"></span><br><span class=\"line\">（<span class=\"number\">4</span>）系统开销：在创建或撤消进程时，由于系统都要为之分配和回收资源，导致系统的开销明显大于创建或撤消线程时的开销。  </span><br></pre></td></tr></table></figure>\n\n<p><strong>进程和线程的区别是什么？</strong></p>\n<p>进程是执行着的应用程序，而线程是进程内部的一个执行序列。一个进程可以有多个线程。线程又叫做轻量级进程。</p>\n</blockquote>\n<h3 id=\"2-线程和进程的通信方式了解吗\"><a href=\"#2-线程和进程的通信方式了解吗\" class=\"headerlink\" title=\"2.线程和进程的通信方式了解吗\"></a>2.线程和进程的通信方式了解吗</h3><blockquote>\n<p><strong>进程间通信方式</strong><br>进程间通信主要包括<strong>管道、系统IPC（包括消息队列、信号量、信号、共享内存等）、以及套接字socket</strong>。</p>\n<p>　　（1）管道（Pipe）：管道可用于具有亲缘关系进程间的通信，允许一个进程和另一个与它有共同祖先的进程之间进行通信。<br>　　（2）命名管道（named pipe）：命名管道克服了管道没有名字的限制，除具有管道所具有的功能外，它还允许无亲缘关系进程间的通信。<br>　　（3）信号（Signal）：信号是比较复杂的通信方式，用于通知接受进程有某种事件发生，除了用于进程间通信外，进程还可以发送 信号给进程本身。<br>　　（4）消息（Message）队列：消息队列是消息的链接表，包括Posix消息队列system V消息队列。<br>　　（5）共享内存：使得多个进程可以访问同一块内存空间，是最快的可用IPC形式。是针对其他通信机制运行效率较低而设计的。<br>　　（6）内存映射（mapped memory）：内存映射允许任何多个进程间通信，每一个使用该机制的进程通过把一个共享的文件映射到自己的进程地址空间来实现它。<br>　　（7）信号量（semaphore）：主要作为进程间以及同一进程不同线程之间的同步手段。<br>　　（8）套接口（Socket）：更为一般的进程间通信机制，可用于不同机器之间的进程间通信。</p>\n<p><strong>线程间通信的方式</strong></p>\n<p><strong>临界区</strong>：通过多线程的串行化来访问公共资源或一段代码，速度快，适合控制数据访问；<br><strong>互斥量</strong>: Synchronized/Lock：采用互斥对象机制，只有拥有互斥对象的线程才有访问公共资源的权限。因为互斥对象只有一个，所以可以保证公共资源不会被多个线程同时访问<br><strong>信号量</strong>: Semphare：为控制具有有限数量的用户资源而设计的，它允许多个线程在同一时刻去访问同一个资源，但一般需要限制同一时刻访问此资源的最大线程数目。<br><strong>事件</strong>(信号)，Wait/Notify：通过通知操作的方式来保持多线程同步，还可以方便的实现多线程优先级的比较</p>\n</blockquote>\n<h3 id=\"3-线程的创建方式\"><a href=\"#3-线程的创建方式\" class=\"headerlink\" title=\"3.线程的创建方式\"></a>3.线程的创建方式</h3><blockquote>\n<p>四种方式</p>\n<p>（1）通过继承Thread类来创建新的线程。</p>\n<p>（2）通过实现Runnable接口来创建线程。</p>\n<p><strong>Thread和Runnable区别：</strong></p>\n<ul>\n<li>Thread 是类，需要继承，但是一个类只能继承一个类，一旦继承 Thread 之后，无法在继承其他的类。</li>\n<li>Runnable 是接口，一个类可以实现多个接口，所以实现Runnable接口可拓展性更好</li>\n<li>Thread是Runnable接口的实现类</li>\n</ul>\n<p>（3）通过实现Callable接口来创建线程。</p>\n<p><strong>Runnable和Callable的区别</strong></p>\n<ul>\n<li>Runnable没有返回值。</li>\n<li>Callable可以返回值。</li>\n</ul>\n<p>（4）自定义线程池（推荐）,从中获取线程。</p>\n</blockquote>\n<h3 id=\"4-sleep和wait的区别\"><a href=\"#4-sleep和wait的区别\" class=\"headerlink\" title=\"4.sleep和wait的区别\"></a>4.sleep和wait的区别</h3><blockquote>\n<p>(1)限制</p>\n<p>使用 sleep 方法可以让让当前线程休眠，时间一到当前线程继续往下执行，在任何地方都能使用，但需要捕获 InterruptedException 异常。</p>\n<p>而使用 wait 方法则必须放在 synchronized 块里面，同样需要捕获 InterruptedException 异常，并且需要获取对象的锁。而且 wait 还需要额外的方法 notify/ notifyAll 进行唤醒，它们同样需要放在 synchronized 块里面，且获取对象的锁。</p>\n<p>(2)使用场景</p>\n<p>sleep 一般用于当前线程休眠，或者轮循暂停操作，wait 则多用于多线程之间的通信。</p>\n<p>(3)类不同</p>\n<p>sleep 是 Thread 类的静态本地方法，wait 则是 Object 类的本地方法。</p>\n<p>(4)释放锁</p>\n<p>wait 可以释放当前线程对 lock 对象锁的持有，而 sleep 则不会。</p>\n<p>(5)线程切换</p>\n<p>sleep 会让出 CPU 执行时间且强制上下文切换，而 wait 则不一定，wait 后可能还是有机会重新竞争到锁继续执行的。</p>\n</blockquote>\n<h3 id=\"5-run和start的区别\"><a href=\"#5-run和start的区别\" class=\"headerlink\" title=\"5.run和start的区别\"></a>5.run和start的区别</h3><blockquote>\n<p>1.线程中的start()方法和run()方法的主要区别在于，当程序调用start()方法，将会创建一个新线程去执行run()方法中的代码。但是如果直接调用run()方法的话，会直接在当前线程中执行run()中的代码，注意，这里不会创建新线程。这样run()就像一个<strong>普通方法</strong>一样。</p>\n<p>2.另外当一个线程启动之后，不能重复调用start()，否则会报IllegalStateException异常。但是可以重复调用run()方法。</p>\n<p>总结起来就是run()就是一个普通的方法，而start()会创建一个新线程去执行run()的代码。</p>\n</blockquote>\n<h3 id=\"6-了解synchronize吗\"><a href=\"#6-了解synchronize吗\" class=\"headerlink\" title=\"6.了解synchronize吗\"></a>6.了解synchronize吗</h3><blockquote>\n<ol>\n<li>修饰实例方法，对于普通同步方法，锁是当前的实例对象</li>\n<li>修饰静态方法，对于静态同步方法，锁是当前的Class对象</li>\n<li>修饰方法代码块，对于同步方法块，锁是synchronized括号里面配置的对象！</li>\n</ol>\n</blockquote>\n<h3 id=\"7-创建线程池的核心参数有哪些？多讲几个\"><a href=\"#7-创建线程池的核心参数有哪些？多讲几个\" class=\"headerlink\" title=\"7.创建线程池的核心参数有哪些？多讲几个?\"></a>7.创建线程池的核心参数有哪些？多讲几个?</h3><blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">ThreadPoolExecutor</span><span class=\"params\">(<span class=\"type\">int</span> corePoolSize,</span></span><br><span class=\"line\"><span class=\"params\">                        <span class=\"type\">int</span> maximumPoolSize,</span></span><br><span class=\"line\"><span class=\"params\">                        <span class=\"type\">long</span> keepAliveTime,</span></span><br><span class=\"line\"><span class=\"params\">                        TimeUnit unit,</span></span><br><span class=\"line\"><span class=\"params\">                        BlockingQueue&lt;Runnable&gt; workQueue,</span></span><br><span class=\"line\"><span class=\"params\">                        ThreadFactory threadFactory,</span></span><br><span class=\"line\"><span class=\"params\">                        RejectedExecutionHandler handler)</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (corePoolSize &lt; <span class=\"number\">0</span> ||</span><br><span class=\"line\">      maximumPoolSize &lt;= <span class=\"number\">0</span> ||</span><br><span class=\"line\">      maximumPoolSize &lt; corePoolSize ||</span><br><span class=\"line\">      keepAliveTime &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (workQueue == <span class=\"literal\">null</span> || threadFactory == <span class=\"literal\">null</span> || handler == <span class=\"literal\">null</span>)</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NullPointerException</span>();</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.acc = System.getSecurityManager() == <span class=\"literal\">null</span> ?</span><br><span class=\"line\">          <span class=\"literal\">null</span> :</span><br><span class=\"line\">          AccessController.getContext();</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.corePoolSize = corePoolSize;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.maximumPoolSize = maximumPoolSize;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.workQueue = workQueue;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.keepAliveTime = unit.toNanos(keepAliveTime);</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.threadFactory = threadFactory;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.handler = handler;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p>corePoolSize：线程池的核心线程数。核心线程会一直存活，即便没有任务需要执行，当线程数小于核心线程数时，即使有线程空闲，线程池也会优先创建新线程处理。设置allowCoreThreadTimeout=true（默认false）时，核心线程会超时关闭。</p>\n</li>\n<li><p>maximumPoolSize：线程池允许的最大线程数。当线程数&gt;=corePoolSize，且任务队列已满时。线程池会创建新线程来处理任务。当线程数=maxPoolSize，且任务队列已满时，线程池会拒绝处理任务而抛出异常。</p>\n</li>\n<li><p>keepAliveTime：线程空闲时间。当线程空闲时间达到keepAliveTime时，线程会退出，直到线程数量=corePoolSize。如果allowCoreThreadTimeout=true，则会直到线程数量=0。</p>\n</li>\n<li><p>unit：keepAliveTime的时间单位。</p>\n</li>\n<li><p>workQueue：当核心线程数达到最大时，新任务会放在队列中排队等待执行。</p>\n</li>\n<li><p>threadFactory：线程工厂，ThreadFactory是一个接口，只有一个方法，即newThread(Runnable r)。从这个方法名字就可以知道，这接口是用来创建新的线程的。其使用也很简单，仅仅只需要实现newThread方法，根据自己的需要进行线程的创建即可。</p>\n</li>\n<li><p>handler：任务拒绝处理器。两种情况会拒绝处理任务：</p>\n<p>1）、当线程数已经达到maxPoolSize，切队列已满，会拒绝新任务；</p>\n<p>2）、当线程池被调用shutdown()后，会等待线程池里的任务执行完毕，再shutdown。如果在调用shutdown()和线程池真正shutdown之间提交任务，会拒绝新任务线程池会调用rejectedExecutionHandler来处理这个任务。如果没有设置默认是AbortPolicy，会抛出异常。拒绝策略有如下几种：</p>\n<ul>\n<li><p>AbortPolicy 丢弃任务，抛运行时异常。</p>\n</li>\n<li><p>CallerRunsPolicy 如果任务被拒绝了，则由调用线程（提交任务的线程）直接执行此任务</p>\n</li>\n<li><p>DiscardPolicy 丢弃任务，不抛出异常</p>\n</li>\n<li><p>DiscardOldestPolicy 从队列中踢出最先进入队列（最后一个执行）的任务，重新提交被拒绝的任务。</p>\n</li>\n</ul>\n</li>\n</ol>\n</blockquote>\n<h3 id=\"9-说说你对volatile关键字的理解\"><a href=\"#9-说说你对volatile关键字的理解\" class=\"headerlink\" title=\"9.说说你对volatile关键字的理解\"></a>9.说说你对volatile关键字的理解</h3><blockquote>\n<p>被volatile修饰的共享变量，就具有了以下两点特性：</p>\n<p>1 . 保证了不同线程对该变量操作的内存可见性;</p>\n<p>2 . 禁止指令重排序</p>\n<h2 id=\"连环问-1-能不能详细说下什么是内存可见性，什么又是重排序呢？\"><a href=\"#连环问-1-能不能详细说下什么是内存可见性，什么又是重排序呢？\" class=\"headerlink\" title=\"连环问(1)能不能详细说下什么是内存可见性，什么又是重排序呢？\"></a>连环问(1)能不能详细说下什么是内存可见性，什么又是重排序呢？</h2><blockquote>\n<p><strong>内存可见性是指当一个线程修改了某个变量的值，其它线程总是能知道这个变量变化。 也就是说，如果线程 A 修改了共享变量 V 的值，那么线程 B 在使用 V 的值时，能立即读到 V 的最新值。</strong></p>\n<p><strong>重排序是指编译器和处理器为了优化程序性能而对指令序列进行重新排序的一种手段。</strong></p>\n</blockquote>\n</blockquote>\n<h3 id=\"10-说一下公平锁和非公平锁区别\"><a href=\"#10-说一下公平锁和非公平锁区别\" class=\"headerlink\" title=\"10.说一下公平锁和非公平锁区别\"></a>10.说一下公平锁和非公平锁区别</h3><blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">公平锁：多个线程按照申请锁的顺序去获得锁，线程会直接进入队列去排队，永远都是队列的第一位才能得到锁。</span><br><span class=\"line\"></span><br><span class=\"line\">优点：所有的线程都能得到资源，不会饿死在队列中。</span><br><span class=\"line\">缺点：吞吐量会下降很多，队列里面除了第一个线程，其他的线程都会阻塞，cpu唤醒阻塞线程的开销会很大。</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">非公平锁：多个线程去获取锁的时候，会直接去尝试获取，获取不到，再去进入等待队列，如果能获取到，就直接获取到锁。</span><br><span class=\"line\"></span><br><span class=\"line\">优点：可以减少CPU唤醒线程的开销，整体的吞吐效率会高点，CPU也不必取唤醒所有线程，会减少唤起线程的数量。</span><br><span class=\"line\">缺点：你们可能也发现了，这样可能导致队列中间的线程一直获取不到锁或者长时间获取不到锁，导致饿死。</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h3 id=\"11-ReentrantLock的trylock和lock区别\"><a href=\"#11-ReentrantLock的trylock和lock区别\" class=\"headerlink\" title=\"11.ReentrantLock的trylock和lock区别\"></a>11.ReentrantLock的trylock和lock区别</h3><blockquote>\n<p>1: lock拿不到锁会一直等待，并且没有返回值。tryLock是去尝试，<strong>拿不到就返回false，拿到返回true。</strong></p>\n<p>2: tryLock是可以被打断的，被中断的，lock是不可以。</p>\n</blockquote>\n<h3 id=\"12-CountDownLatch和Semaphore的区别和底层原理\"><a href=\"#12-CountDownLatch和Semaphore的区别和底层原理\" class=\"headerlink\" title=\"12.CountDownLatch和Semaphore的区别和底层原理\"></a>12.CountDownLatch和Semaphore的区别和底层原理</h3><blockquote>\n<p>CountDownLatch表示计数器，可以给CountDownLatch设置一个数字，一个线程调用CountDownLatch的await()将会阻塞，其他线程可以调用CountDownLatch的countDown()方法来对CountDownLatch中的数字减一，当数字被减成o后，所有await的线程都将被唤醒.</p>\n<p>对应的底层原理就是，调用await()方法的线程会利用AQS排队，一旦数字被减为O，则会将AQS中排队的线程依次唤醒。</p>\n<p>Semaphore表示信号量，可以设置许可的个数，表示同时允许最多多少个线程使用该信号量，通过acquire()来获取许可，如果没有许可可用则线程阻塞，并通过AQS来排队，可以通过release()方法来释放许可，当某个线程释放了某个许可后，会从AQS中正在排队的第一个线程开始依次唤醒，直到没有空闲许可。</p>\n</blockquote>\n<h3 id=\"13-Sychronized的偏向锁、轻量级锁、重量级锁\"><a href=\"#13-Sychronized的偏向锁、轻量级锁、重量级锁\" class=\"headerlink\" title=\"13.Sychronized的偏向锁、轻量级锁、重量级锁\"></a>13.Sychronized的偏向锁、轻量级锁、重量级锁</h3><blockquote>\n<p>1.<strong>偏向锁</strong>:在锁对象的对象头中记录一下当前获取到该锁的线程ID，该线程下次如果又来获取该锁就可以直接获取到了</p>\n<p>⒉<strong>轻量级锁</strong>:由偏向锁升级而来，当一个线程获取到锁后，此时这把锁是偏向锁，此时如果有第二个线程来竞争锁，偏向锁就会升级为轻量级锁,之所以叫轻量级锁，是为了和重量级锁区分开来，轻量级锁底层是通过自旋来实现的，并不会阻塞线程</p>\n<p>3.如果自旋次数过多仍然没有获取到锁，则会升级为<strong>重量级锁</strong>，重量级锁会导致线程阻塞</p>\n<p>4.<strong>自旋锁</strong>:自旋锁就是线程在获取锁的过程中，不会去阻塞线程，也就无所谓唤醒线程。阻塞和唤醒这两个步骤都是需要操作系统去进行的，比较消耗时间，自旋锁是线程通过CAS获取预期的一个标记，如果没有获取到，则继续循环获取，如果获取到了则表示获取到了锁，这个过程线程一直在运行中，相对而言没有使用太多的操作系统资源，比较轻量。</p>\n</blockquote>\n<h3 id=\"14-Sychronized和ReentrantLock的区别\"><a href=\"#14-Sychronized和ReentrantLock的区别\" class=\"headerlink\" title=\"14.Sychronized和ReentrantLock的区别\"></a>14.Sychronized和ReentrantLock的区别</h3><blockquote>\n<ol>\n<li>sychronized是一个关键字，ReentrantLock是一个类</li>\n<li>sychronized会自动的加锁与释放锁,ReentrantLock需要程序员手动加锁与释放锁</li>\n<li>sychronized的底层是JVM层面的锁，ReentrantLock是APl层面的锁</li>\n<li>sychronized是非公平锁，ReentrantLock可以选择公平锁或非公平锁</li>\n<li>sychronized锁的是对象，锁信息保存在对象头中，ReentrantLock通过代码中int类型的state标识来标识锁的状态</li>\n<li>sychronized底层有一个锁升级的过程</li>\n</ol>\n</blockquote>\n<h3 id=\"15-线程池的底层工作原理\"><a href=\"#15-线程池的底层工作原理\" class=\"headerlink\" title=\"15.线程池的底层工作原理\"></a>15.线程池的底层工作原理</h3><blockquote>\n<p>线程池内部是通过队列+线程实现的，当我们利用线程池执行任务时:</p>\n<p>1.如果此时线程池中的线程数量小于corePoolSize，即使线程池中的线程都处于空闲状态，也要创建新的线程来处理被添加的任务。</p>\n<p>⒉.如果此时线程池中的线程数量等于corePoolSize，但是缓冲队列workQueue未满，那么任务被放入缓冲队列。</p>\n<p>3.如果此时线程池中的线程数量大于等于corePoolSize，缓冲队列workQueue满，并且线程池中的数量小于maximumPoolSize，建新的线程来处理被添加的任务。</p>\n<p>4.如果此时线程池中的线程数量大于corePoolSize，缓冲队列workQueue满，并且线程池中的数量等于maximumPoolSize，那么通过 handler所指定的策略来处理此任务。</p>\n<p>5.当线程池中的线程数量大于corePoolSize时，如果某线程空闲时间超过keepAliveTime，线程将被终止。这样，线程池可以动态的调整池中的线程数</p>\n</blockquote>\n<h3 id=\"16-BIO-NIO-AIO分别是什么\"><a href=\"#16-BIO-NIO-AIO分别是什么\" class=\"headerlink\" title=\"16.BIO,NIO,AIO分别是什么\"></a>16.BIO,NIO,AIO分别是什么</h3><blockquote>\n<p>1.BIO:同步阻塞lO，使用BIO读取数据时，线程会阻塞住，并且需要线程主动去查询是否有数据可读，并且需要处理完一个Socket之后才能处理下一个Socket</p>\n<p>2.NIO:同步非阻塞lO，使用NIO读取数据时，线程不会阻塞，但需要线程主动的去查询是否有IO事件</p>\n<p>3.AlO:也叫做NIO 2.0，异步非阻塞lO，使用AIO读取数据时，线程不会阻塞，并且当有数据可读时会通知给线程，不需要线程主动去查询</p>\n</blockquote>\n","categories":["面试"],"tags":["面试","juc"]},{"title":"Juc面试(2)","url":"/2022/07/02/Juc%E9%9D%A2%E8%AF%95(2)/","content":"<h2 id=\"juc-2\"><a href=\"#juc-2\" class=\"headerlink\" title=\"juc(2)\"></a>juc(2)</h2><h3 id=\"1-线程的生命周期\"><a href=\"#1-线程的生命周期\" class=\"headerlink\" title=\"1.线程的生命周期\"></a>1.线程的生命周期</h3><blockquote>\n<p>线程的生命周期包含5个阶段，包括：新建、就绪、运行、阻塞、销毁。</p>\n<ul>\n<li>新建：就是刚使用new方法，new出来的线程；</li>\n<li>就绪：就是调用的线程的start()方法后，这时候线程处于等待CPU分配资源阶段，谁先抢的CPU资源，谁开始执行;</li>\n<li>运行：当就绪的线程被调度并获得CPU资源时，便进入运行状态，run方法定义了线程的操作和功能;</li>\n<li>阻塞：在运行状态的时候，可能因为某些原因导致运行状态的线程变成了阻塞状态，比如sleep()、wait()之后线程就处于了阻塞状态，这个时候需要其他机制将处于阻塞状态的线程唤醒，比如调用notify或者notifyAll()方法。唤醒的线程不会立刻执行run方法，它们要再次等待CPU分配资源进入运行状态;</li>\n<li>销毁：如果线程正常执行完毕后或线程被提前强制性的终止或出现异常导致结束，那么线程就要被销毁，释放资源;</li>\n</ul>\n<p><img src=\"/2022/07/02/Juc%E9%9D%A2%E8%AF%95(2)/1223046-20190722214114154-276488899.png\" alt=\"img\"></p>\n<hr>\n<p>那么处于Running状态的线程能发生哪些状态转变？</p>\n<ul>\n<li><p>被转换成Terminated状态，比如调用 stop() 方法;</p>\n</li>\n<li><p>被转换成Blocked状态，比如调用了sleep, wait 方法被加入 waitSet 中；</p>\n</li>\n<li><p>被转换成Blocked状态，如进行 IO 阻塞操作，如查询数据库进入阻塞状态；</p>\n</li>\n<li><p>被转换成Blocked状态，比如获取某个锁的释放，而被加入该锁的阻塞队列中；</p>\n</li>\n<li><p>该线程的时间片用完，CPU 再次调度，进入Runnable状态；</p>\n</li>\n<li><p>线程主动调用 yield 方法，让出 CPU 资源，进入Runnable状态</p>\n</li>\n</ul>\n<p>Blocked状态的线程能够发生哪些状态改变？</p>\n<ul>\n<li><p>被转换成Terminated状态，比如调用 stop() 方法，或者是 JVM 意外 Crash;</p>\n</li>\n<li><p>被转换成Runnable状态，阻塞时间结束，比如读取到了数据库的数据后；</p>\n</li>\n<li><p>完成了指定时间的休眠，进入到Runnable状态；</p>\n</li>\n<li><p>正在wait中的线程，被其他线程调用notify/notifyAll方法唤醒，进入到Runnable状态；</p>\n</li>\n<li><p>线程获取到了想要的锁资源，进入Runnable状态；</p>\n</li>\n<li><p>线程在阻塞状态下被打断，如其他线程调用了interrupt方法，进入到Runnable状态；</p>\n</li>\n</ul>\n<p>哪些情况进入终止状态</p>\n<ul>\n<li><p>线程正常运行结束，生命周期结束；</p>\n</li>\n<li><p>线程运行过程中出现意外错误；</p>\n</li>\n<li><p>JVM 异常结束，所有的线程生命周期均被结束。</p>\n</li>\n</ul>\n</blockquote>\n<h3 id=\"2-死锁问题\"><a href=\"#2-死锁问题\" class=\"headerlink\" title=\"2.死锁问题\"></a>2.死锁问题</h3><blockquote>\n<h4 id=\"什么是死锁\"><a href=\"#什么是死锁\" class=\"headerlink\" title=\"什么是死锁\"></a>什么是死锁</h4><p>死锁就是有两个或者多个进程由于竞争资源而造成阻塞的现象，如果无外力作用，这种局面就会一直持续下去</p>\n<h4 id=\"死锁产生的条件\"><a href=\"#死锁产生的条件\" class=\"headerlink\" title=\"死锁产生的条件\"></a>死锁产生的条件</h4><p>死锁产生必须满足四个必要条件：</p>\n<p>1、互斥条件：指在一段时间内某资源只能由一个进程占用。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">只有一副钥匙</span><br></pre></td></tr></table></figure>\n\n<p>2、请求和保持条件：指进程已经保持至少一个资源，但又提出了新的资源请求，且对自己已获得的其它资源保持不放。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">拿着红钥匙的人在没有归还红钥匙的情况下，又索要蓝钥匙</span><br></pre></td></tr></table></figure>\n\n<p>3、不剥夺条件：指进程已获得的资源，在未使用完之前，不能被剥夺，只能在使用完时由自己释放。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">只要人不主动归还钥匙，就可以一直占着钥匙</span><br></pre></td></tr></table></figure>\n\n<p>4、环路等待条件：指在发生死锁时，必然存在一个进程——资源的环形链。即进程集合{P0，P1，P2，···，Pn}中的P0正在等待一个P1占用的资源；P1正在等待P2占用的资源，……，Pn正在等待已被P0占用的资源。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">拿着红钥匙的人在等待蓝钥匙，而拿着蓝钥匙的人又在等待红钥匙</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"如何避免死锁\"><a href=\"#如何避免死锁\" class=\"headerlink\" title=\"如何避免死锁\"></a>如何避免死锁</h4><ul>\n<li><strong>资源一次性分配</strong>：一次性分配所有资源，这样就不会再有请求了：（破坏请求条件）</li>\n<li>每个进程提出申请资源前必须释放已占有的一切资源（破坏保持条件）</li>\n<li><strong>可剥夺资源</strong>：即当某进程获得了部分资源，但得不到其它资源，则释放已占有的资源（破坏不可剥夺条件）</li>\n<li><strong>资源有序分配法</strong>：系统给每类资源赋予一个编号，每一个进程按编号递增的顺序请求资源，释放则相反（破坏环路等待条件）</li>\n</ul>\n<p><strong>编程中的最佳实践：</strong></p>\n<ul>\n<li>使用 Lock 的 tryLock(long timeout, TimeUnit unit)的方法，设置超时时间，超时可以退出防止死锁</li>\n<li>尽量使用并发工具类代替加锁</li>\n<li>尽量降低锁的使用粒度</li>\n<li>尽量减少同步的代码块</li>\n</ul>\n<h4 id=\"死锁检测工具（了解）\"><a href=\"#死锁检测工具（了解）\" class=\"headerlink\" title=\"死锁检测工具（了解）\"></a>死锁检测工具（了解）</h4><p>1、<strong>Jstack命令</strong></p>\n<p>jstack是java虚拟机自带的一种堆栈跟踪工具。jstack用于打印出给定的java进程ID或core file或远程调试服务的Java堆栈信息。 Jstack工具可以用于生成java虚拟机当前时刻的线程快照。线程快照是当前java虚拟机内每一条线程正在执行的方法堆栈的集合，生成线程快照的主要目的是定位线程出现长时间停顿的原因，如线程间死锁、死循环、请求外部资源导致的长时间等待等。 线程出现停顿的时候通过jstack来查看各个线程的调用堆栈，就可以知道没有响应的线程到底在后台做什么事情，或者等待什么资源。</p>\n<p>2、<strong>JConsole工具</strong></p>\n<p>Jconsole是JDK自带的监控工具，在JDK/bin目录下可以找到。它用于连接正在运行的本地或者远程的JVM，对运行在Java应用程序的资源消耗和性能进行监控，并画出大量的图表，提供强大的可视化界面。而且本身占用的服务器内存很小，甚至可以说几乎不消耗。</p>\n</blockquote>\n<h3 id=\"3-单例模式\"><a href=\"#3-单例模式\" class=\"headerlink\" title=\"3.单例模式\"></a>3.单例模式</h3><blockquote>\n<h4 id=\"单例模式含义\"><a href=\"#单例模式含义\" class=\"headerlink\" title=\"单例模式含义\"></a>单例模式含义</h4><p><strong>单例模式是指在内存中只会创建且仅创建一次对象的设计模式。</strong>在程序中<strong>多次使用同一个对象且作用相同</strong>时，为了防止频繁地创建对象使得内存飙升，单例模式可以让程序仅在内存中<strong>创建一个对象</strong>，让所有需要调用的地方都共享这一单例对象。</p>\n<p>单例模式主要解决的问题是一个全局使用的类，不会被频繁的创建和销毁，从而提升代码的整体性能。</p>\n<h4 id=\"如何创建单例模式\"><a href=\"#如何创建单例模式\" class=\"headerlink\" title=\"如何创建单例模式\"></a>如何创建单例模式</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">饿汉式</span><br><span class=\"line\">优点：简单，线程安全</span><br><span class=\"line\">缺点：不管有没有使用都会占据空间</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HungrySingleton</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">HungrySingleton</span> <span class=\"variable\">SINGLETON</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HungrySingleton</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 单例模式有一个特点，不允许外部直接创建对象，私有构造不让外部实例化</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">HungrySingleton</span><span class=\"params\">()</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> HungrySingleton <span class=\"title function_\">getInstance</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> SINGLETON;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">懒汉式</span><br><span class=\"line\">优点: 简单</span><br><span class=\"line\">缺点: 线程不安全，要加锁才能解决</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LazySingleton</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> LazySingleton singleton;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">LazySingleton</span><span class=\"params\">()</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> LazySingleton <span class=\"title function_\">getInstance</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(singleton == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            singleton = <span class=\"keyword\">new</span> <span class=\"title class_\">LazySingleton</span>()</span><br><span class=\"line\">            <span class=\"keyword\">return</span> singleton;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> singleton;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">加锁后的</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> LazySingleton <span class=\"title function_\">getInstance</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (singleton == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (LazySingleton.class) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (singleton == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                singleton = <span class=\"keyword\">new</span> <span class=\"title class_\">LazySingleton</span>()</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">singleton</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> singleton;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">枚举（推荐）</span><br><span class=\"line\">优点：线程安全，防止反射和反序列化</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span>  <span class=\"title class_\">EnumSingleton</span> &#123;</span><br><span class=\"line\">    INSTANCE;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> EnumSingleton <span class=\"title function_\">getInstance</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> INSTANCE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"在单例里面定义一个全局变量或者类变量的，它线程安全的还是线程不安全的\"><a href=\"#在单例里面定义一个全局变量或者类变量的，它线程安全的还是线程不安全的\" class=\"headerlink\" title=\"在单例里面定义一个全局变量或者类变量的，它线程安全的还是线程不安全的\"></a>在单例里面定义一个全局变量或者类变量的，它线程安全的还是线程不安全的</h4><p>结论:有写操作的话都是线程不安全的</p>\n<p><strong>静态变量即类变量</strong>，只初始化一次，位于方法区，为所有对象共享，共享一份内存，一旦静态变量被修改，其他对象均对修改可见，故线程非安全。</p>\n<p><strong>全局变量即实例成员变量</strong>。如果线程只是读取变量的值，而不会改变变量的值，则无论是单例还是非单例都是线程安全的；如果有修改变量值的操作，则单例模式因为只有一个对象实例singleton存在，多线程同时操作时是不安全的，而非单例模式下多线程操作是安全的。</p>\n</blockquote>\n<h3 id=\"4-怎么解决高并发问题\"><a href=\"#4-怎么解决高并发问题\" class=\"headerlink\" title=\"4.怎么解决高并发问题\"></a>4.怎么解决高并发问题</h3><blockquote>\n<p>1.优化代码</p>\n<p>2.设置单独的图片服务器，减少访问请求服务器压力</p>\n<p>3.使用缓存</p>\n<p>4.使用数据库集群</p>\n<p>5.DB优化（索引优化，字段类型恰当）</p>\n<p>6.实现负载均衡</p>\n<p>7.限流</p>\n</blockquote>\n","categories":["面试"],"tags":["面试","juc"]},{"title":"Linux防火墙","url":"/2022/09/05/Linux%E9%98%B2%E7%81%AB%E5%A2%99%E5%BC%80%E5%90%AF/","content":"<h3 id=\"Linux-防火墙开启指定端口\"><a href=\"#Linux-防火墙开启指定端口\" class=\"headerlink\" title=\"Linux 防火墙开启指定端口\"></a>Linux 防火墙开启指定端口</h3><p>通常情况下，CentOS 系统部署完成后，关闭并禁用防火墙。但有些特殊情况需要保持防火墙的启用。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">打开防火墙</span></span><br><span class=\"line\">systemctl start firewalld</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">启用防火墙</span></span><br><span class=\"line\">systemctl enable firewalld</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">查看已经开放的端口</span></span><br><span class=\"line\">firewall-cmd --list-ports</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">开启指定端口</span></span><br><span class=\"line\">firewall-cmd --zone=public --add-port=[端口号]/[协议] --permanent</span><br><span class=\"line\">firewall-cmd --zone=public --add-port=80/tcp --permanent</span><br><span class=\"line\"></span><br><span class=\"line\">--zone=&lt;zone&gt; # 指定 zone</span><br><span class=\"line\">--add-port=&lt;portid&gt;]/&lt;protocol&gt; # 端口id / 协议</span><br><span class=\"line\">--permanent # 永久开启，不添加则重启失效</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">关闭指定端口</span></span><br><span class=\"line\"></span><br><span class=\"line\">firewall-cmd --zone=public –remove-port=[端口号]/[协议] --permanent</span><br><span class=\"line\">firewall-cmd --zone=public –remove-port=80/tcp --permanent</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">重新加载防火墙</span></span><br><span class=\"line\">systemctl reload firewalld</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n","categories":["面试"],"tags":["面试","运维"]},{"title":"Linux面试(1)","url":"/2022/08/18/Linux%E9%9D%A2%E8%AF%95(1)/","content":"<h3 id=\"1-在Linux系统中如何统计某个字符串出现的次数\"><a href=\"#1-在Linux系统中如何统计某个字符串出现的次数\" class=\"headerlink\" title=\"1.在Linux系统中如何统计某个字符串出现的次数\"></a>1.在Linux系统中如何统计某个字符串出现的次数</h3><blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">grep -o targetStr filename | wc -l（单个字符串）</span><br><span class=\"line\">&quot;targetStr&quot;可以不加引号</span><br><span class=\"line\">grep -o targetStr_1\\|targetStr_2\\|targetStr_3…… filename | wc -l</span><br><span class=\"line\">&quot;targetStr_1&quot;这些必须加引号</span><br><span class=\"line\">但是上面的方法是不准确的，因为wc -l只是显示行数，如果一行字符串多次出现，那么结果不准确</span><br></pre></td></tr></table></figure>\n\n\n</blockquote>\n<h3 id=\"2-Linux查看日志的几种命令\"><a href=\"#2-Linux查看日志的几种命令\" class=\"headerlink\" title=\"2.Linux查看日志的几种命令\"></a>2.Linux查看日志的几种命令</h3><blockquote>\n<h3 id=\"1-tail-查看实时变化的日志-比较吃内存\"><a href=\"#1-tail-查看实时变化的日志-比较吃内存\" class=\"headerlink\" title=\"1. tail 查看实时变化的日志(比较吃内存)\"></a>1. tail 查看实时变化的日志(<strong>比较吃内存</strong>)</h3><p>退出tail命令：Ctrl+c</p>\n<table>\n<thead>\n<tr>\n<th>-f</th>\n<th>循坏读取</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-q</td>\n<td>不显示处理信息</td>\n</tr>\n<tr>\n<td>-v</td>\n<td>显示详细的处理信息</td>\n</tr>\n<tr>\n<td>-c</td>\n<td>&lt;数目&gt; 显示的字节数</td>\n</tr>\n<tr>\n<td>-n</td>\n<td>显示行数 （相当于nl命令）</td>\n</tr>\n<tr>\n<td>-pid=PID</td>\n<td>与-f合用,表示在进程ID,PID死掉之后结束.</td>\n</tr>\n<tr>\n<td>-q,-quiet,-slient</td>\n<td>从不输出给出文件名的首部</td>\n</tr>\n<tr>\n<td>-s, –sleep-interval=S</td>\n<td>与-f合用,表示在每次反复的间隔休眠S秒</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>用法</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1. tail -f filename</td>\n<td>默认最后10行,相当于增加参数 -n 10</td>\n</tr>\n<tr>\n<td>2. tail -n 20 filename</td>\n<td>显示filename最后20行</td>\n</tr>\n<tr>\n<td>3. tail -n +5 filename</td>\n<td>从第5行开始显示文件</td>\n</tr>\n</tbody></table>\n<h3 id=\"2-cat命令\"><a href=\"#2-cat命令\" class=\"headerlink\" title=\"2. cat命令\"></a>2. cat命令</h3><p>cat命令搜索关键字附近的日志</p>\n<p>常用用法：</p>\n<p>查看log.log前200行</p>\n<p><code>cat  log.log | head -n 200</code></p>\n<p>查看test.log倒数200行</p>\n<p><code>cat  test.log | tail -n 200</code></p>\n<p>查看test.log中包含http的所有行</p>\n<p><code>cat  test.log | grep &quot;http&quot;</code></p>\n<p>查看test.log中包含http的所有行，并显示前后行</p>\n<p><code>cat -n test.log | grep -C 5 “http”         (匹配字串那行以及前后5行)</code></p>\n<p><code>cat -n test.log | grep -B 5 “http”         (匹配字串那行以及前5行)</code></p>\n<p><code>cat -n test.log | grep -A 5 “http”         (匹配字串那行以及后5行)</code></p>\n<h3 id=\"3-grep命令\"><a href=\"#3-grep命令\" class=\"headerlink\" title=\"3. grep命令\"></a>3. grep命令</h3><p>grep命令，文本搜索命令，可以使用正则表达式搜索文本<br>用法示例：</p>\n<p>查看test.log中包含http的所有行(-i忽略大小写）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">grep -i <span class=\"string\">&quot;http&quot;</span> ./test.log</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-sed命令\"><a href=\"#4-sed命令\" class=\"headerlink\" title=\"4. sed命令\"></a>4. sed命令</h3><p>SED 查看某时间段日志</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sed -n <span class=\"string\">&#x27;/2022-06-02 13:10:30/,/2022-06-02 13:10:40/p&#x27;</span> test.log</span><br></pre></td></tr></table></figure>\n\n<p>某时间端日志输出到指定文件中</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sed -n <span class=\"string\">&#x27;/2022-06-02 13:10:30/,/2022-06-02 13:10:40/p&#x27;</span> test.log &gt; test20220602.log</span><br></pre></td></tr></table></figure>\n\n<p>当然还可以使用vi文本编辑命令，less或者more命令进行查看</p>\n<p>正向查找：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">/关键字 按n键把光标移动到下一个符合条件的地方</span><br></pre></td></tr></table></figure>\n\n<p>反向查找：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">?关键字  按shift+n 键,把光标移动到下一个符合条件的</span><br></pre></td></tr></table></figure>\n\n\n\n<p>日志文件本身还是一个文件，检索命令，编辑命令，查找命令都是可以进行操作的。</p>\n</blockquote>\n","categories":["面试"],"tags":["面试","Linux","指令"]},{"title":"Mybatis面试(1)","url":"/2022/06/12/Mybatis%E9%9D%A2%E8%AF%95(1)/","content":"<h2 id=\"Mybatis-1\"><a href=\"#Mybatis-1\" class=\"headerlink\" title=\"Mybatis(1)\"></a>Mybatis(1)</h2><h3 id=\"1-Mybatis的优缺点\"><a href=\"#1-Mybatis的优缺点\" class=\"headerlink\" title=\"1.Mybatis的优缺点\"></a>1.Mybatis的优缺点</h3><blockquote>\n<p>Mybaits 的优点：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">1.基于 SQL 语句编程，相当灵活，不会对应用程序或者数据库的现有设计造成任 何影响，SQL 写在 XML 里，解除 sql 与程序代码的耦合，便于统一管理；提供 XML 标签，支持编写动态 SQL 语句，并可重用。</span><br><span class=\"line\"></span><br><span class=\"line\">2.与 JDBC 相比，减少了 50%以上的代码量，消除了 JDBC 大量冗余的代码，不 需要手动开关连接；</span><br><span class=\"line\"></span><br><span class=\"line\">3.很好的与各种数据库兼容（因为 MyBatis 使用 JDBC 来连接数据库，所以只要 JDBC 支持的数据库 MyBatis 都支持）。</span><br><span class=\"line\"></span><br><span class=\"line\">4.能够与 Spring 很好的集成；</span><br><span class=\"line\"></span><br><span class=\"line\">5.提供映射标签，支持对象与数据库的 ORM 字段关系映射；提供对象关系映射 标签，支持对象关系组件维护。</span><br></pre></td></tr></table></figure>\n\n<p>MyBatis 框架的缺点：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">1.SQL 语句的编写工作量较大，尤其当字段多、关联表多时，对开发人员编写 SQL 语句的功底有一定要求。</span><br><span class=\"line\"></span><br><span class=\"line\">2.SQL 语句依赖于数据库，导致数据库移植性差，不能随意更换数据库。</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h3 id=\"2-Mybatis中的-和-区别是什么\"><a href=\"#2-Mybatis中的-和-区别是什么\" class=\"headerlink\" title=\"2.Mybatis中的#{}和${}区别是什么\"></a>2.Mybatis中的#{}和${}区别是什么</h3><blockquote>\n<p>1.#{}是预编译处理、是占位符，${}是字符串替换、是拼接符</p>\n<p>2.Mybatis在处理#{}时，会将sql中的#替换为?号，调用PreparedStatement来赋值</p>\n<p>3.Mybatis在处理${}时，就是把$替换成变量的值，调用Statement来赋值</p>\n<p>4.使用#{}可以很大程度上防止SQL注入，提高系统安全性</p>\n<p>5.#号防止sql注入的原理就是对参数及参数中的特殊字符进行了转义，从而达到防止sql注入的效果。</p>\n</blockquote>\n<h3 id=\"3-ORM框架是什么\"><a href=\"#3-ORM框架是什么\" class=\"headerlink\" title=\"3.ORM框架是什么\"></a>3.ORM框架是什么</h3><blockquote>\n<p>对象关系映射（Object—Relational Mapping，简称ORM）</p>\n<p>是一种为了解决面向对象与面向关系数据库存在的互不匹配的现象的技术；简单的说，ORM 是通过使用描述对象和数据库之间映射的元数据，将java 程序中的对象自动持久化到关系数据库中；本质上就是将数据从一种形式转换到另外一种形式。</p>\n<p>常见的比如Hibernate, Mybatis,TopLink等框架</p>\n</blockquote>\n","categories":["面试"],"tags":["面试","Mybatis"]},{"title":"Mysql代码例子","url":"/2022/09/05/Mysql%E4%BB%A3%E7%A0%81%E4%BE%8B%E5%AD%90/","content":"<h2 id=\"建立一个用户允许远程连接，并赋予对应库的权限\"><a href=\"#建立一个用户允许远程连接，并赋予对应库的权限\" class=\"headerlink\" title=\"建立一个用户允许远程连接，并赋予对应库的权限\"></a>建立一个用户允许远程连接，并赋予对应库的权限</h2><blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql -u root -p;#用密码登录mysql数据库</span><br><span class=\"line\">use mysql;#使用对应的数据库</span><br><span class=\"line\">select host,user,password from user;#查看数据库所有用户和密码</span><br><span class=\"line\"></span><br><span class=\"line\">修改host：update user set host = &#x27;%&#x27; where user = &#x27;用户名&#x27;;</span><br><span class=\"line\">刷新数据：flush privileges;</span><br><span class=\"line\">#或者</span><br><span class=\"line\">添加用户：grant all privileges on *.* to 用户名@&#x27;%&#x27; identified by &quot;用户密码&quot;;</span><br><span class=\"line\">刷新数据：flush privileges;</span><br></pre></td></tr></table></figure>\n</blockquote>\n","categories":["面试"],"tags":["面试","SQL"]},{"title":"Mysql的MVCC","url":"/2022/08/30/Mysql%E7%9A%84MVCC/","content":"<h3 id=\"什么是MVCC\"><a href=\"#什么是MVCC\" class=\"headerlink\" title=\"什么是MVCC\"></a>什么是MVCC</h3><blockquote>\n<p><strong><code>MVCC</code><strong>，全称 <code>Multi-Version Concurrency Control</code> ，即多版本并发控制。</strong>mvcc</strong>，它是一种并发控制方法，一般在数据库管理系统中，实现数据库的并发访问，在编程语言中实现事务内存。</p>\n<p><strong>总结：</strong>主要为了提升并发性能</p>\n</blockquote>\n<h3 id=\"为什么需要MVCC\"><a href=\"#为什么需要MVCC\" class=\"headerlink\" title=\"为什么需要MVCC\"></a>为什么需要MVCC</h3><blockquote>\n<p><strong>数据库原生的锁</strong><br>        最原生的锁，锁住一个资源后会禁止其他任何线程访问同一个资源。但是很多应用的一个特点都是读多写少的场景，很多数据的读取次数远大于修改的次数，而读取数据间互相排斥显得不是很必要。</p>\n<p><strong>读写锁的出现</strong><br>        读锁和读锁之间不互斥，而写锁和写锁、读锁都互斥。这样就很大提升了系统的并发能力。之后人们发现并发读还是不够</p>\n<p><strong>mvcc概念出现</strong><br>        能不能让读写之间也不冲突的方法，就是读取数据时通过一种类似快照的方式将数据保存下来，这样读锁就和写锁不冲突了，不同的事务session会看到自己特定版本的数据。当然快照是一种概念模型，不同的数据库可能用不同的方式来实现这种功能</p>\n</blockquote>\n<h3 id=\"MVCC适用于的事务隔离级别\"><a href=\"#MVCC适用于的事务隔离级别\" class=\"headerlink\" title=\"MVCC适用于的事务隔离级别\"></a>MVCC适用于的事务隔离级别</h3><blockquote>\n<p>MVCC只在 READ COMMITTED (读取已提交) 和 REPEATABLE READ (可重复读) 两个隔离级别下工作。其他两个隔离级别够和MVCC不兼容, 因为 READ UNCOMMITTED (读取未提交) 总是读取最新的数据行, 而不是符合当前事务版本的数据行。而 SERIALIZABLE (可串行化) 则会对所有读取的行都加锁。</p>\n</blockquote>\n<h3 id=\"MVCC实现原理✔\"><a href=\"#MVCC实现原理✔\" class=\"headerlink\" title=\"MVCC实现原理✔\"></a>MVCC实现原理✔</h3><blockquote>\n<p><strong>MVCC</strong>的目的就是多版本并发控制，在数据库中的实现，就是为了解决<code>读写冲突</code>，它的实现原理主要是依赖记录中的 <strong><code>3个隐式字段</code><strong>，</strong><code>undo日志</code></strong> ，**<code>Read View</code>** 来实现的。</p>\n<h3 id=\"3个隐式字段\"><a href=\"#3个隐式字段\" class=\"headerlink\" title=\"3个隐式字段\"></a>3个隐式字段</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">`DB_TRX_ID`, `DB_ROLL_PTR`, `DB_ROW_ID</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>列名</th>\n<th>长度（字节）</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>DB_TRX_ID</td>\n<td>6</td>\n<td>插入或更新行的最后一个事务的事务标识符。（删除视为更新，将其标记为已删除）</td>\n</tr>\n<tr>\n<td>DB_ROLL_PTR</td>\n<td>7</td>\n<td>写入回滚段的撤销日志记录（若行已更新，则撤销日志记录包含在更新之前重建行内容所需的信息）</td>\n</tr>\n<tr>\n<td>DB_ROW_ID</td>\n<td>6</td>\n<td>行标识（隐藏单调自增id）</td>\n</tr>\n</tbody></table>\n<p>比如:</p>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>name</th>\n<th>age</th>\n<th>DB_ROW_ID</th>\n<th>DB_TRX_ID</th>\n<th>DB_ROLL_PTR</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>张三</td>\n<td>18</td>\n<td>1</td>\n<td>空</td>\n<td>空</td>\n</tr>\n</tbody></table>\n<p> <code>DB_ROW_ID</code> 是数据库默认为该行记录生成的唯一隐式主键，<code>DB_TRX_ID</code> 是当前操作该记录的事务 ID ,而 <code>DB_ROLL_PTR</code> 是一个回滚指针，用于配合 undo日志，指向上一个旧版本</p>\n<p> <strong>事务A：</strong>对数据进行了修改（将name中的张三改为李四）</p>\n<ul>\n<li>第一步：用<strong>排他锁</strong>锁定这一条记录</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>name</th>\n<th>age</th>\n<th>DB_ROW_ID</th>\n<th>DB_TRX_ID</th>\n<th>DB_ROLL_PTR</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>张三</td>\n<td>18</td>\n<td>1</td>\n<td>空</td>\n<td>空</td>\n</tr>\n</tbody></table>\n<ul>\n<li> 第二步：UNDOLOG会记录日志，作为旧记录，既在 <code>undo log</code> 中有当前行的拷贝副本</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>UNDO_LOG</th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>id</td>\n<td>name</td>\n<td>age</td>\n<td>DB_ROW_ID</td>\n<td>DB_TRX_ID</td>\n<td>DB_ROLL_PTR</td>\n</tr>\n<tr>\n<td>1</td>\n<td>张三</td>\n<td>18</td>\n<td>1</td>\n<td>空</td>\n<td>空</td>\n</tr>\n</tbody></table>\n<ul>\n<li> 第三步：将回滚指针的值copy到UNDOLOG中</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>UNDO_LOG</th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>id</td>\n<td>name</td>\n<td>age</td>\n<td>DB_ROW_ID</td>\n<td>DB_TRX_ID</td>\n<td>DB_ROLL_PTR(这就是存储回滚指针的值)</td>\n</tr>\n<tr>\n<td>1</td>\n<td>张三</td>\n<td>18</td>\n<td>1</td>\n<td>空</td>\n<td>ox29349384</td>\n</tr>\n</tbody></table>\n<ul>\n<li>第四步：修改当前的name值并且修改隐藏字段的事务 ID 为当前<code>事务 1</code>的 ID, 我们默认从 <code>1</code> 开始，之后递增，回滚指针指向拷贝到 <code>undo log</code> 的副本记录，既表示我的上一个版本就是它</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>name</th>\n<th>age</th>\n<th>DB_ROW_ID</th>\n<th>DB_TRX_ID</th>\n<th>DB_ROLL_PTR(这就是存储回滚指针的值)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>李四</td>\n<td>18</td>\n<td>1</td>\n<td>1</td>\n<td>ox29349384</td>\n</tr>\n</tbody></table>\n<p><strong>事务B：</strong>事务A修改但未提交，同时对事务B也对该行数据做了修改</p>\n<p>下表就是事务B做出的改变（改变的是年龄）</p>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>name</th>\n<th>age</th>\n<th>DB_ROW_ID</th>\n<th>DB_TRX_ID</th>\n<th>DB_ROLL_PTR</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>张三</td>\n<td><strong>30</strong></td>\n<td>1</td>\n<td>2</td>\n<td>ox23874982</td>\n</tr>\n</tbody></table>\n<p>  上表的ox23874982指的地址是下表的地址</p>\n<table>\n<thead>\n<tr>\n<th>UNDO_LOG</th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>id</td>\n<td>name</td>\n<td>age</td>\n<td>DB_ROW_ID</td>\n<td>DB_TRX_ID</td>\n<td>DB_ROLL_PTR</td>\n</tr>\n<tr>\n<td>1</td>\n<td>张三</td>\n<td>18</td>\n<td>1</td>\n<td>1</td>\n<td>ox29349384</td>\n</tr>\n</tbody></table>\n<p>上表的ox29349384指的地址是下表的地址</p>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>name</th>\n<th>age</th>\n<th>DB_ROW_ID</th>\n<th>DB_TRX_ID</th>\n<th>DB_ROLL_PTR</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>张三</td>\n<td>18</td>\n<td>1</td>\n<td>空</td>\n<td>空</td>\n</tr>\n</tbody></table>\n<p>所以总结:</p>\n<p>如果有当前事务，最早事务，最晚事务</p>\n<p>最早事务ID&lt;当前事务ID&lt;最晚事务ID</p>\n<ul>\n<li>事务的排他锁形式修改数据</li>\n<li>修改之前先把数据放到undolog，通过回滚指针关联</li>\n<li>失败了从undolog回滚</li>\n</ul>\n</blockquote>\n<h3 id=\"undo日志\"><a href=\"#undo日志\" class=\"headerlink\" title=\"undo日志\"></a>undo日志</h3><blockquote>\n<p>insert undo log<br>代表事务在 insert 新记录时产生的 undo log, 只在事务回滚时需要，并且在事务提交后可以被立即丢弃</p>\n<p>update undo log<br>事务在进行 update 或 delete 时产生的 undo log ; 不仅在事务回滚时需要，在快照读时也需要；所以不能随便删除，只有在快速读或事务回滚不涉及该日志时，对应的日志才会被 purge 线程统一清除<br>在不考虑redo log 的情况下利用undo log工作的简化过程为：</p>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>动作</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>开始事务</td>\n</tr>\n<tr>\n<td>2</td>\n<td>记录数据行数据快照到undolog</td>\n</tr>\n<tr>\n<td>3</td>\n<td>更新数据</td>\n</tr>\n<tr>\n<td>4</td>\n<td>将undolog写到磁盘</td>\n</tr>\n<tr>\n<td>5</td>\n<td>将数据写到磁盘</td>\n</tr>\n<tr>\n<td>6</td>\n<td>提交事务</td>\n</tr>\n</tbody></table>\n<p> 1）为了保证数据的持久性数据要在事务提交之前持久化</p>\n<p> 2）undo log的持久化必须在在数据持久化之前，这样才能保证系统崩溃时，可以用undo log来回滚事务</p>\n</blockquote>\n<h3 id=\"执行流程如下：\"><a href=\"#执行流程如下：\" class=\"headerlink\" title=\"执行流程如下：\"></a><strong>执行流程如下：</strong></h3><blockquote>\n<p>*<em>一、比如一个有个事务插入 persion 表插入了一条新记录，记录如下，<code>name</code> 为 小明 , <code>age</code> 为 10 岁，*</em><code>隐式主键</code>*<em>是 1，*</em><code>事务 ID</code>*<em>和*</em><code>回滚指针</code>*<em>，我们假设为 NULL</em>*</p>\n<p><img src=\"/2022/08/30/Mysql%E7%9A%84MVCC/image-20220830171156856.png\" alt=\"image-20220830171156856\"></p>\n<p><strong>二、 现在来了一个事务 1对该记录的 name 做出了修改，改为 小红</strong></p>\n<ul>\n<li>在<code>事务 1</code>修改该行(记录)数据时，数据库会先对该行加<code>排他锁</code></li>\n</ul>\n<p><img src=\"/2022/08/30/Mysql%E7%9A%84MVCC/image-20220830171325637.png\" alt=\"image-20220830171325637\"></p>\n<ul>\n<li>然后把该行数据拷贝到 <code>undo log</code> 中，作为旧记录，既在 <code>undo log</code> 中有当前行的拷贝副本</li>\n</ul>\n<p>Undo日志</p>\n<p><img src=\"/2022/08/30/Mysql%E7%9A%84MVCC/image-20220830172747995.png\" alt=\"image-20220830172747995\"></p>\n<ul>\n<li><p>拷贝完毕后，修改该行<code>name</code>为小红，并且修改隐藏字段的事务 ID 为当前<code>事务 1</code>的 ID, 我们默认从 <code>1</code> 开始，之后递增，回滚指针指向拷贝到 <code>undo log</code> 的副本记录，既表示我的上一个版本就是它</p>\n<p><img src=\"/2022/08/30/Mysql%E7%9A%84MVCC/image-20220830172826227.png\" alt=\"image-20220830172826227\"></p>\n<p>上个表的回滚指针地址指的是下个表</p>\n<p><img src=\"/2022/08/30/Mysql%E7%9A%84MVCC/image-20220830172852127.png\" alt=\"image-20220830172852127\"></p>\n</li>\n<li><p>事务提交后，释放锁</p>\n</li>\n</ul>\n</blockquote>\n","categories":["面试"],"tags":["Java","面试","Mysql"]},{"title":"Mysql索引相关","url":"/2022/09/14/Mysql%E7%B4%A2%E5%BC%95%E7%9B%B8%E5%85%B3/","content":"<h3 id=\"为什么用-B-树做索引而不用哈希表做索引\"><a href=\"#为什么用-B-树做索引而不用哈希表做索引\" class=\"headerlink\" title=\"为什么用 B+ 树做索引而不用哈希表做索引?\"></a>为什么用 B+ 树做索引而不用哈希表做索引?</h3><blockquote>\n<p>1、哈希表是把索引字段映射成对应的哈希码然后再存放在对应的位置，这样的话，如果我们要进行模糊查找的话，显然哈希表这种结构是不支持的，只能遍历这个表。而B+树则可以通过最左前缀原则快速找到对应的数据。</p>\n<p>2、如果我们要进行范围查找，例如查找ID为100 ~ 400的人，哈希表同样不支持，只能遍历全表。</p>\n<p>3、索引字段通过哈希映射成哈希码，如果很多字段都刚好映射到相同值的哈希码的话，那么形成的索引结构将会是一条很长的<strong>链表</strong>，这样的话，查找的时间就会大大增加。</p>\n</blockquote>\n<h3 id=\"主键索引和非主键索引有什么区别？\"><a href=\"#主键索引和非主键索引有什么区别？\" class=\"headerlink\" title=\"主键索引和非主键索引有什么区别？\"></a>主键索引和非主键索引有什么区别？</h3><blockquote>\n<p>例如对于下面这个表(其实就是上面的表中增加了一个k字段),且ID是主键。</p>\n<p><img src=\"/2022/09/14/Mysql%E7%B4%A2%E5%BC%95%E7%9B%B8%E5%85%B3/640.png\" alt=\"图片\"></p>\n<p>主键索引和非主键索引的示意图如下：</p>\n<p><img src=\"/2022/09/14/Mysql%E7%B4%A2%E5%BC%95%E7%9B%B8%E5%85%B3/640-16631230630081.png\" alt=\"图片\"></p>\n<p>其中R代表一整行的值。</p>\n<p>从图中不难看出，主键索引和非主键索引的区别是：非主键索引的叶子节点存放的是<strong>主键的值</strong>，而主键索引的叶子节点存放的是<strong>整行数据</strong>，其中非主键索引也被称为<strong>二级索引</strong>，而主键索引也被称为<strong>聚簇索引</strong>。</p>\n<p>根据这两种结构我们来进行下查询，看看他们在查询上有什么区别。</p>\n<p>1、如果查询语句是 select * from table where ID = 100,即主键查询的方式，则只需要搜索 ID 这棵 B+树。</p>\n<p>2、如果查询语句是 select * from table where k = 1，即非主键的查询方式，则先搜索k索引树，得到ID=100,再到ID索引树搜索一次，这个过程也被称为回表。</p>\n</blockquote>\n<h3 id=\"为什么建议使用主键自增的索引？\"><a href=\"#为什么建议使用主键自增的索引？\" class=\"headerlink\" title=\"为什么建议使用主键自增的索引？\"></a>为什么建议使用主键自增的索引？</h3><blockquote>\n<p>对于这颗主键索引的树</p>\n<p><img src=\"/2022/09/14/Mysql%E7%B4%A2%E5%BC%95%E7%9B%B8%E5%85%B3/640-16631245106466.png\" alt=\"图片\"></p>\n<p>如果我们插入 ID = 650 的一行数据，那么直接在最右边插入就可以了</p>\n<p><img src=\"/2022/09/14/Mysql%E7%B4%A2%E5%BC%95%E7%9B%B8%E5%85%B3/640-16631245106467.png\" alt=\"图片\"></p>\n<p>但是如果插入的是 ID = 350 的一行数据，由于 B+ 树是有序的，那么需要将下面的叶子节点进行移动，腾出位置来插入 ID = 350 的数据，这样就会比较消耗时间，如果刚好 R4 所在的数据页已经满了，需要进行<strong>页分裂</strong>操作，这样会更加糟糕。</p>\n<p>但是，如果我们的主键是自增的，每次插入的 ID 都会比前面的大，那么我们每次只需要在后面插入就行， 不需要移动位置、分裂等操作，这样可以提高性能。也就是为什么建议使用主键自增的索引。</p>\n</blockquote>\n","categories":["面试"],"tags":["面试","MySQL"]},{"title":"MySQL面试(1)","url":"/2022/06/12/Mysql%E9%9D%A2%E8%AF%95(1)/","content":"<h2 id=\"MySQL-1\"><a href=\"#MySQL-1\" class=\"headerlink\" title=\"MySQL(1)\"></a>MySQL(1)</h2><hr>\n<h3 id=\"1-跟-的区别\"><a href=\"#1-跟-的区别\" class=\"headerlink\" title=\"1.$跟#的区别\"></a>1.$跟#的区别</h3><blockquote>\n<p>#相当于对数据 加上 双引号，$相当于直接显示数据。</p>\n</blockquote>\n<h3 id=\"2-MySQL的事务隔离级别有哪些？默认隔离级别是？\"><a href=\"#2-MySQL的事务隔离级别有哪些？默认隔离级别是？\" class=\"headerlink\" title=\"2.MySQL的事务隔离级别有哪些？默认隔离级别是？\"></a>2.MySQL的事务隔离级别有哪些？默认隔离级别是？</h3><blockquote>\n<p>READ-UNCOMMITTED(读取未提交)： 最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读。</p>\n<p>READ-COMMITTED(读取已提交)： 允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生。</p>\n<p>REPEATABLE-READ(可重复读)： 对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生。(默认)</p>\n<p>SERIALIZABLE(可串行化)： 最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">脏读：一个事务读取另外一个事务还没有提交的数据。</span><br><span class=\"line\"></span><br><span class=\"line\">不可重复读：事务 T1 读到某行；事务 T2 修改或删除这行，提交事务；T1 重新读取发现这行数据已经被修改或删除。</span><br><span class=\"line\"></span><br><span class=\"line\">幻读：事务 T1 读取了 N 行；事务 T2 在事务 T1 读取的条件范围内生成了一行或多行数据；T1 重新读取获得与之前不同集合的行数据。</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h3 id=\"3-explain语句结果各个字段分别表示什么\"><a href=\"#3-explain语句结果各个字段分别表示什么\" class=\"headerlink\" title=\"3.explain语句结果各个字段分别表示什么\"></a>3.explain语句结果各个字段分别表示什么</h3><blockquote>\n<table>\n<thead>\n<tr>\n<th>Column</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>id</td>\n<td>查询序号</td>\n</tr>\n<tr>\n<td>select_type</td>\n<td>查询类型</td>\n</tr>\n<tr>\n<td>table</td>\n<td>表名</td>\n</tr>\n<tr>\n<td>partitions</td>\n<td>匹配的分区</td>\n</tr>\n<tr>\n<td>type</td>\n<td>join类型</td>\n</tr>\n<tr>\n<td>prossible_keys</td>\n<td>可能会选择的索引</td>\n</tr>\n<tr>\n<td>key</td>\n<td>实际选择的索引</td>\n</tr>\n<tr>\n<td>key_len</td>\n<td>索引的长度</td>\n</tr>\n<tr>\n<td>ref</td>\n<td>与索引作比较的列</td>\n</tr>\n<tr>\n<td>rows</td>\n<td>要检索的行数(估算值)</td>\n</tr>\n<tr>\n<td>filtered</td>\n<td>查询条件过滤的行数的百分比</td>\n</tr>\n<tr>\n<td>Extra</td>\n<td>额外信息</td>\n</tr>\n</tbody></table>\n<ul>\n<li><p>id: SQL查询中的序列号。</p>\n</li>\n<li><p>select_type: 查询的类型，可以是下表的任何一种类型：</p>\n<table>\n<thead>\n<tr>\n<th>select_type</th>\n<th>类型说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>SIMPLE</td>\n<td>简单SELECT(不使用UNION或子查询)</td>\n</tr>\n<tr>\n<td>PRIMARY</td>\n<td>最外层的SELECT</td>\n</tr>\n<tr>\n<td>UNION</td>\n<td>UNION中第二个或之后的SELECT语句</td>\n</tr>\n<tr>\n<td>DEPENDENT UNION</td>\n<td>UNION中第二个或之后的SELECT语句取决于外面的查询</td>\n</tr>\n<tr>\n<td>UNION RESULT</td>\n<td>UNION的结果</td>\n</tr>\n<tr>\n<td>SUBQUERY</td>\n<td>子查询中的第一个SELECT</td>\n</tr>\n<tr>\n<td>DEPENDENT SUBQUERY</td>\n<td>子查询中的第一个SELECT, 取决于外面的查询</td>\n</tr>\n<tr>\n<td>DERIVED</td>\n<td>衍生表(FROM子句中的子查询)</td>\n</tr>\n<tr>\n<td>MATERIALIZED</td>\n<td>物化子查询</td>\n</tr>\n<tr>\n<td>UNCACHEABLE SUBQUERY</td>\n<td>结果集无法缓存的子查询，必须重新评估外部查询的每一行</td>\n</tr>\n<tr>\n<td>UNCACHEABLE UNION</td>\n<td>UNION中第二个或之后的SELECT，属于无法缓存的子查询</td>\n</tr>\n</tbody></table>\n</li>\n<li><p><code>table</code> 表名或者表的别名。</p>\n</li>\n<li><p><code>partitions</code> 分区信息，非分区表为null。</p>\n</li>\n<li><p><code>type</code> 访问类型，表示找到所查询数据的方法，也是本文重点介绍的属性。该属性的常见值如下，性能从好到差：</p>\n<ul>\n<li><em>NULL</em>：无需访问表或者索引，比如获取一个索引列的最大值或最小值。</li>\n<li><em>system/const</em>：当查询最多匹配一行时，常出现于where条件是＝的情况。system是const的一种特殊情况，既表本身只有一行数据的情况。</li>\n<li><em>eq_ref</em>：多表关联查询时，根据唯一非空索引进行查询的情况。</li>\n<li><em>ref</em>：多表查询时，根据非唯一非空索引进行查询的情况。</li>\n<li><em>range</em>：在一个索引上进行范围查找。</li>\n<li><em>index</em>：遍历索引树查询，通常发生在查询结果只包含索引字段时。</li>\n<li><em>ALL</em>：全表扫描，没有任何索引可以使用时。这是最差的情况，应该避免。</li>\n</ul>\n</li>\n<li><p><code>possible_keys</code> 表示mysql此次查询中可能使用的索引。</p>\n</li>\n<li><p><code>key</code> 表示mysql实际在此次查询中使用的索引。</p>\n</li>\n<li><p><code>key_len</code> 表示mysql使用的索引的长度。该值越小越好。</p>\n</li>\n<li><p><code>ref</code>如果是使用的常数等值查询，这里会显示const，如果是连接查询，被驱动表的执行计划这里会显示驱动表的关联字段，如果是条件使用了表达式或者函数，或者条件列发生了内部隐式转换，这里可能显示为func</p>\n</li>\n<li><p><code>rows </code>也是一个重要的字段。 这是mysql估算的需要扫描的行数（不是精确值）。这个值非常直观显示 SQL 的效率好坏, 原则上 rows 越少越好.</p>\n</li>\n<li><p>extra（重要）</p>\n<p>explain 中的很多额外的信息会在 Extra 字段显示, 常见的有以下几种内容:</p>\n<ul>\n<li><strong>distinct</strong>：在select部分使用了distinc关键字</li>\n<li><strong>Using filesort</strong>：当 Extra 中有 Using filesort 时, 表示 MySQL 需额外的排序操作, 不能通过索引顺序达到排序效果. 一般有 Using filesort, 都建议优化去掉, 因为这样的查询 CPU 资源消耗大.</li>\n<li><strong>Using index</strong><br>“覆盖索引扫描”, 表示查询在索引树中就可查找所需数据, 不用扫描表数据文件, 往往说明<strong>性能不错</strong></li>\n<li><strong>Using temporary</strong><br>查询有使用临时表, 一般出现于排序, 分组和多表 join 的情况, 查询效率不高, 建议优化.</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h3 id=\"4-什么是覆盖索引？\"><a href=\"#4-什么是覆盖索引？\" class=\"headerlink\" title=\"4.什么是覆盖索引？\"></a>4.什么是覆盖索引？</h3><blockquote>\n<p>覆盖索引（covering index ，或称为索引覆盖）即从非主键索引中就能查到的记录，而不需要查询主键索引中的记录，避免了回表的产生减少了树的搜索次数，显著提升性能。</p>\n</blockquote>\n<h3 id=\"5-最左前缀原则是什么\"><a href=\"#5-最左前缀原则是什么\" class=\"headerlink\" title=\"5.最左前缀原则是什么\"></a>5.最左前缀原则是什么</h3><blockquote>\n<p>当一个SQL想要利用索引是，就一定要提供该索引所对应的字段中最左边的字段，也就是排在最前面的字段，比如针对a,b,c三个字段建立了一个联合索引，那么在写一个sql时就一定要提供a字段的条件，这样才能用到联合索引，这是由于在建立a,b,c三个字段的联合索引时，底层的B+树是按照a,b.c三个字段从左往右去比较大小进行排序的，所以如果想要利用B+树进行快速查找也得符合这个规则</p>\n</blockquote>\n<h3 id=\"6-lnnodb是如何实现事务的\"><a href=\"#6-lnnodb是如何实现事务的\" class=\"headerlink\" title=\"6.lnnodb是如何实现事务的\"></a>6.lnnodb是如何实现事务的</h3><blockquote>\n<p>Innodb通过Buffer Pool，LogBuffer，Redo Log, Undo Log来实现事务，以一个update语句为例:</p>\n<ul>\n<li>Innodb在收到一个update语句后，会先根据条件找到数据所在的页，并将该页缓存在Buffer Pool中</li>\n<li>执行update语句，修改Buffer Pool中的数据，也就是内存中的数据</li>\n<li>针对update语句生成一个RedoLog对象，并存入LogBuffer中</li>\n<li>针对update语句生成undolog日志，用于事务回滚</li>\n<li>如果事务提交，那么则把RedoLog对象进行持久化，后续还有其他机制将Buffer Pool中所修改的数据页持久化到磁盘中6．如果事务回滚，则利用undolog日志进行回滚</li>\n</ul>\n</blockquote>\n<h3 id=\"7-B树和B-树的区别，为什么Mysql使用B-树\"><a href=\"#7-B树和B-树的区别，为什么Mysql使用B-树\" class=\"headerlink\" title=\"7.B树和B+树的区别，为什么Mysql使用B+树\"></a>7.B树和B+树的区别，为什么Mysql使用B+树</h3><blockquote>\n<p>B树的特点:</p>\n<p>1．节点排序<br>2.一个节点了可以存多个元素，多个元素也排序了</p>\n<p>B+树的特点:</p>\n<p>1．拥有B树的特点<br>2．叶子节点之间有指针<br>3．非叶子节点上的元素在叶子节点上都冗余了，也就是叶子节点中存储了所有的元素，并且排好顺序</p>\n<p>Mysql索引使用的是B+树，因为索引是用来加快查询的，而B+树通过对数据进行排序所以是可以提高查询速度的，然后通过一个节点中可以存储多个元素，从而可以使得B+树的高度不会太高，在Mysql中一个Innodb页就是一个B+树节点，一个Innodb页默认16kb，所以一般情况下一颗两层的B+树可以存2000万行左右的数据，然后通过利用B+树叶子节点存储了所有数据并且进行了排序，并且叶子节点之间有指针，可以很好的支持全表扫描，范围查找等SQL语句。</p>\n<p>为什么索引采用B+树</p>\n<p>1.索引用来加快查询速度，B+树对数据排序可以加快查询速度</p>\n<p>2.一个节点存储多个元素，B+树不会很高，一个innodb页是一个节点，两层B+树可以存储200万条数据</p>\n<p>3.B+树叶子节点有指针，可以支持全表扫描，范围查找等SQL语句</p>\n<p><img src=\"/2022/06/12/Mysql%E9%9D%A2%E8%AF%95(1)/webp-16550466299441.webp\" alt=\"img\"></p>\n<p><img src=\"/2022/06/12/Mysql%E9%9D%A2%E8%AF%95(1)/webp-16544345372523-16550466299442.webp\" alt=\"img\"></p>\n</blockquote>\n<h3 id=\"8-Mysql锁有哪些，如何理解\"><a href=\"#8-Mysql锁有哪些，如何理解\" class=\"headerlink\" title=\"8.Mysql锁有哪些，如何理解\"></a>8.Mysql锁有哪些，如何理解</h3><blockquote>\n<p>按锁粒度分类:</p>\n<ul>\n<li>行锁:锁某行数据，锁粒度最小，并发度高</li>\n<li>表锁:锁整张表，锁粒度最大，并发度低</li>\n<li>间隙锁:锁的是一个区间</li>\n</ul>\n<p>还可以分为:</p>\n<ul>\n<li>共享锁:也就是读锁，一个事务给某行数据加了读锁，其他事务也可以读，但是不能写-</li>\n<li>排它锁:也就是写锁，一个事务给某行数据加了写锁，其他事务不能读，也不能写</li>\n</ul>\n<p>还可以分为:</p>\n<ul>\n<li>乐观锁:并不会真正的去锁某行记录，而是通过一个版本号来实现的</li>\n<li>悲观锁:上面所的行锁、表锁等都是悲观锁</li>\n</ul>\n<p>在事务的隔离级别实现中，就需要利用锁来解决幻读</p>\n</blockquote>\n<h3 id=\"9-Mysql慢查询该如何优化\"><a href=\"#9-Mysql慢查询该如何优化\" class=\"headerlink\" title=\"9.Mysql慢查询该如何优化?\"></a>9.Mysql慢查询该如何优化?</h3><blockquote>\n<ul>\n<li>检查是否走了索引，如果没有则优化SQL利用索引</li>\n<li>检查所利用的索引，是否是最优索引</li>\n<li>检查所查字段是否都是必须的，是否查询了过多字段，查出了多余数据</li>\n<li>检查表中数据是否过多，是否应该进行分库分表了</li>\n<li>检查数据库实例所在机器的性能配置，是否太低，是否可以适当增加资源</li>\n</ul>\n</blockquote>\n<h3 id=\"10-mysql有哪些引擎\"><a href=\"#10-mysql有哪些引擎\" class=\"headerlink\" title=\"10.mysql有哪些引擎\"></a>10.mysql有哪些引擎</h3><blockquote>\n<p>所谓的存储引擎是指用于存储、处理和保护数据的核心服务。也就是存储引擎是数据库的底层软件组织。在 MySQL 中可以使用“show engines”来查询数据库的所有存储引擎</p>\n<h2 id=\"InnoDB-存储引擎\"><a href=\"#InnoDB-存储引擎\" class=\"headerlink\" title=\"InnoDB 存储引擎\"></a>InnoDB 存储引擎</h2><p>InnoDB是一种兼顾高可靠性和高性能的通用存储引擎，在 MySQL 5.5 之后，InnoDB是默认的 MySQL 存储引擎。</p>\n<h2 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h2><p>(1) 支持自动增长列AUTO_INCREMENT。自动增长列的值不能为空，且值必须唯一。MySQL中规定自增列必须为主键。<br>(2) 支持外键，保证数据的完整性和正确性。外键所在表为子表，外键所依赖的表为父表。父表中被子表外键关联的字段必须为主键。<br>(3) DML(数据库操作)操作遵循ACID模型，支持事务。<br>(4) 行级锁 ，提高并发访问性能。</p>\n<h2 id=\"MyISAM-存储引擎\"><a href=\"#MyISAM-存储引擎\" class=\"headerlink\" title=\"MyISAM 存储引擎\"></a>MyISAM 存储引擎</h2><p>MyISAM是MySQL早期的默认存储引擎。</p>\n<h2 id=\"特点-1\"><a href=\"#特点-1\" class=\"headerlink\" title=\"特点\"></a>特点</h2><p>(1) 不支持事务，不支持外键<br>(2) 支持表锁，不支持行锁<br>(3) 占用空间小，访问速度快</p>\n<h2 id=\"Memory-存储引擎\"><a href=\"#Memory-存储引擎\" class=\"headerlink\" title=\"Memory 存储引擎\"></a>Memory 存储引擎</h2><p>Memory引擎的表数据时存储在内存中的，由于受到硬件问题、或断电问题的影响，只能将这些表作为临时表或缓存使用。</p>\n<h3 id=\"特点-2\"><a href=\"#特点-2\" class=\"headerlink\" title=\"特点\"></a>特点</h3><p>(1) 内存存放<br>(2) hash索引（默认）</p>\n<p><img src=\"https://img-blog.csdnimg.cn/30d7e7b4350b44448627993e73505bb6.png\" alt=\"在这里插入图片描述\"></p>\n</blockquote>\n<h3 id=\"11-索引的作用\"><a href=\"#11-索引的作用\" class=\"headerlink\" title=\"11.索引的作用\"></a>11.索引的作用</h3><blockquote>\n<p>创建索引可以大大提高系统的性能。</p>\n<ul>\n<li>通过创建唯一性索引，可以保证数据库表中每一行数据的<strong>唯一性</strong>。</li>\n<li>可以大大<strong>加快数据的检索速度</strong>，这也是创建索引的最主要的原因。</li>\n<li>可以<strong>加速表和表之间的连接</strong>，特别是在实现数据的参考完整性方面特别有意义。</li>\n<li>在使用分组和排序子句进行数据检索时，同样可以显著<strong>减少查询中分组和排序的时间</strong>。</li>\n<li>通过使用索引，可以在查询的过程中，使用优化隐藏器，提高系统的性能。</li>\n</ul>\n</blockquote>\n<h3 id=\"12-索引的类型\"><a href=\"#12-索引的类型\" class=\"headerlink\" title=\"12.索引的类型\"></a>12.索引的类型</h3><blockquote>\n<h2 id=\"存储方式区分\"><a href=\"#存储方式区分\" class=\"headerlink\" title=\"存储方式区分\"></a><strong>存储方式区分</strong></h2><h3 id=\"1-B-树索引\"><a href=\"#1-B-树索引\" class=\"headerlink\" title=\"1. B-树索引\"></a><strong>1. B-树索引</strong></h3><p>目前大多数索引都是采用B-树来存储，其包含组件有：</p>\n<ul>\n<li>叶子节点：包含的条目直接指向表里的数据行。叶子节点之间彼此相连，一个叶子节点有一个指向下一个叶子节点的指针。</li>\n<li>分支节点：包含的条目指向索引里其他的分支节点或者叶子节点。</li>\n<li>根节点：一个 B-树索引只有一个根节点，实际上就是位于树的最顶端的分支节点。</li>\n</ul>\n<h3 id=\"2-哈希索引\"><a href=\"#2-哈希索引\" class=\"headerlink\" title=\"2. 哈希索引\"></a><strong>2. 哈希索引</strong></h3><p>哈希索引也称为散列索引或 HASH 索引。MySQL 目前仅有 MEMORY 存储引擎和 HEAP 存储引擎支持这类索引。其中，MEMORY 存储引擎可以支持 B-树索引和 HASH 索引，且将 HASH 当成默认索引。</p>\n<p>哈希索引的最大特点是访问速度快，但也存在下面的一些缺点：</p>\n<ul>\n<li>MySQL 需要读取表中索引列的值来参与散列计算，散列计算是一个比较耗时的操作。也就是说，相对于 B-树索引来说，建立哈希索引会耗费更多的时间。</li>\n<li>不能使用 HASH 索引排序。</li>\n<li>HASH 索引只支持等值比较，如”=” “IN()”或”&lt;=&gt;”。</li>\n<li>HASH 索引不支持键的部分匹配，因为在计算 HASH 值的时候是通过整个索引值来计算的。</li>\n</ul>\n<h2 id=\"逻辑区分\"><a href=\"#逻辑区分\" class=\"headerlink\" title=\"逻辑区分\"></a><strong>逻辑区分</strong></h2><h3 id=\"1-普通索引\"><a href=\"#1-普通索引\" class=\"headerlink\" title=\"1. 普通索引\"></a><strong>1. 普通索引</strong></h3><p>普通索引是 MySQL 中最基本的索引类型，它没有任何限制，唯一任务就是加快系统对数据的访问速度。允许重复值和空值。</p>\n<p>关键字是 <strong>INDEX</strong> 或 <strong>KEY</strong>。</p>\n<h3 id=\"2-唯一索引\"><a href=\"#2-唯一索引\" class=\"headerlink\" title=\"2. 唯一索引\"></a><strong>2. 唯一索引</strong></h3><p>唯一索引列的值必须唯一，允许有空值。如果是组合索引，则列值的组合必须唯一。</p>\n<p>关键字是 <strong>UNIQUE</strong>。</p>\n<h3 id=\"3-主键索引\"><a href=\"#3-主键索引\" class=\"headerlink\" title=\"3. 主键索引\"></a><strong>3. 主键索引</strong></h3><p>主键索引是一种特殊的唯一索引，不允许值重复或者值为空。</p>\n<p>关键字是 <strong>PRIMARY KEY</strong>。</p>\n<h3 id=\"4-空间索引\"><a href=\"#4-空间索引\" class=\"headerlink\" title=\"4. 空间索引\"></a><strong>4. 空间索引</strong></h3><p>空间索引是对空间数据类型的字段建立的索引，不允许空值，只能在存储引擎为 MyISAM 的表中创建。</p>\n<p>关键字是 <strong>SPATIAL</strong>。</p>\n<h3 id=\"5-全文索引\"><a href=\"#5-全文索引\" class=\"headerlink\" title=\"5. 全文索引\"></a><strong>5. 全文索引</strong></h3><p>全文索引主要用来查找文本中的关键字，只能在 CHAR、VARCHAR 或 TEXT 类型的列上创建。只有 MyISAM 存储引擎支持，允许重复值和空值。</p>\n<p>关键字是 <strong>FULLTEXT</strong>。</p>\n<h2 id=\"实际使用区分\"><a href=\"#实际使用区分\" class=\"headerlink\" title=\"实际使用区分\"></a><strong>实际使用区分</strong></h2><h3 id=\"1-单列索引\"><a href=\"#1-单列索引\" class=\"headerlink\" title=\"1. 单列索引\"></a><strong>1. 单列索引</strong></h3><p>单列索引可以是普通索引，也可以是唯一性索引，还可以是全文索引。只要保证该索引只对应一个字段即可。</p>\n<h3 id=\"2-组合索引\"><a href=\"#2-组合索引\" class=\"headerlink\" title=\"2. 组合索引\"></a><strong>2. 组合索引</strong></h3><p>组合索引也称为复合索引或多列索引。相对于单列索引来说，组合索引是将原表的多个列共同组成一个索引。</p>\n<p>查询时，字段顺序需与索引顺序一致；LIKE时，首字符不能是 ‘%’，否则会影响索引使用。</p>\n</blockquote>\n<h3 id=\"13-Mysql事务是什么，介绍一下\"><a href=\"#13-Mysql事务是什么，介绍一下\" class=\"headerlink\" title=\"13.Mysql事务是什么，介绍一下\"></a>13.Mysql事务是什么，介绍一下</h3><blockquote>\n<h3 id=\"事务：\"><a href=\"#事务：\" class=\"headerlink\" title=\"事务：\"></a><strong>事务</strong>：</h3><p>一个最小的不可再分的单元；可以理解为一个事务对应的是一组完整的业务，并且在这个事务中所作的一切操作要么全部成功，要么全部失败，只要有一个操作没成功，整个事务都将回滚到事务开始前。</p>\n<h3 id=\"事务的四大特征：\"><a href=\"#事务的四大特征：\" class=\"headerlink\" title=\"事务的四大特征：\"></a>事务的四大特征：</h3><p><strong>原子性</strong>：每一个事务都是一个不可再分的工作单位，事务中包括的操作要么都做，要么 都不做。</p>\n<p><strong>一致性</strong>：对于数据的操作从一个一致的状态转变成另一个一致转态。</p>\n<p><strong>隔离性</strong>：指一个事务的执行不能被其他事务干扰，即一个事务内部的操作对并发的其他事务是具有隔离的，并发执行的各个事务之间不能互相干扰。</p>\n<p><strong>持久性</strong>：一个事务一旦提交，他对数据库中的数据的改变就应该是永久性的。提交后的其他操作或故障不会对其具有任何影响。</p>\n</blockquote>\n<h3 id=\"14-Mysql主从了解吗，说说过程和原理\"><a href=\"#14-Mysql主从了解吗，说说过程和原理\" class=\"headerlink\" title=\"14.Mysql主从了解吗，说说过程和原理?\"></a>14.Mysql主从了解吗，说说过程和原理?</h3><blockquote>\n<h4 id=\"MySQL-主从复制概念\"><a href=\"#MySQL-主从复制概念\" class=\"headerlink\" title=\"MySQL 主从复制概念\"></a>MySQL 主从复制概念</h4><p>MySQL 主从复制是指数据可以从一个MySQL数据库服务器主节点复制到一个或多个从节点。MySQL 默认采用异步复制方式，这样从节点不用一直访问主服务器来更新自己的数据，数据的更新可以在远程连接上进行，从节点可以复制主数据库中的所有数据库或者特定的数据库，或者特定的表。</p>\n<h4 id=\"为什么需要主从复制？\"><a href=\"#为什么需要主从复制？\" class=\"headerlink\" title=\"为什么需要主从复制？\"></a>为什么需要主从复制？</h4><ul>\n<li>在业务复杂的系统中，有这么一个情景，有一句sql语句需要锁表，导致暂时不能使用读的服务，那么就很影响运行中的业务，使用主从复制，<strong>让主库负责写，从库负责读</strong>，这样，即使主库出现了锁表的情景，通过读从库也可以保证业务的正常运作。</li>\n<li><strong>做数据的热备</strong>，当主数据库有问题，可以切换从数据库</li>\n<li>架构的扩展。业务量越来越大，I/O访问频率过高，单机无法满足，此时做多库的存储，降低磁盘I/O访问的频率，提高单个机器的I/O性能。</li>\n</ul>\n<h4 id=\"MySQL主从复制原理\"><a href=\"#MySQL主从复制原理\" class=\"headerlink\" title=\"MySQL主从复制原理\"></a>MySQL主从复制原理</h4><p><img src=\"https://img-blog.csdnimg.cn/876363691c3c40e7ad176d6dc0e098fc.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAd2VpeGluXzQwMjI4MjAw,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p>从上图可以看出，MySQL主从同步实现主要有以下三个过程：<br>1、当有数据更改语句执行时，MySQL主库要在更新数据的同时，写二进制日志，将数据修改的内容记录进入日志中。<br>2、MySQL从库上运行这一些I/O进程，这个进程会监视MySQL主库上的二进制日志，当发现修改时，会立即同步到自身的中继日志。<br>3、MySQL从库上还会运行一个SQL进程，该进程用于监视自身的中继日志，当发现自身的中继日志发生改变时，立即将该中继日志改变对应的数据更改操作写入自身的数据库。</p>\n<h3 id=\"MySQL主从复制模式\"><a href=\"#MySQL主从复制模式\" class=\"headerlink\" title=\"MySQL主从复制模式\"></a>MySQL主从复制模式</h3><h4 id=\"异步复制\"><a href=\"#异步复制\" class=\"headerlink\" title=\"异步复制\"></a>异步复制</h4><blockquote>\n<p>在异步复制（async replication）中，Master不用关心Slave是否接收到二进制日志，所以Master与Slave没有任何的依赖关系。你可以认为Master和Slave是分别独自工作的两台服务器，数据最终会通过二进制日志达到一致。</p>\n<p>异步复制的性能最好，因为它对数据库本身几乎没有任何开销，除非主从延迟非常大，Dump Thread需要读取大量二进制日志文件。</p>\n<p>如果业务对于数据一致性要求不高，当发生故障时，能容忍<strong>数据的丢失</strong>，甚至大量的丢失，推荐用异步复制，这样性能最好（比如像微博这样的业务，虽然它对性能的要求极高，但对于数据丢失，通常可以容忍）。但往往核心业务系统最关心的就是数据安全，比如监控业务、告警系统。</p>\n</blockquote>\n<h4 id=\"半同步复制\"><a href=\"#半同步复制\" class=\"headerlink\" title=\"半同步复制\"></a>半同步复制</h4><blockquote>\n<p>主库在执行完客户端提交的事务后不是立刻返回给客户端，而是等待至少一个从库接收到并写到 relay log 中才返回给客户端。相对于异步复制，半同步复制提高了数据的安全性，同时它也造成了一定程度的延迟。<br>半同步复制的出现，就是为了保证在任何时刻主备数据一致的问题。相对于异步复制，半同步复制要求执行的每一个事务，都要求至少有一个备库成功接收后，才返回给用户。实现原理也很简单，主库本地执行完毕后，等待备库的响应消息（包含最新备库接收到的binlog（file，pos）），接收到备库响应消息后，再返回给用户，这样一个事务才算真正完成。在主库实例上，有一个专门的线程（ack_receiver）接收备库的响应消息，并以通知机制告知主库备库已经接收的日志，可以继续执行。</p>\n</blockquote>\n<h4 id=\"增强半同步复制\"><a href=\"#增强半同步复制\" class=\"headerlink\" title=\"增强半同步复制\"></a>增强半同步复制</h4><blockquote>\n<p>解决半同步复制中途数据不一致问题</p>\n<p>半同步的问题是因为等待ACK的点是Commit之后，此时Master已经完成数据变更，用户已经可以看到最新数据，当Binlog还未同步到Slave时，发生主从切换，那么此时从库是没有这个最新数据的，用户又看到老数据。</p>\n<p>增强半同步将等待ACK的点放在提交Commit之前，此时数据还未被提交，外界看不到数据变更，此时如果发送主从切换，新库依然还是老数据，不存在数据不一致的问题。<br><img src=\"https://img-blog.csdnimg.cn/20200721193729244.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzMzMwNjg3,size_16,color_FFFFFF,t_70\" alt=\"img\"></p>\n</blockquote>\n<h4 id=\"全同步复制\"><a href=\"#全同步复制\" class=\"headerlink\" title=\"全同步复制\"></a>全同步复制</h4><blockquote>\n<p>当主库提交事务之后，所有的从库节点必须收到、APPLY并且提交这些事务，然后主库线程才能继续做后续操作。因为需要等待所有从库执行完该事务才能返回，所以全同步复制的性能必然会收到严重的影响。</p>\n</blockquote>\n</blockquote>\n<h3 id=\"15-char和varchar区别\"><a href=\"#15-char和varchar区别\" class=\"headerlink\" title=\"15.char和varchar区别\"></a>15.char和varchar区别</h3><blockquote>\n<p>1、最大长度：</p>\n<p>char最大长度是255字符，varchar最大长度是65535个字节。</p>\n<p>2、定长：</p>\n<p>char是定长的，不足的部分用隐藏空格填充，varchar是不定长的。</p>\n<p>3、空间使用：</p>\n<p>char会浪费空间，varchar会更加节省空间。</p>\n<p>4、查找效率：</p>\n<p>char查找效率会很高，varchar查找效率会更低。</p>\n<p>5、尾部空格：</p>\n<p>char插入时可省略，vaechar插入时不会省略，查找时省略。</p>\n<h3 id=\"ps-int-长度是11位\"><a href=\"#ps-int-长度是11位\" class=\"headerlink\" title=\"ps(int 长度是11位)\"></a>ps(int 长度是11位)</h3></blockquote>\n","categories":["面试"],"tags":["面试","MySQL"]},{"title":"Redis面试","url":"/2022/06/12/Redis%E9%9D%A2%E8%AF%95/","content":"<h2 id=\"Redis\"><a href=\"#Redis\" class=\"headerlink\" title=\"Redis\"></a>Redis</h2><h3 id=\"1-redis-的持久化有哪几种方式？不同的持久化机制都有什么优缺点？持久化机制具体底层是如何实现的？\"><a href=\"#1-redis-的持久化有哪几种方式？不同的持久化机制都有什么优缺点？持久化机制具体底层是如何实现的？\" class=\"headerlink\" title=\"1.redis 的持久化有哪几种方式？不同的持久化机制都有什么优缺点？持久化机制具体底层是如何实现的？\"></a>1.redis 的持久化有哪几种方式？不同的持久化机制都有什么优缺点？持久化机制具体底层是如何实现的？</h3><blockquote>\n<h3 id=\"redis-持久化的两种方式\"><a href=\"#redis-持久化的两种方式\" class=\"headerlink\" title=\"redis 持久化的两种方式\"></a>redis 持久化的两种方式</h3><ul>\n<li><p>RDB：RDB 持久化机制，是对 redis 中的数据执行周期性的持久化。</p>\n</li>\n<li><p>AOF（append only file）：AOF 机制对每条写入命令作为日志，以 <code>append-only</code> 的模式写入一个日志文件中，在 redis 重启的时候，可以通过回放 AOF 日志中的写入指令来重新构建整个数据集。</p>\n<h4 id=\"RDB-优缺点\"><a href=\"#RDB-优缺点\" class=\"headerlink\" title=\"RDB 优缺点\"></a><strong>RDB 优缺点</strong></h4><ul>\n<li>RDB 会生成多个数据文件，每个数据文件都代表了某一个时刻中 redis 的数据，这种多个数据文件的方式，非常适合做冷备，可以将这种完整的数据文件发送到一些远程的安全存储上去，比如说 Amazon 的 S3 云服务上去，在国内可以是阿里云的 ODPS 分布式存储上，以预定好的备份策略来定期备份 redis 中的数据。</li>\n<li>RDB 对 redis 对外提供的读写服务，影响非常小，可以让 redis 保持高性能，因为 redis 主进程只需要 fork 一个子进程，让子进程执行磁盘 IO 操作来进行 RDB 持久化即可。</li>\n<li>相对于 AOF 持久化机制来说，直接基于 RDB 数据文件来重启和恢复 redis 进程，更加快速。</li>\n<li>如果想要在 redis 故障时，尽可能少的丢失数据，那么 RDB 没有 AOF 好。一般来说，RDB 数据快照文件，都是每隔 5 分钟，或者更长时间生成一次，这个时候就得接受一旦 redis 进程宕机，那么会丢失最近 5 分钟的数据。</li>\n<li>RDB 每次在 fork 子进程来执行 RDB 快照数据文件生成的时候，如果数据文件特别大，可能会导致对客户端提供的服务暂停数毫秒，或者甚至数秒。</li>\n</ul>\n<h4 id=\"AOF-优缺点\"><a href=\"#AOF-优缺点\" class=\"headerlink\" title=\"AOF 优缺点\"></a>AOF 优缺点</h4><ul>\n<li>AOF 可以更好的保护数据不丢失，一般 AOF 会每隔 1 秒，通过一个后台线程执行一次<code>fsync</code>操作，最多丢失 1 秒钟的数据。</li>\n<li>AOF 日志文件以 <code>append-only</code> 模式写入，所以没有任何磁盘寻址的开销，写入性能非常高，而且文件不容易破损，即使文件尾部破损，也很容易修复。</li>\n<li>AOF 日志文件即使过大的时候，出现后台重写操作，也不会影响客户端的读写。因为在 <code>rewrite</code> log 的时候，会对其中的指令进行压缩，创建出一份需要恢复数据的最小日志出来。在创建新日志文件的时候，老的日志文件还是照常写入。当新的 merge 后的日志文件 ready 的时候，再交换新老日志文件即可。</li>\n<li>AOF 日志文件的命令通过非常可读的方式进行记录，这个特性非常适合做灾难性的误删除的紧急恢复。比如某人不小心用 <code>flushall</code> 命令清空了所有数据，只要这个时候后台 <code>rewrite</code> 还没有发生，那么就可以立即拷贝 AOF 文件，将最后一条 <code>flushall</code> 命令给删了，然后再将该 <code>AOF</code> 文件放回去，就可以通过恢复机制，自动恢复所有数据。</li>\n<li>对于同一份数据来说，AOF 日志文件通常比 RDB 数据快照文件更大。</li>\n<li>AOF 开启后，支持的写 QPS 会比 RDB 支持的写 QPS 低，因为 AOF 一般会配置成每秒 <code>fsync</code> 一次日志文件，当然，每秒一次 <code>fsync</code>，性能也还是很高的。（如果实时写入，那么 QPS 会大降，redis 性能会大大降低）</li>\n<li>以前 AOF 发生过 bug，就是通过 AOF 记录的日志，进行数据恢复的时候，没有恢复一模一样的数据出来。所以说，类似 AOF 这种较为复杂的基于命令日志 / merge / 回放的方式，比基于 RDB 每次持久化一份完整的数据快照文件的方式，更加脆弱一些，容易有 bug。不过 AOF 就是为了避免 rewrite 过程导致的 bug，因此每次 rewrite 并不是基于旧的指令日志进行 merge 的，而是基于当时内存中的数据进行指令的重新构建，这样健壮性会好很多。</li>\n</ul>\n<h3 id=\"RDB-和-AOF-到底该如何选择\"><a href=\"#RDB-和-AOF-到底该如何选择\" class=\"headerlink\" title=\"RDB 和 AOF 到底该如何选择\"></a>RDB 和 AOF 到底该如何选择</h3><ul>\n<li>不要仅仅使用 RDB，因为那样会导致你丢失很多数据；</li>\n<li>也不要仅仅使用 AOF，因为那样有两个问题：第一，你通过 AOF 做冷备，没有 RDB 做冷备来的恢复速度更快；第二，RDB 每次简单粗暴生成数据快照，更加健壮，可以避免 AOF 这种复杂的备份和恢复机制的 bug；</li>\n<li>redis 支持同时开启开启两种持久化方式，我们可以综合使用 AOF 和 RDB 两种持久化机制，用 AOF 来保证数据不丢失，作为数据恢复的第一选择; 用 RDB 来做不同程度的冷备，在 AOF 文件都丢失或损坏不可用的时候，还可以使用 RDB 来进行快速的数据恢复。</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h3 id=\"2-说说缓存雪崩、缓存击穿、缓存穿透吧，解决办法？\"><a href=\"#2-说说缓存雪崩、缓存击穿、缓存穿透吧，解决办法？\" class=\"headerlink\" title=\"2.说说缓存雪崩、缓存击穿、缓存穿透吧，解决办法？\"></a>2.<strong>说说缓存雪崩、缓存击穿、缓存穿透吧，解决办法？</strong></h3><blockquote>\n<h2 id=\"缓存雪崩\"><a href=\"#缓存雪崩\" class=\"headerlink\" title=\"缓存雪崩\"></a><strong>缓存雪崩</strong></h2><p><strong>出现过程</strong></p>\n<p>假设有如下一个系统，高峰期请求为5000次/秒，4000次走了缓存，只有1000次落到了数据库上，数据库每秒1000的并发是一个正常的指标，完全可以正常工作，<strong>但如果缓存宕机了，或者缓存设置了相同的过期时间，导致缓存在同一时刻同时失效</strong>，每秒5000次的请求会全部落到数据库上，数据库立马就死掉了，因为数据库一秒最多抗2000个请求，如果DBA重启数据库，立马又会被新的请求打死了，这就是缓存雪崩。</p>\n<p><strong>解决方法</strong></p>\n<ol>\n<li>事前：redis高可用，主从+哨兵，redis cluster，避免全盘崩溃</li>\n<li>事中：本地ehcache缓存 + hystrix限流&amp;降级，避免MySQL被打死</li>\n<li>事后：redis持久化RDB+AOF，快速恢复缓存数据</li>\n<li>缓存的失效时间设置为随机值，避免同时失效</li>\n</ol>\n<h2 id=\"缓存穿透\"><a href=\"#缓存穿透\" class=\"headerlink\" title=\"缓存穿透\"></a><strong>缓存穿透</strong></h2><p><strong>出现过程</strong></p>\n<p>假如客户端每秒发送5000个请求，其中4000个为黑客的恶意攻击，即在数据库中也查不到。举个例子，用户id为正数，黑客构造的用户id为负数，如果黑客每秒一直发送这4000个请求，缓存就不起作用，数据库也很快被打死。</p>\n<p><strong>解决方法</strong></p>\n<ol>\n<li>对请求参数进行校验，不合理直接返回</li>\n<li>查询不到的数据也放到缓存，value为空，如 set -999 “”</li>\n<li>使用布隆过滤器，快速判断key是否在数据库中存在，不存在直接返回</li>\n</ol>\n<h2 id=\"缓存击穿\"><a href=\"#缓存击穿\" class=\"headerlink\" title=\"缓存击穿\"></a><strong>缓存击穿</strong></h2><p><strong>出现过程</strong></p>\n<p>设置了过期时间的key，承载着高并发，是一种热点数据。从这个key过期到重新从MySQL加载数据放到缓存的一段时间，大量的请求有可能把数据库打死。缓存雪崩是指大量缓存失效，缓存击穿是指热点数据的缓存失效</p>\n<p><strong>解决方法</strong></p>\n<ol>\n<li><p>设置key永远不过期，或者快过期时，通过另一个异步线程重新设置key</p>\n</li>\n<li><p>当从缓存拿到的数据为null，重新从数据库加载数据的过程上锁，下面写个分布式锁实现的demo</p>\n</li>\n</ol>\n   <figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">1，缓存雪崩:如果缓存中某一时刻大批热点数据同时过期，那么就可能导致大量请求直接访问Mysql了，解决办法就是在过期时间上增加一点随机值，另外如果搭建一个高可用的Redis集群也是防止缓存雪崩的有效手段</span><br><span class=\"line\">2．缓存击穿:和缓存雪崩类似，缓存雪崩是大批热点数据失效，而缓存击穿是指某一个热点key突然失效，也导致了大量请求直接访问Mysql数据库，这就是缓存击穿，解决方案就是考虑这个热点key不设过期时间</span><br><span class=\"line\">3．缓存穿透:假如某一时刻访问redis的大量key都在redis中不存在(比如黑客故意伪造一些乱七八糟的key)，那么也会给数据造成压力，这就是缓存穿透，解决方案是使用布隆过滤器，它的作用就是如果它认为一个key不存在，那么这个key就肯定不存在，所以可以在缓存之前加一层布隆过滤器来拦截不存在的key</span><br></pre></td></tr></table></figure>\n\n\n</blockquote>\n<h3 id=\"3-redis为什么快\"><a href=\"#3-redis为什么快\" class=\"headerlink\" title=\"3.redis为什么快\"></a>3.redis为什么快</h3><blockquote>\n<ul>\n<li>1、<code>Redis</code> 是一款纯内存结构，避免了磁盘 <code>I/O</code> 等耗时操作。</li>\n<li>2、<code>Redis</code> 命令处理的核心模块为单线程，减少了锁竞争，以及频繁创建线程和销毁线程的代价，减少了线程上下文切换的消耗。</li>\n<li>3、采用了 <code>I/O</code> 多路复用机制，大大提升了并发效率。</li>\n</ul>\n</blockquote>\n<h3 id=\"4-redis缓存淘汰策略\"><a href=\"#4-redis缓存淘汰策略\" class=\"headerlink\" title=\"4.redis缓存淘汰策略\"></a>4.redis缓存淘汰策略</h3><blockquote>\n<p>Redis内存不足的缓存淘汰策略提供了8种。<br>noeviction：当内存使用超过配置的时候会返回错误，不会驱逐任何键<br>allkeys-lru：加入键的时候，如果过限，首先通过LRU算法驱逐最久没有使用的键<br>volatile-lru：加入键的时候如果过限，首先从设置了过期时间的键集合中驱逐最久没有使用的键<br>allkeys-random：加入键的时候如果过限，从所有key随机删除<br>volatile-random：加入键的时候如果过限，从过期键的集合中随机驱逐<br>volatile-ttl：从配置了过期时间的键中驱逐马上就要过期的键<br>volatile-lfu：从所有配置了过期时间的键中驱逐使用频率最少的键<br>allkeys-lfu：从所有键中驱逐使用频率最少的键</p>\n<figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">这八种大体上可以分为4中，lru、lfu、random、ttl。</span><br><span class=\"line\">lru：Least Recently Used)，最近最少使用</span><br><span class=\"line\">lfu：Least Frequently Used，最不经常使用法</span><br><span class=\"line\">ttl：Time To Live，生存时间</span><br><span class=\"line\">random：随机</span><br><span class=\"line\">默认是noeviction。对于写请求不再提供服务，直接返回错误（DEL请求和部分特殊请求除外</span><br><span class=\"line\">eviction：“逐出；赶出；收回”。</span><br><span class=\"line\">volatile：“不稳定的”。</span><br></pre></td></tr></table></figure>\n\n<p><strong>Redis默认的过期策略是noeviction, 最暴力那个, 如果内存满了那就是一场“华丽”的故事了。</strong></p>\n</blockquote>\n<h3 id=\"5-Redis有哪些数据结构？分别有哪些典型的应用场景\"><a href=\"#5-Redis有哪些数据结构？分别有哪些典型的应用场景\" class=\"headerlink\" title=\"5.Redis有哪些数据结构？分别有哪些典型的应用场景?\"></a>5.Redis有哪些数据结构？分别有哪些典型的应用场景?</h3><blockquote>\n<p>Redis的数据结构有:</p>\n<ul>\n<li>字符串:可以用来做最简单的数据缓存，可以缓存某个简单的字符串，也可以缓存某个json格式的字符串，Redis分布式锁的实现就利用了这种数据结构，还包括可以实现计数器、Session共享、分布式ID</li>\n<li>哈希表:可以用来存储一些key-value对，更适合用来存储对象</li>\n<li>列表: Redis的列表通过命令的组合，既可以当做栈，也可以当做队列来使用，可以用来缓存类似微信公众号、微博等消息流数据</li>\n<li>集合:和列表类似，也可以存储多个元素，但是不能重复，集合可以进行交集、并集、差集操作，从而可以实现类似,<br>我和某人共同关注的人、朋友圈点赞等功能</li>\n<li>有序集合:集合是无序的，有序集合可以设置顺序，可以用来实现排行榜功能</li>\n</ul>\n</blockquote>\n<h3 id=\"6-Redis分布式锁底层是如何实现的\"><a href=\"#6-Redis分布式锁底层是如何实现的\" class=\"headerlink\" title=\"6.Redis分布式锁底层是如何实现的\"></a>6.Redis分布式锁底层是如何实现的</h3><blockquote>\n<ul>\n<li>首先利用setnx来保证:如果key不存在才能获取到锁，如果key存在，则获取不到锁</li>\n<li>然后还要利用lua脚本来保证多个redis操作的原子性</li>\n<li>同时还要考虑到锁过期，所以需要额外的一个看门狗定时任务来监听锁是否需要续约</li>\n<li>同时还要考虑到redis书点挂掉后的情况，所以需要采用红锁的方式来同时向N/2+1个节点申请锁，都申请到了才证明获取锁成功，这样就算其中某个redis节点挂掉了，锁也不能被其他客户端获取到</li>\n</ul>\n</blockquote>\n<h3 id=\"7-Redis和Mysql如何保证数据一致\"><a href=\"#7-Redis和Mysql如何保证数据一致\" class=\"headerlink\" title=\"7.Redis和Mysql如何保证数据一致\"></a>7.Redis和Mysql如何保证数据一致</h3><blockquote>\n<p>1．先更新Mysql，再更新Redis，如果更新Redis失败，可能仍然不一致</p>\n<p>2．先删除Redis缓存数据，再更新Mysql，再次查询的时候在将数据添加到缓存中，这种方案能解决1方案的问题，但是在高并发下性能较低，而且仍然会出现数据不一致的问题，比如线程1删除了Redis缓存数据，正在更新Mysql，此时另外一个查询再查询，那么就会把Mysql中老数据又查到Redis中</p>\n<p>3，延时双删，步骤是:先删除Redis缓存数据，再更新Mysql，延迟几百毫秒再删除Redis缓存数据，这样就算在更新Mysql时，有其他线程读了Mysql，把老数据读到了Redis中，那么也会被删除掉，从而把数据保持一致</p>\n</blockquote>\n<h3 id=\"8-redis的应用场景？\"><a href=\"#8-redis的应用场景？\" class=\"headerlink\" title=\"8.redis的应用场景？\"></a>8.redis的应用场景？</h3><blockquote>\n<h4 id=\"1-缓存\"><a href=\"#1-缓存\" class=\"headerlink\" title=\"1.缓存\"></a>1.缓存</h4><p> 缓存现在几乎是所有中大型网站都在用的必杀技，合理的利用缓存不仅能够提升网站访问速度，还能大大降低数据库的压力。Redis提供了键过期功能，也提供了灵活的键淘汰策略，所以，现在Redis用在缓存的场合非常多。</p>\n<h4 id=\"2-排行榜\"><a href=\"#2-排行榜\" class=\"headerlink\" title=\"2.排行榜\"></a>2.排行榜</h4><p> 很多网站都有排行榜应用的，如淘宝的月度销量榜单、商品按时间的上新排行榜等。Redis提供的有序集合数据类构能实现各种复杂的排行榜应用。</p>\n<h4 id=\"3-计数器\"><a href=\"#3-计数器\" class=\"headerlink\" title=\"3.计数器\"></a>3.计数器</h4><p>什么是计数器，如电商网站商品的浏览量、视频网站视频的播放数等。为了保证数据实时效，每次浏览都得给+1，并发量高时如果每次都请求数据库操作无疑是种挑战和压力。Redis提供的incr命令来实现计数器功能，内存操作，性能非常好，非常适用于这些计数场景。</p>\n<h4 id=\"4-分布式会话\"><a href=\"#4-分布式会话\" class=\"headerlink\" title=\"4.分布式会话\"></a>4.分布式会话</h4><p>集群模式下，在应用不多的情况下一般使用容器自带的session复制功能就能满足，当应用增多相对复杂的系统中，一般都会搭建以Redis等内存数据库为中心的session服务，session不再由容器管理，而是由session服务及内存数据库管理。</p>\n<h4 id=\"5-分布式锁\"><a href=\"#5-分布式锁\" class=\"headerlink\" title=\"5.分布式锁\"></a>5.分布式锁</h4><p>在很多互联网公司中都使用了分布式技术，分布式技术带来的技术挑战是对同一个资源的并发访问，如全局ID、减库存、秒杀等场景，并发量不大的场景可以使用数据库的悲观锁、乐观锁来实现，但在并发量高的场合中，利用数据库锁来控制资源的并发访问是不太理想的，大大影响了数据库的性能。可以利用Redis的setnx功能来编写分布式的锁，如果设置返回1说明获取锁成功，否则获取锁失败，实际应用中要考虑的细节要更多。</p>\n<h4 id=\"6-朋友圈点赞\"><a href=\"#6-朋友圈点赞\" class=\"headerlink\" title=\"6.朋友圈点赞\"></a>6.朋友圈点赞</h4><p> 点赞、踩、关注/被关注、共同好友等是社交网站的基本功能，社交网站的访问量通常来说比较大，而且传统的关系数据库类型不适合存储这种类型的数据，Redis提供的哈希、集合等数据结构能很方便的的实现这些功能。</p>\n<h4 id=\"7-最新消息\"><a href=\"#7-最新消息\" class=\"headerlink\" title=\"7.最新消息\"></a>7.最新消息</h4><p> Redis列表结构，LPUSH可以在列表头部插入一个内容ID作为关键字，LTRIM可用来限制列表的数量，这样列表永远为N个ID，无需查询最新的列表，直接根据ID去到对应的内容页即可。</p>\n<h4 id=\"8-消息队列\"><a href=\"#8-消息队列\" class=\"headerlink\" title=\"8.消息队列\"></a>8.消息队列</h4><p> 消息队列是大型网站必用中间件，如ActiveMQ、RabbitMQ、Kafka等流行的消息队列中间件，主要用于业务解耦、流量削峰及异步处理实时性低的业务。Redis提供了发布/订阅及阻塞队列功能，能实现一个简单的消息队列系统。另外，这个不能和专业的消息中间件相比</p>\n</blockquote>\n","categories":["面试"],"tags":["面试","Redis"]},{"title":"SQL面试","url":"/2022/09/05/SQL%E8%AF%AD%E5%8F%A5%E9%9D%A2%E8%AF%95/","content":"<h2 id=\"1-SQL的执行顺序\"><a href=\"#1-SQL的执行顺序\" class=\"headerlink\" title=\"1.SQL的执行顺序\"></a>1.SQL的执行顺序</h2><blockquote>\n<p> from&gt;join&gt;where&gt;group by&gt;聚合函数&gt;having&gt;select&gt;order by&gt;limit </p>\n<h3 id=\"1、最先执行from-table；\"><a href=\"#1、最先执行from-table；\" class=\"headerlink\" title=\"1、最先执行from table；\"></a>1、最先执行from table；</h3><p> 需要先确定从哪个表中取<a href>数据</a>，所以最先执行from table。 </p>\n<h3 id=\"2、join连接\"><a href=\"#2、join连接\" class=\"headerlink\" title=\"2、join连接\"></a>2、join连接</h3><p> 用于把来自两个或多个表的行结合起来，简单补充一下连接的类型 </p>\n<ul>\n<li> 自然连接（natural join） </li>\n<li> 内连接（inner join）：内连接查询能将左表和右表中能关联起来的<a href>数据</a>连接后返回，返回的结果就是两个表中所有相匹配的<a href>数据</a>。 </li>\n<li> 外连接（outer join）：外连接分为左外连接（LEFT JOIN：即使右表中没有匹配，也从左表返回所有的行）、右外连接（RIGHT JOIN：即使左表中没有匹配，也从右表返回所有的行）、还有一个FULL JOIN(全连接)，不过MYSQL不支持全连接 </li>\n<li> 交叉连接（cross join）即笛卡尔连接 </li>\n</ul>\n<h3 id=\"3、where语句；\"><a href=\"#3、where语句；\" class=\"headerlink\" title=\"3、where语句；\"></a>3、where语句；</h3><p> where语句是对条件加以限定 </p>\n<h3 id=\"4、分组语句【group-by……-having】；\"><a href=\"#4、分组语句【group-by……-having】；\" class=\"headerlink\" title=\"4、分组语句【group by…… having】；\"></a>4、分组语句【group by…… having】；</h3><p> group by是分组语句 </p>\n<p> having是和group by配合使用的，用来作条件限定 </p>\n<h3 id=\"5、聚合函数；\"><a href=\"#5、聚合函数；\" class=\"headerlink\" title=\"5、聚合函数；\"></a>5、聚合函数；</h3><p> 常用的聚合函数有max，min， count，sum，聚合函数的执行在group by之后，having之前 </p>\n<p> 举例：count函数查询分组后，每一组分别有多少条<a href>数据</a> </p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">select <span class=\"title function_\">count</span><span class=\"params\">(*)</span> from user group by gender</span><br></pre></td></tr></table></figure>\n\n<p> 值得注意的是：<strong>聚合函数的执行在group by之后，having之前</strong> </p>\n<h3 id=\"6、select语句；\"><a href=\"#6、select语句；\" class=\"headerlink\" title=\"6、select语句；\"></a>6、select语句；</h3><p> 对分组聚合完的表挑选出需要查询的<a href>数据</a> </p>\n<h3 id=\"7、Distinct\"><a href=\"#7、Distinct\" class=\"headerlink\" title=\"7、Distinct\"></a>7、Distinct</h3><p> distinct对<a href>数据</a>进行去重 </p>\n<p> 如果sql语句存在聚合函数，例如count、max等，会<strong>先执行聚合函数再去重</strong> </p>\n<h3 id=\"8、order-by排序语句。\"><a href=\"#8、order-by排序语句。\" class=\"headerlink\" title=\"8、order by排序语句。\"></a>8、order by<a href>排序</a>语句。</h3><p> order by<a href>排序</a>语句 </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> <span class=\"keyword\">user</span> <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> id  升序排序</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> <span class=\"keyword\">user</span> <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> id <span class=\"keyword\">desc</span> 降序排序</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9、limit\"><a href=\"#9、limit\" class=\"headerlink\" title=\"9、limit\"></a>9、limit</h3><p> limit用于指定返回的<a href>数据</a>条数 </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> <span class=\"keyword\">user</span> limit <span class=\"number\">2</span></span><br><span class=\"line\">从<span class=\"keyword\">user</span>表中查询前两条数据</span><br><span class=\"line\">该<span class=\"keyword\">sql</span>等同于</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> <span class=\"keyword\">user</span> limit <span class=\"number\">0</span>,<span class=\"number\">2</span></span><br><span class=\"line\">表示从第<span class=\"number\">0</span>条开始取两条数据</span><br></pre></td></tr></table></figure>\n\n<p> limit常配合order by使用 </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> <span class=\"keyword\">user</span> <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> id limit <span class=\"number\">3</span></span><br><span class=\"line\">根据id排序，选出id排序前三的数据</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p> <strong>from&gt;join&gt;where&gt;group by&gt;聚合函数&gt;having&gt;select&gt;order by&gt;limit</strong> </p>\n<h3 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\"><span class=\"keyword\">distinct</span> user.name </span><br><span class=\"line\"><span class=\"keyword\">from</span> <span class=\"keyword\">user</span> </span><br><span class=\"line\"><span class=\"keyword\">join</span> vip <span class=\"keyword\">on</span> user.id<span class=\"operator\">=</span>vip.id </span><br><span class=\"line\"><span class=\"keyword\">where</span> user.id<span class=\"operator\">&gt;</span><span class=\"number\">10</span> </span><br><span class=\"line\"><span class=\"keyword\">group</span> <span class=\"keyword\">by</span> user.mobile </span><br><span class=\"line\"><span class=\"keyword\">having</span> <span class=\"built_in\">count</span>(<span class=\"operator\">*</span>)<span class=\"operator\">&gt;</span><span class=\"number\">2</span> </span><br><span class=\"line\"><span class=\"keyword\">order</span> <span class=\"keyword\">by</span> user.id</span><br><span class=\"line\">limit <span class=\"number\">3</span>;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"执行顺序\"><a href=\"#执行顺序\" class=\"headerlink\" title=\"执行顺序\"></a>执行顺序</h4><ol>\n<li> from user </li>\n<li> join vip on user.id=vip.id ，join是表示要关联的表，on是连接的条件 </li>\n<li> where user.id&gt;10  </li>\n<li> group by user.mobile 根据user.mobile分组 </li>\n<li> 然后先执行count(*)在执行having，查询分组之后数量大于2的分组<a href>数据</a> </li>\n<li> select 对分组聚合完的表挑选出需要查询的<a href>数据</a> </li>\n<li> distinct查询出来的<a href>数据</a>去重 </li>\n<li> order by user.id 对去重后的<a href>数据</a><a href>排序</a> </li>\n<li> limit 3对<a href>排序</a>后的<a href>数据</a>选出前面3条</li>\n</ol>\n</blockquote>\n","categories":["面试"],"tags":["面试","SQL"]},{"title":"Springboot面试(1)","url":"/2022/06/12/Springboot%E9%9D%A2%E8%AF%95(1)/","content":"<h2 id=\"springboot-1\"><a href=\"#springboot-1\" class=\"headerlink\" title=\"springboot(1)\"></a>springboot(1)</h2><h3 id=\"1-说说对springmvc的理解\"><a href=\"#1-说说对springmvc的理解\" class=\"headerlink\" title=\"1.说说对springmvc的理解\"></a>1.说说对springmvc的理解</h3><blockquote>\n<p><strong>什么是MVC</strong><br>mvc是一种设计模式（设计模式就是日常开发中编写代码的一种好的方法和经验的总结）。模型（model）-视图（view）-控制器（controller），三层架构的设计模式。用于实现前端页面的展现与后端业务数据处理的分离。</p>\n<p><strong>mvc设计模式的好处</strong></p>\n<p>1.分层设计，实现了业务系统各个组件之间的解耦，有利于业务系统的可扩展性，可维护性。</p>\n<p>2.有利于系统的并行开发，提升开发效率。</p>\n<p><strong>SpringMVC流程</strong></p>\n<p>1、 用户发送请求至前端控制器DispatcherServlet。</p>\n<p>2、 DispatcherServlet收到请求调用HandlerMapping处理器映射器。</p>\n<p>3、 处理器映射器找到具体的处理器(可以根据xml配置、注解进行查找)，生成处理器对象及处理器拦截器(如果有则生成)一并返回给DispatcherServlet。</p>\n<p>4、 DispatcherServlet调用HandlerAdapter处理器适配器。</p>\n<p>5、 HandlerAdapter经过适配调用具体的处理器(Controller，也叫后端控制器)。</p>\n<p>6、 Controller执行完成返回ModelAndView。</p>\n<p>7、 HandlerAdapter将controller执行结果ModelAndView返回给DispatcherServlet。</p>\n<p>8、 DispatcherServlet将ModelAndView传给ViewReslover视图解析器。</p>\n<p>9、 ViewReslover解析后返回具体View。</p>\n<p>10、DispatcherServlet根据View进行渲染视图（即将模型数据填充至视图中）。</p>\n<p>11、 DispatcherServlet响应用户。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200508071612511.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Nvb2xfc3VtbWVyX21vb24=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<p><strong>核心组件</strong><br>DispatcherServlet（前端控制器）<br>说明：Spring MVC 的入口函数，接收请求，响应结果，相当于转发器，中央处理器，它就相当于mvc模式中DispatcherServlet的存在降低了组件之间的耦合性。<br>HandlerMapping(处理器映射器）<br>说明：根据请求的url查找Handler（即处理器Controller），映射方式有配置文件方式，实现接口方式，注解方式等。<br>HandlerAdapter(处理器适配器)<br>说明：HandlerAdapter是适配器模式的应用，按照HandlerAdapter要求的规则去执行Handler。<br>Handler（处理器）<br>说明：Handler需要开发工程师按照HandlerAdapter的要求去做，是后端控制器，处理具体的业务逻辑。<br>View resolver（视图解析器）<br>说明：进行视图解析，首先根据逻辑视图名解析成物理视图名即具体的页面地址，再生成View视图对象，最后对View进行渲染将处理结果通过页面展示给用户。<br>视图View<br>说明：View是一个接口，实现类支持不同的View类型（jsp、freemarker、pdf等）</p>\n<p>springMVC是一个MVC的开源框架，springMVC=struts2+spring，springMVC就相当于是Struts2加上sring的整合，但是这里有一个疑惑就是，springMVC和spring是什么样的关系呢？这个在百度百科上有一个很好的解释：意思是说，springMVC是spring的一个后续产品，其实就是spring在原有基础上，又提供了web应用的MVC模块，可以简单的把springMVC理解为是spring的一个模块（类似AOP，IOC这样的模块），网络上经常会说springMVC和spring无缝集成，其实springMVC就是spring的一个子模块，所以根本不需要同spring进行整合。</p>\n</blockquote>\n<h3 id=\"2-说说ioc和aop理解和原理\"><a href=\"#2-说说ioc和aop理解和原理\" class=\"headerlink\" title=\"2.说说ioc和aop理解和原理\"></a>2.说说ioc和aop理解和原理</h3><blockquote>\n<h1 id=\"IOC\"><a href=\"#IOC\" class=\"headerlink\" title=\"IOC\"></a>IOC</h1><p>IOC叫做控制反转，指的是通过Spring来管理对象创建、配置和生命周期，这样相当于把控制权交给了Spring，不需要人工来管理对象之间的复杂的依赖关系，这样做的好处就是解耦！</p>\n<p>在Spring里面，主要提供BeanFactory和ApplicationContext两种IOC容器，通过它们来实现对Bean的管理！</p>\n<h1 id=\"AOP\"><a href=\"#AOP\" class=\"headerlink\" title=\"AOP\"></a>AOP</h1><p>叫做面向切面编程，他是一个编程范式，目的就是提高代码的模块性。Spring AOP基于动态代理的方式实现，如果是实现了接口的话就会使用JDK动态代理，反之则使用CGLIB代理。Spring中AOP的应用主要体现在事务、日志、异常处理等方面，通过在代码的前后做一些增强处理，可以实现对业务的逻辑隔离，提高代码的模块化能力，同时也是解耦。Spring主要提供了Aspect切面，JoinPoint连接点、PointCut切入点、Advice增强等实现方式。</p>\n</blockquote>\n<h3 id=\"3-说说springboot的理解\"><a href=\"#3-说说springboot的理解\" class=\"headerlink\" title=\"3.说说springboot的理解\"></a>3.说说springboot的理解</h3><blockquote>\n<p>在使用spring框架的时候,我们需要配置applicationContext.xml的配置文件,并且在pom文件中,我们需要导入相关的依赖jar包以及版本,这样在使用的过程中,就显得有些复杂.</p>\n<p>而springboot利用起步依赖和自动装配就很好的解决了一个问题,首先,我们来说说起步依赖,在springboot的pom文件中,我们依赖<parent>父工程 ,在父工程中,定义了相关的坐标以及版本信息,这样我们继承了这个父工程的时候,就不需要指定版本信息,在我们的项目中.依赖了start-web这个坐标,而这个坐标依赖了spring以及springmvc的坐标,这样,根据依赖传递我们的项目就间接依赖了spring和mvc坐标,所有我们只需要导入start-web这一个坐标就可以了</parent></p>\n<p>接下来我们说说自动装配,在springboot的启动类上有一个@SpringBootApplication注解,这个注解也是springboot项目的核心注解,在@SpringBootApplication注解中,有一个@EnableAutoConfiguration注解,也就是开启自动配置的意思,这个注解的关键功能由@Import提供,其导入的AutoConfigurationImportSelector中的selectImports()方法能够找到META-INF/spring.factories配置文件中的所有启动配置类,并对其进行加载,而这些自动配置类都是以AtuoConfiguration结尾来命名的,它实际上就是一个JavaConfig形式的Spring容器配置类,通过@ConfigurationProperties注解,绑定到对应的以properties结尾的配置实体类上封装为一个bean,然后在通过@EnableAutoConfiguration注解导入到Spring容器中,这样自动装配就完成了.</p>\n</blockquote>\n<h3 id=\"4-使用过过滤器或者拦截器吗，说说拦截器的方法和实现的接口\"><a href=\"#4-使用过过滤器或者拦截器吗，说说拦截器的方法和实现的接口\" class=\"headerlink\" title=\"4.使用过过滤器或者拦截器吗，说说拦截器的方法和实现的接口\"></a>4.使用过过滤器或者拦截器吗，说说拦截器的方法和实现的接口</h3><blockquote>\n<p>使用过</p>\n<p>用过滤器主要做过全局网关配置请求token和跨域问题，实现Filter接口</p>\n<p>用拦截器主要做日志输出，实现HandlerInterceptor 接口，有三个方法，preHandle，postHandle，afterCompletion，分别是请求之前调用，之后调用，结束后调用，然后相比过滤器，它需要在springmvc注入，在启动类添加配置代码。实现WebMvcConfigurer接口添加拦截器。</p>\n</blockquote>\n<h3 id=\"5-aop在什么情况下会使用到\"><a href=\"#5-aop在什么情况下会使用到\" class=\"headerlink\" title=\"5.aop在什么情况下会使用到\"></a>5.aop在什么情况下会使用到</h3><blockquote>\n<p>AOP的应用场景：<br>1.日志处理<br>2.用户登录<br>3.权限（Authentication ）<br>4.性能优化（Performance optimization）<br>5.事务（Transactions ）<br>6.记录跟踪　优化　校准（logging, tracing, profiling and monitoring）<br>7.调试（Debugging）<br>8.懒加载（Lazy loading）<br>9.错误处理（Error handling）<br>10.资源池（Resource pooling）<br>11.同步（Synchronization）</p>\n</blockquote>\n<h3 id=\"6-如果有过滤器和拦截器和aop，他们的执行顺序是什么\"><a href=\"#6-如果有过滤器和拦截器和aop，他们的执行顺序是什么\" class=\"headerlink\" title=\"6.如果有过滤器和拦截器和aop，他们的执行顺序是什么\"></a>6.如果有过滤器和拦截器和aop，他们的执行顺序是什么</h3><blockquote>\n<p>执行顺序依次是过滤器、拦截器、切面</p>\n</blockquote>\n<h3 id=\"7-Spring-中的bean-是线程安全的吗\"><a href=\"#7-Spring-中的bean-是线程安全的吗\" class=\"headerlink\" title=\"7.Spring 中的bean 是线程安全的吗\"></a>7.Spring 中的bean 是线程安全的吗</h3><blockquote>\n<p>Spring本身并没有针对Bean做线程安全的处理，所以:</p>\n<p>1.如果Bean是无状态的，那么Bean则是线程安全的</p>\n<p>2.如果Bean是有状态的，那么Bean则不是线程安全的</p>\n<p>另外，Bean是不是线程安全，跟Bean的作用域没有关系，Bean的作用域只是表示Bean的生命周期范围，对于任何生命周期的Bean都是一个对象，这个对象是不是线程安全的，还是得看这个Bean对象本身。</p>\n<p>(<strong>有状态会话bean</strong>  ：每个用户有自己特有的一个实例，在用户的生存期内，bean保持了用户的信息，即“有状态”；一旦用户灭亡（调用结束或实例结束），bean的生命期也告结束。即每个用户最初都会得到一个初始的bean。简单来说，有状态就是有数据存储功能。有状态对象(Stateful Bean)，就是有实例变量的对象 ，可以保存数据，是<strong>非线程安全</strong>的。<br><strong>无状态会话bean</strong>  ：bean一旦实例化就被加进会话池中，各个用户都可以共用。即使用户已经消亡，bean  的生命期也不一定结束，它可能依然存在于会话池中，供其他用户调用。由于没有特定的用户，那么也就不能保持某一用户的状态，所以叫无状态bean。但无状态会话bean  并非没有状态，如果它有自己的属性（变量），那么这些变量就会受到所有调用它的用户的影响，这是在实际应用中必须注意的。简单来说，无状态就是一次操作，不能保存数据。无状态对象(Stateless Bean)，就是没有实例变量的对象 .不能保存数据，是不变类，是<strong>线程安全</strong>的。)</p>\n</blockquote>\n<h3 id=\"8-BeanFactory和ApplicationContext的区别\"><a href=\"#8-BeanFactory和ApplicationContext的区别\" class=\"headerlink\" title=\"8.BeanFactory和ApplicationContext的区别\"></a>8.<strong>BeanFactory和ApplicationContext的区别</strong></h3><blockquote>\n<p><strong>BeanFactory：</strong></p>\n<p>是Spring里面最低层的接口，提供了最简单的容器的功能，只提供了实例化对象和拿对象的功能；</p>\n<p><strong>ApplicationContext：</strong></p>\n<p>应用上下文，继承BeanFactory接口，它是Spring的一各更高级的容器，提供了更多的有用的功能；</p>\n<ol>\n<li><p>国际化（MessageSource）</p>\n</li>\n<li><p>访问资源，如URL和文件（ResourceLoader）</p>\n</li>\n<li><p>载入多个（有继承关系）上下文 ，使得每一个上下文都专注于一个特定的层次，比如应用的web层  </p>\n</li>\n<li><p>消息发送、响应机制（ApplicationEventPublisher）</p>\n</li>\n<li><p>AOP（拦截器）</p>\n</li>\n</ol>\n</blockquote>\n<h3 id=\"9-Transactional-注解的失效场景\"><a href=\"#9-Transactional-注解的失效场景\" class=\"headerlink\" title=\"9.@Transactional 注解的失效场景\"></a>9.@Transactional 注解的失效场景</h3><blockquote>\n<p><strong>1、@Transactional 应用在非 public 修饰的方法上</strong></p>\n<p>如果Transactional注解应用在非public 修饰的方法上，Transactional将会失效。</p>\n<p>注意：protected、private 修饰的方法上使用 @Transactional 注解，虽然事务无效，但不会有任何报错，这是我们很容犯错的一点。</p>\n<p><strong>2、@Transactional 注解属性 propagation 设置错误</strong></p>\n<p>这种失效是由于配置错误，若是错误的配置以下三种 propagation，事务将不会发生回滚。</p>\n<p>TransactionDefinition.PROPAGATION_SUPPORTS：如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行。<br>TransactionDefinition.PROPAGATION_NOT_SUPPORTED：以非事务方式运行，如果当前存在事务，则把当前事务挂起。<br>TransactionDefinition.PROPAGATION_NEVER：以非事务方式运行，如果当前存在事务，则抛出异常。</p>\n<p><strong>3、@Transactional 注解属性 rollbackFor 设置错误</strong></p>\n<p>rollbackFor 可以指定能够触发事务回滚的异常类型。Spring默认抛出了未检查unchecked异常（继承自 RuntimeException 的异常）或者 Error才回滚事务，其他异常不会触发回滚事务。如果在事务中抛出其他类型的异常，但却期望 Spring 能够回滚事务，就需要指定rollbackFor属性。</p>\n<p><strong>4、同一个类中方法调用，导致@Transactional失效</strong></p>\n<p>开发中避免不了会对同一个类里面的方法调用，比如有一个类Test，它的一个方法A，A再调用本类的方法B（不论方法B是用public还是private修饰），但方法A没有声明注解事务，而B方法有。当外界调用方法A之后，方法B的事务是不会起作用的。这也是经常犯错误的一个地方。那为什么会出现这种情况？其实这还是由于使用Spring AOP代理造成的，因为只有当事务方法被当前类以外的代码调用时，才会由Spring生成的代理对象来管理。</p>\n</blockquote>\n<h3 id=\"10-spring运用了哪些设计模式\"><a href=\"#10-spring运用了哪些设计模式\" class=\"headerlink\" title=\"10.spring运用了哪些设计模式\"></a>10.spring运用了哪些设计模式</h3><blockquote>\n<h3 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h3><p>Spring使用工厂模式可以通过 <code>BeanFactory</code> 或 <code>ApplicationContext</code> 创建 bean 对象。</p>\n<h3 id=\"代理模式\"><a href=\"#代理模式\" class=\"headerlink\" title=\"代理模式\"></a>代理模式</h3><p>Spring AOP就是基于动态代理的，如果要代理的对象，实现了某个接口，那么Spring AOP会使用JDK Proxy，去创建代理对象，而对于没有实现接口的对象，就无法使用JDK Proxy去进行代理了，这时候Spring AOP会使用Cglib，这时候Spring AOP会使用Cglib生成一个被代理对象的子类来作为代理。</p>\n<h3 id=\"模板方法模式\"><a href=\"#模板方法模式\" class=\"headerlink\" title=\"模板方法模式\"></a>模板方法模式</h3><p>Spring中jdbcTemplate、hibernateTemplate等以Template结尾的对数据库操作的类，它们就使用到模板模式。一般情况下，我们都是使用继承的方式来实现模板模式，但是Spring并没有使用这种方式，而是使用Callback模式与模板方法配合，既达到了代码复用的效果，同时增加了灵活性。</p>\n<h3 id=\"观察者模式\"><a href=\"#观察者模式\" class=\"headerlink\" title=\"观察者模式\"></a>观察者模式</h3><p>观察者设计模式是一种对象行为模式。它表示的是一种对象与对象之间具有<a href=\"https://so.csdn.net/so/search?q=%E4%BE%9D%E8%B5%96%E5%85%B3%E7%B3%BB&spm=1001.2101.3001.7020\">依赖关系</a>，当一个对象发生改变时，这个对象锁依赖的对象也会做出反应。Spring事件驱动模型就是观察者模式很经典的应用。</p>\n<h3 id=\"适配器-模式\"><a href=\"#适配器-模式\" class=\"headerlink\" title=\"适配器 模式\"></a>适配器 模式</h3><p>适配器设计模式将一个接口转换成客户希望的另一个接口，适配器模式使得接口不兼容的那些类可以一起工作，其别名为包装器。在Spring MVC中，DispatcherServlet根据请求信息调用HandlerMapping，解析请求对应的Handler，解析到对应的Handler（也就是我们常说的Controller控制器）后，开始由HandlerAdapter适配器处理。为什么要在Spring MVC中使用适配器模式？Spring MVC中的Controller种类众多不同类型的Controller通过不同的方法来对请求进行处理，有利于代码的维护拓展。</p>\n<h3 id=\"装饰者模式\"><a href=\"#装饰者模式\" class=\"headerlink\" title=\"装饰者模式\"></a>装饰者模式</h3><p>装饰者设计模式可以动态地给对象增加些额外的属性或行为。相比于使用继承，装饰者模式更加灵活。Spring 中配置DataSource的时候，DataSource可能是不同的数据库和数据源。我们能否根据客户的需求在少修改原有类的代码下切换不同的数据源？这个时候据需要用到装饰者模式。</p>\n<h3 id=\"策略模式\"><a href=\"#策略模式\" class=\"headerlink\" title=\"策略模式\"></a>策略模式</h3><p>Spring 框架的资源访问接口就是基于策略设计模式实现的。该接口提供了更强的资源访问能力，Spring框架本身大量使用了Resource接口来访问底层资源。Resource接口本身没有提供访问任何底层资源的实现逻辑，针对不同的额底层资源，Spring将会提供不同的Resource实现类，不同的实现类负责不同的资源访问类型。</p>\n</blockquote>\n<h3 id=\"11-Springboot中常用注解有哪些，简述一下注解的作用\"><a href=\"#11-Springboot中常用注解有哪些，简述一下注解的作用\" class=\"headerlink\" title=\"11.Springboot中常用注解有哪些，简述一下注解的作用\"></a>11.Springboot中常用注解有哪些，简述一下注解的作用</h3><blockquote>\n<h3 id=\"SpringBootApplication\"><a href=\"#SpringBootApplication\" class=\"headerlink\" title=\"@SpringBootApplication\"></a>@SpringBootApplication</h3><ul>\n<li>这个注解很常见了，每次在启动SpringBoot项目的时候，都会见到它，它作用在类上，标识该类为SpringBoot项目启动类。<br>并且让SpringBoot自动给程序进行必要的配置，等同于@Configuration、@EnableAutoConfiguration、@ComponentScan这三个注解。</li>\n</ul>\n<h3 id=\"Configuration\"><a href=\"#Configuration\" class=\"headerlink\" title=\"@Configuration\"></a>@Configuration</h3><ul>\n<li>相当于传统Spring的xml配置文件。</li>\n<li>如果第三方库需要用到xml文件，建议通过@Configuration类作为项目的配置主类，可以使用@ImportResource注解加载xml配置文件。</li>\n</ul>\n<h3 id=\"EnableAutoConfiguration-自动配置。\"><a href=\"#EnableAutoConfiguration-自动配置。\" class=\"headerlink\" title=\"@EnableAutoConfiguration 自动配置。\"></a>@EnableAutoConfiguration 自动配置。</h3><ul>\n<li>SpringBoot自动配置(auto-configuration)，尝试根据你添加的启动器(starter)自动配置你的SpringBoot应用。</li>\n<li>你可以将@EnableAutoConfiguration注解或者@SpringBootApplication注解添加到一个@Configuration类上来选择自动配置。</li>\n<li>如果发现应用了你不想要的特定自动配置类，你可以使用@EnableAutoConfiguration注解的排除属性来禁用它们。</li>\n</ul>\n<h3 id=\"ComponentScan\"><a href=\"#ComponentScan\" class=\"headerlink\" title=\"@ComponentScan\"></a>@ComponentScan</h3><ul>\n<li>如果某个类加上@ComponentScan注解，则该类会自动发现扫描组件。</li>\n<li>也就是说，如果扫描到有@Component、@Controller、@Service等这些注解的类，并注册为Bean，可以自动收集所有的Spring组件，包括@Configuration类。</li>\n<li>我们经常使用@ComponentScan注解搜索beans，并结合@Autowired注解导入。如果没有配置的话，SpringBoot会扫描启动类所在包下以及子包下的使用了@Component、@Controller、@Service、@Repository等注解的类。</li>\n</ul>\n<h3 id=\"Controller\"><a href=\"#Controller\" class=\"headerlink\" title=\"@Controller\"></a>@Controller</h3><ul>\n<li>@Controller注解用于定义控制器类，在SpringBoot中由控制器负责将用户发来的URL请求转发到对应的服务接口(Controller层)。</li>\n<li>一般这个注解用在类上，控制器方法需要加上@RequestMapping注解。</li>\n</ul>\n<h3 id=\"ResponseBody\"><a href=\"#ResponseBody\" class=\"headerlink\" title=\"@ResponseBody\"></a>@ResponseBody</h3><ul>\n<li>如果控制器方法加上@ResponseBody注解，该方法的返回结果将直接写入HTTP response body中，一般在异步获取数据时使用，用于构建RESTful的api。</li>\n<li>在使用@RequestMapping后，返回值通常解析为跳转路径，加上@esponsebody后返回结果不会被解析为跳转路径，而是直接写入HTTP response body中。</li>\n<li>比如异步获取json数据，加上@Responsebody后，会直接返回json数据。该注解一般会配合@RequestMapping一起使用。</li>\n</ul>\n<h3 id=\"RestController\"><a href=\"#RestController\" class=\"headerlink\" title=\"@RestController\"></a>@RestController</h3><ul>\n<li>@RestController注解是@Controller和@ResponseBody的合集。</li>\n<li>使用在类上，表示该类是控制器，并且类中所有控制器方法的返回值直接填入HTTP响应体中，是RESTful风格的控制器，控制器方法返回JSON数据。</li>\n</ul>\n<h3 id=\"RequestMapping\"><a href=\"#RequestMapping\" class=\"headerlink\" title=\"@RequestMapping\"></a>@RequestMapping</h3><ul>\n<li>提供路由信息，负责URL到Controller中的具体方法的映射。</li>\n</ul>\n<h3 id=\"Import\"><a href=\"#Import\" class=\"headerlink\" title=\"@Import\"></a>@Import</h3><ul>\n<li>用来导入其他配置类（加了@Configuration注解的类）。</li>\n</ul>\n<h3 id=\"ImportResource\"><a href=\"#ImportResource\" class=\"headerlink\" title=\"@ImportResource\"></a>@ImportResource</h3><ul>\n<li>用来加载xml配置文件。</li>\n</ul>\n<h3 id=\"PathVariable\"><a href=\"#PathVariable\" class=\"headerlink\" title=\"@PathVariable\"></a>@PathVariable</h3><ul>\n<li>获取URL上的参数（Restful风格接口）。</li>\n</ul>\n<h3 id=\"Service\"><a href=\"#Service\" class=\"headerlink\" title=\"@Service\"></a>@Service</h3><ul>\n<li>一般用于修饰service层的组件</li>\n</ul>\n<h3 id=\"Repository\"><a href=\"#Repository\" class=\"headerlink\" title=\"@Repository\"></a>@Repository</h3><ul>\n<li>使用@Repository注解可以确保DAO或者repositories提供异常转译，这个注解修饰的DAO或者repositories类会被ComponetScan发现并配置，同时也不需要为它们提供XML配置项。</li>\n</ul>\n<h3 id=\"Bean\"><a href=\"#Bean\" class=\"headerlink\" title=\"@Bean\"></a>@Bean</h3><ul>\n<li>用@Bean标注方法等价于XML中配置的bean，意思是产生一个bean，并交给SpringBoot管理。</li>\n</ul>\n<h3 id=\"Value\"><a href=\"#Value\" class=\"headerlink\" title=\"@Value\"></a>@Value</h3><ul>\n<li>注入SpringBoot中的配置文件——application.properties配置的属性的值。</li>\n</ul>\n<h3 id=\"Inject\"><a href=\"#Inject\" class=\"headerlink\" title=\"@Inject\"></a>@Inject</h3><ul>\n<li>等价于默认的@Autowired，只是没有required属性。</li>\n</ul>\n<h3 id=\"Component\"><a href=\"#Component\" class=\"headerlink\" title=\"@Component\"></a>@Component</h3><ul>\n<li>泛指组件，当组件不好归类的时候，我们可以使用这个注解进行标注。</li>\n</ul>\n<h3 id=\"AutoWired\"><a href=\"#AutoWired\" class=\"headerlink\" title=\"@AutoWired\"></a>@AutoWired</h3><ul>\n<li>自动导入依赖的bean。byType方式。把配置好的Bean拿来用，完成属性、方法的组装，它可以对类成员变量、方法及构造函数进行标注，完成自动装配的工作。当加上（required=false）时，就算找不到bean也不报错。</li>\n</ul>\n<h3 id=\"Qualifier\"><a href=\"#Qualifier\" class=\"headerlink\" title=\"@Qualifier\"></a>@Qualifier</h3><ul>\n<li>当有多个同一类型的Bean时，可以用@Qualifier(“name”)来指定。与@Autowired配合使用。@Qualifier限定描述符除了能根据名字进行注入，但能进行更细粒度的控制如何选择候选者。</li>\n</ul>\n<h3 id=\"Resource-name-”name”-type-”type”\"><a href=\"#Resource-name-”name”-type-”type”\" class=\"headerlink\" title=\"@Resource(name=”name”,type=”type”)\"></a>@Resource(name=”name”,type=”type”)</h3><ul>\n<li>没有括号内内容的话，默认byName。与@Autowired干类似的事。</li>\n</ul>\n<h2 id=\"附页\"><a href=\"#附页\" class=\"headerlink\" title=\"附页\"></a>附页</h2><table>\n<thead>\n<tr>\n<th>注解</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>@Component</td>\n<td>最普通的组件，可以被注入到spring容器进行管理</td>\n</tr>\n<tr>\n<td>@Repository</td>\n<td>作用于持久层</td>\n</tr>\n<tr>\n<td>@Service</td>\n<td>作用于业务逻辑层</td>\n</tr>\n<tr>\n<td>@Controller</td>\n<td>作用于表现层（spring-mvc的注解）</td>\n</tr>\n</tbody></table>\n<p>这几个注解几乎可以说是一样的：因为被这些注解修饰的类就会被Spring扫描到并注入到Spring的bean容器中。</p>\n<p>@Autowired是根据<strong>类型</strong>进行自动装配的，如果找到多个类型相同的，会按照名称进行匹配，如果名称相同，会报错，如果需要按指定名称进行装配，则需要配合@Qualifier；</p>\n<p>@Inject是根据<strong>类型</strong>进行自动装配的，如果需要按名称进行装配，则需要配合@Named；</p>\n<p>@Resource是根据<strong>名称</strong>进行自动装配的，一般会指定一个name属性</p>\n<p><strong>总结:</strong></p>\n<p>1、@Autowired是spring自带的，@Inject是JSR330规范实现的，@Resource是JSR250规范实现的，需要导入不同的包</p>\n<p>2、@Autowired、@Inject用法基本一样，不同的是@Autowired有一个request属性</p>\n<p>3、@Autowired、@Inject是默认按照类型匹配的，@Resource是按照名称匹配的</p>\n<p>4、@Autowired如果需要按照名称匹配需要和@Qualifier一起使用，@Inject和@Name一起使用</p>\n</blockquote>\n","categories":["面试"],"tags":["面试","Springboot"]},{"title":"Springboot面试(2)","url":"/2022/07/02/Springboot%E9%9D%A2%E8%AF%95(2)/","content":"<h2 id=\"springboot-2\"><a href=\"#springboot-2\" class=\"headerlink\" title=\"springboot(2)\"></a>springboot(2)</h2><h3 id=\"1-Spring-boot的核心配置文件是什么\"><a href=\"#1-Spring-boot的核心配置文件是什么\" class=\"headerlink\" title=\"1.Spring boot的核心配置文件是什么\"></a>1.Spring boot的核心配置文件是什么</h3><blockquote>\n<p>Spring Boot 的核心配置文件是 application 和 bootstrap 配置文件。</p>\n<p>bootstrap 配置文件是系统级别的，用来加载外部配置，如配置中心的配置信息，也可以用来定义系统不会变化的属性.bootstatp 文件的加载先于application文件<br>application 配置文件是应用级别的，是当前应用的配置文件</p>\n</blockquote>\n<h3 id=\"2-如何使用jwt进行登录校验\"><a href=\"#2-如何使用jwt进行登录校验\" class=\"headerlink\" title=\"2.如何使用jwt进行登录校验\"></a>2.如何使用jwt进行登录校验</h3><blockquote>\n<p>（1）<strong>客户端登录成功后（必须是在登陆成功才行，与session一样的前提条件）</strong>，服务器会根据用户名和签名以及其他信息加密生成唯一的token串，用来区分他们，不需要存入服务端的缓存中，但会把这个token返回给相应的主机，</p>\n<p>（2）主机收到token后会存入cookie或者localStorage中，以后主机的每一次发送其他类型的请求的操作都会携带这个token，</p>\n<p>（3）服务器会将客户端发来的这个token和服务端从数据库查询出来的并且重新计算得到的用户信息进行对比，如果匹配，则<strong>认证成功</strong>，如果用户请求的资源需要相应的权限，则校验token中的payload中存储的权限等相关信息，如果有权限则返回给对应主机所需要的资源（<strong>即做到了权限鉴权</strong>），否则拒绝</p>\n<p><code>用的依赖是java-jwt，用的包是auth0.jwt</code></p>\n</blockquote>\n<h3 id=\"3-生成的token在服务端有哪些存储方案\"><a href=\"#3-生成的token在服务端有哪些存储方案\" class=\"headerlink\" title=\"3.生成的token在服务端有哪些存储方案\"></a>3.生成的token在服务端有哪些存储方案</h3><blockquote>\n<p>（1）保存在redis，最常用，也是分布式下的验证token的解决方案，</p>\n<p>（2）数据库存储，性能比redis稍差，速度稍慢</p>\n<p>（3）不做保存，下次验证的时候直接用jwt.decode验证(服务端为express)，存储的压力给到了客户端，但是每次从客户端传到服务器端的数据量会稍微大一些</p>\n</blockquote>\n","categories":["面试"],"tags":["面试","Springboot"]},{"title":"gitlab自动部署","url":"/2022/09/03/gitlab%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/","content":"<p>本文是关于GItlab CI/CD的自动部署方案</p>\n<h3 id=\"GitLabCI-CD工作原理\"><a href=\"#GitLabCI-CD工作原理\" class=\"headerlink\" title=\"GitLabCI/CD工作原理\"></a>GitLabCI/CD工作原理</h3><blockquote>\n<ul>\n<li>将代码托管到Git存储库</li>\n<li>在项目根目录创建ci文件.gitlab-ci.yml,在文件中指定构建、测试和部署脚本</li>\n<li>GitLab将检测到它并使用名为GitLab Runner的工具运行脚本</li>\n<li>脚本被分组为作业，它们共同组成一个管道 </li>\n</ul>\n<p>运行效果:</p>\n<p><img src=\"/2022/09/03/gitlab%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/image-20220904095646489.png\" alt=\"image-20220904095646489\"></p>\n</blockquote>\n<h3 id=\"首先什么我们要知道Gitlab是什么\"><a href=\"#首先什么我们要知道Gitlab是什么\" class=\"headerlink\" title=\"首先什么我们要知道Gitlab是什么\"></a>首先什么我们要知道Gitlab是什么</h3><blockquote>\n<p>是一种类似github的服务，组织可以使用它来提供git存储库的内部管理。 它是一个自我托管的Git-repository管理系统，可以保持用户代码的私密性，并且可以轻松地部署代码的更改。</p>\n</blockquote>\n<h3 id=\"GitLab安装\"><a href=\"#GitLab安装\" class=\"headerlink\" title=\"GitLab安装\"></a>GitLab安装</h3><blockquote>\n<ul>\n<li>检查配置</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">The following is the recommended minimum CPU hardware guidance for a handful of example GitLab user base sizes.</span><br><span class=\"line\"></span><br><span class=\"line\">4 cores is the recommended minimum number of cores and supports up to 500 users</span><br><span class=\"line\">8 cores supports up to 1000 users</span><br><span class=\"line\"></span><br><span class=\"line\">The following is the recommended minimum Memory hardware guidance for a handful of example GitLab user base sizes.</span><br><span class=\"line\"></span><br><span class=\"line\">4GB RAM is the required minimum memory size and supports up to 500 users</span><br><span class=\"line\">8GB RAM supports up to 1000 users</span><br><span class=\"line\"></span><br><span class=\"line\">一般来说，两核八GB就够用了</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">查询cpu指令</span><br><span class=\"line\">cat /proc/cpuinfo</span><br><span class=\"line\">查询内存指令</span><br><span class=\"line\">cat /proc/meminfo</span><br><span class=\"line\">查询Linux内核版本</span><br><span class=\"line\">cat /proc/version</span><br><span class=\"line\">友情提示：如果是一核两G不用试了</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用rpm包安装</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/e17/gitlab-ce-15.3.2-ce.0.el7.x86_64.rpm</span><br><span class=\"line\">rpm -ivh gitlab-ce-15.3.2-ce.0.el7.x86_64.rpm</span><br><span class=\"line\"></span><br><span class=\"line\">vim /etc/gitlab.rb #编辑站点地址</span><br><span class=\"line\"></span><br><span class=\"line\">gitlab-ctl reconfigure #配置</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt;</span><span class=\"language-bash\">启动</span></span><br><span class=\"line\">gitlab-ctl start</span><br><span class=\"line\">状态</span><br><span class=\"line\">gitlab-ctl status</span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;</span><span class=\"language-bash\">停止</span></span><br><span class=\"line\">gitlab-ctl stop</span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;</span><span class=\"language-bash\">重启</span></span><br><span class=\"line\">gitlab-ctl restart</span><br></pre></td></tr></table></figure>\n\n<p>另外docker安装和kubernetes安装就不赘述了</p>\n</blockquote>\n<h3 id=\"GitLab-Runner介绍相关\"><a href=\"#GitLab-Runner介绍相关\" class=\"headerlink\" title=\"GitLab Runner介绍相关\"></a>GitLab Runner介绍相关</h3><blockquote>\n<h3 id=\"GitLab-Runner简介\"><a href=\"#GitLab-Runner简介\" class=\"headerlink\" title=\"GitLab Runner简介:\"></a>GitLab Runner简介:</h3><ul>\n<li>GitLab Runner是一个开源项目，用于运行作业并将结果发送GitLab</li>\n<li>与GitLabCI结合使用，GitLabCI是GitLab随附的用于协调作业的开源持续集成服务</li>\n<li>GitLab Runner是用Go编写的，可以在Linux,macOS和Windos操作系统上运行</li>\n<li>容器部署需使用最新Docker版本。</li>\n<li>可以根据配置需要配置任意数量的Runner</li>\n</ul>\n<h3 id=\"Runner特点\"><a href=\"#Runner特点\" class=\"headerlink\" title=\"Runner特点:\"></a>Runner特点:</h3><ul>\n<li><p>作业运行控制：同时执行多个作业</p>\n</li>\n<li><p>作业运行环境:</p>\n<ol>\n<li>在本地、使用Docker容器、使用Docker容器并通过SSH执行作业</li>\n<li>使用Docker容器在不同的云和虚拟化管理程序上自动缩放</li>\n<li>连接到远程SSH服务器</li>\n</ol>\n</li>\n<li><p>自动重新加载配置，无需重启</p>\n</li>\n<li><p>易于安装，可作为Linux,macOS和Windos的服务</p>\n</li>\n</ul>\n<h3 id=\"GitLab-Runner类型与状态\"><a href=\"#GitLab-Runner类型与状态\" class=\"headerlink\" title=\"GitLab Runner类型与状态\"></a>GitLab Runner类型与状态</h3><ul>\n<li>类型:<ul>\n<li>shared 共享类型,运行整个平台项目的作业</li>\n<li>group项目组类型，运行特定group下所有项目的作业</li>\n<li>specific项目类型，运行指定的项目作业</li>\n</ul>\n</li>\n<li>状态<ul>\n<li>locked：锁定状态，无法运行项目作业</li>\n<li>paused：暂停状态，暂时不会接受新的作业</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/2022/09/03/gitlab%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/image-20220903215422460.png\" alt=\"image-20220903215422460\"></p>\n</blockquote>\n<h3 id=\"GitLab-Runner安装相关\"><a href=\"#GitLab-Runner安装相关\" class=\"headerlink\" title=\"GitLab Runner安装相关\"></a>GitLab Runner安装相关</h3><blockquote>\n<p>包管理工具</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">Add the official GitLab repository 添加官方仓库</span><br><span class=\"line\">curl -L &quot;https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.rpm.sh&quot; | sudo bash</span><br><span class=\"line\"></span><br><span class=\"line\">Install the latest version of GitLab Runner, or skip to the next step to install a specific version 安装最新版本或者下一步</span><br><span class=\"line\">sudo yum install gitlab-runner</span><br><span class=\"line\"></span><br><span class=\"line\">To install a specific version of GitLab Runner:安装指定版本</span><br><span class=\"line\">yum list gitlab-runner --showduplicates | sort -r</span><br><span class=\"line\">sudo yum install gitlab-runner-10.0.0-1</span><br><span class=\"line\"></span><br><span class=\"line\">更新runner</span><br><span class=\"line\">sudo yum update</span><br><span class=\"line\">sudo yum install gitlab-runner</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h3 id=\"GitLab-Runner注册\"><a href=\"#GitLab-Runner注册\" class=\"headerlink\" title=\"GitLab Runner注册\"></a>GitLab Runner注册</h3><blockquote>\n<p>获取shared类型runnertoken</p>\n<p>进入系统设置-&gt;Runners</p>\n<p><img src=\"/2022/09/03/gitlab%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/image-20220904160532695.png\" alt=\"image-20220904160532695\"></p>\n<p>同理也可以找到对应得group CI/CD Runner和单项目得CI/CD Runner</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">/usr/local/bin/gitlab-runner register --locked=&quot;false&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">向GitLab-CI注册一个Runner需要两样东西：</span></span><br><span class=\"line\">GitLab-CI的url和注册token。 其中，token是为了确定你这个Runner是所有工程都能够使用的Shared Runner还是具体某一个工程才能使用的Specific Runner。 如果要注册Shared Runner，你需要到管理界面的Runners页面里面去找注册token。如下图所示</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2022/09/03/gitlab%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/image-20220903215549856.png\" alt=\"image-20220903215549856\"></p>\n<p>GitLab CI/CD支持的执行器有很多种，最常用的是Docker， shell，Kubernets三种。</p>\n<p>Shell 是最易于配置的执行器。构建中所需的依赖得你手工装在 Runner 所在机器上。</p>\n<p>更好的方式是使用 Docker，它让你拥有干净的构建环境，以及简易的依赖管理——所有的编译项目所需的依赖都可以放进 Docker 镜像中。Docker 执行器很容易就能创建带有依赖服务的编译环境，比如 MySQL。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run --rm -v v/gitlab-runner/config:/etc/gitlab-runner gitlab/gitlab-runner register \\</span><br><span class=\"line\">  --non-interactive \\</span><br><span class=\"line\">  --executor &quot;docker&quot; \\</span><br><span class=\"line\">  --docker-image alpine:latest \\</span><br><span class=\"line\">  --url &quot;url&quot; \\\t\t\t\t# 网页端域名 </span><br><span class=\"line\">  --registration-token &quot;token&quot; \\\t\t# gitlab提供的token</span><br><span class=\"line\">  --description &quot;first-register-runner&quot; \\</span><br><span class=\"line\">  --tag-list &quot;test-cicd1,dockercicd1&quot; \\</span><br><span class=\"line\">  --run-untagged=&quot;true&quot; \\</span><br><span class=\"line\">  --locked=&quot;false&quot; \\</span><br><span class=\"line\">  --access-level=&quot;not_protected&quot;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h3 id=\"gitlab-ci-yml文件\"><a href=\"#gitlab-ci-yml文件\" class=\"headerlink\" title=\".gitlab-ci.yml文件\"></a>.gitlab-ci.yml文件</h3><blockquote>\n<p>如何检查你的yml文件是否符合,可以用CI Lint</p>\n<p><img src=\"/2022/09/03/gitlab%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/image-20220904164146671-16623544839293.png\" alt=\"image-20220904164146671\"></p>\n</blockquote>\n<h2 id=\"Pipeline语法\"><a href=\"#Pipeline语法\" class=\"headerlink\" title=\"Pipeline语法\"></a>Pipeline语法</h2><h3 id=\"1-Job\"><a href=\"#1-Job\" class=\"headerlink\" title=\"1.Job\"></a>1.Job</h3><blockquote>\n<p>在.gitlab-ci.yml的文件中，可以定义一个或多个作业（job）。每个作业必须具有唯一的名称（不能使用关键字），每个作业是独立执行。作业定义了在约束条件下进行相关操作，每一个作业至少要包含至少一个script</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">job1:</span></span><br><span class=\"line\">  <span class=\"attr\">script:</span> <span class=\"string\">&quot;execute-script-for-job1&quot;</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n<h3 id=\"2-script\"><a href=\"#2-script\" class=\"headerlink\" title=\"2.script\"></a>2.script</h3><blockquote>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">job:</span></span><br><span class=\"line\">  <span class=\"attr\">script:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">uname</span> <span class=\"string\">-a</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">bundle</span> <span class=\"string\">exec</span> <span class=\"string\">rspec</span></span><br></pre></td></tr></table></figure>\n\n<p>有时，script命令将需要用单引号或双引号引起来。例如，包含冒号命令(:)需要加引号，以便被包裹的YAML解析器知道来解释整个事情作为一个字符串，而不是一个”键:值”对.使用特殊字符时要小心<code>:</code> ,<code>&#123;</code>,<code>&#125;</code>,<code>[</code>,<code>]</code>, <code>,</code> 等等</p>\n</blockquote>\n<h3 id=\"3-before-script\"><a href=\"#3-before-script\" class=\"headerlink\" title=\"3.before_script\"></a>3.before_script</h3><blockquote>\n<p>跟script差不多，只不过在作业之前运行，如果失败则整个任务失败，作业失败不会影响after_sciprt</p>\n</blockquote>\n<h3 id=\"4-stages\"><a href=\"#4-stages\" class=\"headerlink\" title=\"4.stages\"></a>4.stages</h3><blockquote>\n<p>用于定义作业可以使用的阶段，并且是全局定义的。同一阶段的作业并行运行，不同阶段按顺序执行</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">stages:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">build</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">test</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">codescan</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">deploy</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n<h3 id=\"5-pre-amp-post\"><a href=\"#5-pre-amp-post\" class=\"headerlink\" title=\"5. .pre&amp;.post\"></a>5. .pre&amp;.post</h3><blockquote>\n<p>.pre始终是整个管道的第一个运行阶段, .post始终是整个管道的最后一个运行阶段。用户定义的阶段都在两者之间运行。.pre和.post的顺序无法更改。如果管道仅包含.pre或.post阶段的作业，则不会创建管道</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">codescan:</span></span><br><span class=\"line\">  <span class=\"attr\">stage:</span> <span class=\"string\">.pre</span></span><br><span class=\"line\">  <span class=\"attr\">tags:</span></span><br><span class=\"line\">  \t<span class=\"bullet\">-</span> <span class=\"string\">build</span></span><br><span class=\"line\">  <span class=\"attr\">only:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">master</span></span><br><span class=\"line\">  <span class=\"attr\">script:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">echo</span> <span class=\"string\">&quot;codescan&quot;</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n<h3 id=\"6-tags-指定runner\"><a href=\"#6-tags-指定runner\" class=\"headerlink\" title=\"6.tags(指定runner)\"></a>6.tags(指定runner)</h3><blockquote>\n<p>用于从允许运行该项目的所有Runner列表中选择特定的Runner，在Runner注册期间，您可以指定Runner标签</p>\n</blockquote>\n<h3 id=\"7-allow-failure允许失败\"><a href=\"#7-allow-failure允许失败\" class=\"headerlink\" title=\"7.allow_failure允许失败\"></a>7.allow_failure允许失败</h3><blockquote>\n<p>allow_failure允许作业失败，默认值为false。启用后，如果作业失败，将会在用户界面中显示橙色警告。但是，管道的逻辑流程将认为作业成功/通过，并且不会阻塞。假设所有其他作业均成功，则该作业的阶段及其管道将显示相同的橙色警告。但是，关联的提交将被标记”通过”,而不会发出警告。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">job:</span></span><br><span class=\"line\">  <span class=\"attr\">stage:</span> <span class=\"string\">test</span></span><br><span class=\"line\">  <span class=\"attr\">script:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">execute</span></span><br><span class=\"line\">  <span class=\"attr\">allow_failure:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n<h3 id><a href=\"#\" class=\"headerlink\" title></a></h3><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">variables:</span></span><br><span class=\"line\">  <span class=\"attr\">MAVEN_CLI_OPTS:</span> <span class=\"string\">&quot;--batch-mode --errors --fail-at-end --show-version -s .m2/settings.xml&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">MAVEN_OPTS:</span> <span class=\"string\">&quot;-Dmaven.repo.local=.m2/repository&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">PACKAGE_NAME:</span> <span class=\"string\">&quot;certificate.jar&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">PACKAGE_BACK_NAME:</span> <span class=\"string\">&quot;certificateBack.jar&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">PROD_ENV_1:</span> <span class=\"string\">&quot;10.166.41.101&quot;</span></span><br><span class=\"line\"><span class=\"attr\">image:</span> <span class=\"string\">maven:3.8.1-openjdk-11</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">stages:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">build</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">deploy</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">cache:</span></span><br><span class=\"line\">  <span class=\"attr\">key:</span> <span class=\"string\">$&#123;CI_COMMIT_REF_SLUG&#125;</span></span><br><span class=\"line\">  <span class=\"attr\">paths:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">.m2/repository</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">sacc/target/</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">build:</span></span><br><span class=\"line\">  <span class=\"attr\">stage:</span> <span class=\"string\">build</span></span><br><span class=\"line\">  <span class=\"attr\">script:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;cd sacc&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;mvn $MAVEN_CLI_OPTS package -Dmaven.test.skip=true -Pprod&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;ls -al&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;ls -al target&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">only:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">master</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">deploy-prod:</span></span><br><span class=\"line\">  <span class=\"attr\">stage:</span> <span class=\"string\">deploy</span></span><br><span class=\"line\">  <span class=\"attr\">script:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;mkdir -p ~/.ssh &amp;&amp; chmod 700 ~/.ssh/&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;echo &quot;$SSH_PRIVATE_KEY&quot; &gt;&gt; ./id_rsa &amp;&amp; chmod 600 ./id_rsa&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;echo -e &quot;Host *\\n\\tStrictHostKeyChecking no\\n\\n&quot; &gt; ~/.ssh/config&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;ls -al sacc/target&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;ssh -i ./id_rsa root@$PROD_ENV_1 &quot;yum install net-tools&quot;&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;ssh -i ./id_rsa root@$PROD_ENV_1 &quot;/bin/cp -rf /opt/webapps/certificate/$PACKAGE_NAME \\&quot;/opt/webapps/certificate/$PACKAGE_NAME.$(date +\\&quot;%y%m%d\\&quot;)\\&quot;&quot;&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;scp -i ./id_rsa -r sacc/target/$PACKAGE_NAME root@$PROD_ENV_1:/opt/webapps/certificate/$PACKAGE_NAME&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;ssh -i ./id_rsa root@$PROD_ENV_1 &quot;cp /dev/null /opt/webapps/certificate/nohup.out&quot;&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&quot;ssh -i ./id_rsa root@$PROD_ENV_1 \\&quot;pkill -f certificate.jar\\&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;ssh -i ./id_rsa root@$PROD_ENV_1 &quot;nohup java -jar /opt/webapps/certificate/certificate.jar &amp;&gt; /opt/webapps/certificate/nohup.out &amp;&quot;&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">only:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">master</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","categories":["面试"],"tags":["面试","运维"]},{"title":"jdk动态代理和cglib动态代理","url":"/2022/08/28/jdk%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E5%92%8Ccgib%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/","content":"<h2 id=\"两者有何区别\"><a href=\"#两者有何区别\" class=\"headerlink\" title=\"两者有何区别\"></a>两者有何区别</h2><p>1、<strong>Jdk动态代理</strong>：利用拦截器（必须实现InvocationHandler接口）加上<strong>反射机制</strong>生成一个代理接口的匿名类，在调用具体方法前调用InvokeHandler来处理</p>\n<blockquote>\n<p>JDK动态代理主要是通过，反射包中的Porxy类和InvokationHandler接口。它们结合在一起后可以创建动态代理类。Porxy类基于传递的参数创建动态代理类。InvokationHandler则用于激发动态代理类的方法。这个过程是在程序执行过程中动态生成与处理的，所以叫动态代理。</p>\n</blockquote>\n<p>2、 <strong>Cglib动态代理</strong>：利用ASM框架，对代理对象类生成的class文件加载进来，通过<strong>修改其字节码生成子类来进行代理</strong></p>\n<p><strong>所以：</strong></p>\n<ul>\n<li><strong>如果想要实现JDK动态代理那么代理类必须实现接口，否则不能使用;</strong></li>\n<li><strong>如果想要使用CGlib动态代理，那么代理类不能使用final修饰类和方法；</strong></li>\n</ul>\n<p>还有： 在jdk6、jdk7、jdk8逐步对JDK动态代理优化之后，在调用次数较少的情况下，JDK代理效率高于CGLIB代理效率，只有当进行大量调用的时候，jdk6和jdk7比CGLIB代理效率低一点，但是到jdk8的时候，jdk代理效率高于CGLIB代理。</p>\n<h3 id><a href=\"#\" class=\"headerlink\" title></a></h3><h2 id=\"JDk动态代理例子\"><a href=\"#JDk动态代理例子\" class=\"headerlink\" title=\"JDk动态代理例子\"></a>JDk动态代理例子</h2><blockquote>\n<p><strong>UserService接口</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">UserService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">addUser</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">updateUser</span><span class=\"params\">(String str)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>UserServiceImpl实现类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">UserService</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addUser</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;添加用户&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">updateUser</span><span class=\"params\">(String str)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;更新用户信息&quot;</span> + str);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>UserProxy代理类，实现InvocationHandler接口重写invoke方法</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserProxy</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">InvocationHandler</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Object target;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">UserProxy</span><span class=\"params\">(Object target)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.target = target;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">res</span> <span class=\"operator\">=</span> method.invoke(target, args);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;记录日志&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>test测试类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">test</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">UserServiceImpl</span> <span class=\"variable\">impl</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UserServiceImpl</span>();</span><br><span class=\"line\">        <span class=\"type\">UserProxy</span> <span class=\"variable\">userProxy</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UserProxy</span>(impl);</span><br><span class=\"line\">        <span class=\"type\">UserService</span> <span class=\"variable\">userService</span> <span class=\"operator\">=</span> (UserService) Proxy.newProxyInstance(impl.getClass().getClassLoader(),impl.getClass().getInterfaces(),userProxy);</span><br><span class=\"line\">        userService.addUser();</span><br><span class=\"line\">        userService.updateUser(<span class=\"string\">&quot;：我是滚韬&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2022/08/28/jdk%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E5%92%8Ccgib%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/image-20220828185237100.png\" alt=\"image-20220828185237100\"></p>\n</blockquote>\n<h2 id=\"CGLIB动态代理\"><a href=\"#CGLIB动态代理\" class=\"headerlink\" title=\"CGLIB动态代理\"></a>CGLIB动态代理</h2><blockquote>\n<p>首先要加入依赖</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;cglib&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;cglib&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;<span class=\"number\">3.3</span><span class=\"number\">.0</span>&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"具体类\"><a href=\"#具体类\" class=\"headerlink\" title=\"具体类\"></a>具体类</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Hello</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">sayHello</span><span class=\"params\">(<span class=\"type\">boolean</span> throwException)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;hello everyone!&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(throwException)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Exception</span>(<span class=\"string\">&quot;test exception&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;123&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"实现MethodInterceptor接口\"><a href=\"#实现MethodInterceptor接口\" class=\"headerlink\" title=\"实现MethodInterceptor接口\"></a>实现MethodInterceptor接口</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ProxyFactory</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">MethodInterceptor</span> &#123;</span><br><span class=\"line\">     <span class=\"comment\">//要代理的原始对象</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Object obj;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">createProxy</span><span class=\"params\">(Object target)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.obj = target;</span><br><span class=\"line\">        <span class=\"type\">Enhancer</span> <span class=\"variable\">enhancer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Enhancer</span>();</span><br><span class=\"line\">        enhancer.setSuperclass(<span class=\"built_in\">this</span>.obj.getClass());<span class=\"comment\">// 设置代理目标</span></span><br><span class=\"line\">        enhancer.setCallback(<span class=\"built_in\">this</span>);<span class=\"comment\">// 设置回调</span></span><br><span class=\"line\">        enhancer.setClassLoader(target.getClass().getClassLoader());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> enhancer.create();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">intercept</span><span class=\"params\">(Object obj, Method method, Object[] args, MethodProxy proxy)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 前置通知</span></span><br><span class=\"line\">            before();</span><br><span class=\"line\">            result = proxy.invokeSuper(obj, args);</span><br><span class=\"line\">            <span class=\"comment\">// 后置通知</span></span><br><span class=\"line\">            after();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            exception();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span>&#123;</span><br><span class=\"line\">            beforeReturning();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">before</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;before method invoke&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">after</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;after method invoke&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">exception</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;method invoke exception&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">beforeReturning</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;before returning&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"测试类\"><a href=\"#测试类\" class=\"headerlink\" title=\"测试类\"></a>测试类</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">EnhancerTest</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">Hello</span> <span class=\"variable\">hello</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Hello</span>();</span><br><span class=\"line\">        <span class=\"type\">ProxyFactory</span> <span class=\"variable\">cglibProxy</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ProxyFactory</span>();</span><br><span class=\"line\">        <span class=\"type\">Hello</span> <span class=\"variable\">proxy</span> <span class=\"operator\">=</span> (Hello) cglibProxy.createProxy(hello);</span><br><span class=\"line\">        String result=proxy.sayHello(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        System.out.println(result);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</blockquote>\n<h2 id=\"两个动态代理的使用场景是哪里\"><a href=\"#两个动态代理的使用场景是哪里\" class=\"headerlink\" title=\"两个动态代理的使用场景是哪里\"></a>两个动态代理的使用场景是哪里</h2><blockquote>\n<p>我们主要是在Spring Aop项目中去使用它们</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;<span class=\"meta\">@Override</span></span><br><span class=\"line\">&gt;<span class=\"keyword\">public</span> AopProxy <span class=\"title function_\">createAopProxy</span><span class=\"params\">(AdvisedSupport config)</span> <span class=\"keyword\">throws</span> AopConfigException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (config.isOptimize() || config.isProxyTargetClass() || hasNoUserSuppliedProxyInterfaces(config)) &#123;</span><br><span class=\"line\">     Class&lt;?&gt; targetClass = config.getTargetClass();</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (targetClass == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AopConfigException</span>(<span class=\"string\">&quot;TargetSource cannot determine target class: &quot;</span> +</span><br><span class=\"line\">              <span class=\"string\">&quot;Either an interface or a target is required for proxy creation.&quot;</span>);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"comment\">//如果</span></span><br><span class=\"line\">     <span class=\"keyword\">if</span> (targetClass.isInterface() || Proxy.isProxyClass(targetClass)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">JdkDynamicAopProxy</span>(config);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjenesisCglibAopProxy</span>(config);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">JdkDynamicAopProxy</span>(config);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&gt;&#125;</span><br><span class=\"line\">&gt;<span class=\"number\">1</span>、如果目标对象实现了接口，默认情况下会采用JDK的动态代理</span><br><span class=\"line\">&gt;<span class=\"number\">2</span>、如果目标对象实现了接口，也可以强制使用CGLIB</span><br><span class=\"line\">&gt;<span class=\"number\">3</span>、如果目标对象没有实现了接口，必须采用CGLIB库，spring会自动在JDK动态代理和CGLIB之间转换</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"如果需要强制使用CGLIB来实现AOP，需要配置spring-aop-proxy-target-class-true或-EnableAspectJAutoProxy-proxyTargetClass-true\"><a href=\"#如果需要强制使用CGLIB来实现AOP，需要配置spring-aop-proxy-target-class-true或-EnableAspectJAutoProxy-proxyTargetClass-true\" class=\"headerlink\" title=\"如果需要强制使用CGLIB来实现AOP，需要配置spring.aop.proxy-target-class=true或**@EnableAspectJAutoProxy(proxyTargetClass = true**\"></a>如果需要强制使用CGLIB来实现AOP，需要配置<strong>spring.aop.proxy-target-class=true</strong>或**@EnableAspectJAutoProxy(proxyTargetClass = true**</h4></blockquote>\n<h2 id=\"补充-Porxy类\"><a href=\"#补充-Porxy类\" class=\"headerlink\" title=\"(补充)Porxy类\"></a>(补充)Porxy类</h2><p>Porxy类提供了一个静态方法创建动态代理类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object <span class=\"title function_\">newProxyInstance</span><span class=\"params\">(ClassLoader loader,           </span></span><br><span class=\"line\"><span class=\"params\">    Class&lt;?&gt;[] interfaces,                                      </span></span><br><span class=\"line\"><span class=\"params\">    InvocationHandler h)</span></span><br><span class=\"line\"><span class=\"keyword\">throws</span> IllegalArgumentException</span><br></pre></td></tr></table></figure>\n\n<p>1、ClassLoader：</p>\n<blockquote>\n<p>ClassLoader会定义动态代理类，ClassLoader可以通过类或者接口获得，如果我们想通过接口获得，调用方法如下。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Task.class.getClassLoader()</span><br></pre></td></tr></table></figure>\n\n<p>如果通过类来获得，加入我们有一个类TaskImpl实现了Task接口，我们有个TaskImpl的对象ob，然后ClassLoader获取方法如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">ob.getClassLoader()</span><br></pre></td></tr></table></figure>\n\n<p>2、 Class&lt;?&gt;[] interfaces：动态代理类需要实现的接口</p>\n<p>3、InvocationHandler：传递一个实现了InvokationHandler接口的类的实例</p>\n<blockquote>\n<p>InvokationHandler是Java 反射包里面的一个接口。InvokationHandler通过用户类来实现，来激发一个动态代理类的方法。它只有一个方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;<span class=\"keyword\">public</span> Object <span class=\"title function_\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span>    <span class=\"keyword\">throws</span> Throwable;</span><br></pre></td></tr></table></figure>\n\n<p>1、Object：实现方法的代理对象 </p>\n<p>2、Method：代理实例激发的方法，Porxy参数中的接口方法 </p>\n<p>3、Object[]：传递给方法的一系列参数</p>\n</blockquote>\n","categories":["Java"],"tags":["Java","面试","动态代理"]},{"title":"Jvm面试","url":"/2022/06/12/jvm%E9%9D%A2%E8%AF%95/","content":"<h2 id=\"jvm\"><a href=\"#jvm\" class=\"headerlink\" title=\"jvm\"></a>jvm</h2><h3 id=\"1-JVM运行时划分哪几个区域？哪些区域是线程共享的？哪些区域是线程独占的？\"><a href=\"#1-JVM运行时划分哪几个区域？哪些区域是线程共享的？哪些区域是线程独占的？\" class=\"headerlink\" title=\"1.JVM运行时划分哪几个区域？哪些区域是线程共享的？哪些区域是线程独占的？\"></a>1.<strong>JVM运行时划分哪几个区域？哪些区域是线程共享的？哪些区域是线程独占的？</strong></h3><blockquote>\n<p>JVM运行时一共划分：程序计数器、虚拟机栈、堆、本地方法栈、方法区。</p>\n<p>线程共享的数据区域：堆、方法区。</p>\n<p>线程独享的数据区域区域：程序计数器、虚拟机栈、本地方法栈。</p>\n<h3 id=\"连问（1）这几个内存区域分别存放什么数据？\"><a href=\"#连问（1）这几个内存区域分别存放什么数据？\" class=\"headerlink\" title=\"连问（1）这几个内存区域分别存放什么数据？\"></a>连问（1）<strong>这几个内存区域分别存放什么数据？</strong></h3><blockquote>\n<p><strong>程序计数器</strong>: 记录当前线程执行的位置</p>\n<p><strong>虚拟机栈</strong>: 存储基本数据类型以及对象的引用等</p>\n<p><strong>堆</strong>: 存储对象实例</p>\n<p><strong>本地方法栈</strong>: 与虚拟机栈类似，它为Native方法服务</p>\n<p><strong>方法区</strong>: 存储被JVM加载的类信息、常量、静态变量等。</p>\n</blockquote>\n</blockquote>\n<h3 id=\"2-JVM内存怎么分配的\"><a href=\"#2-JVM内存怎么分配的\" class=\"headerlink\" title=\"2.JVM内存怎么分配的\"></a>2.JVM内存怎么分配的</h3><blockquote>\n<p>方法区:</p>\n<p>有时候也称为永久代（Permanent Generation）</p>\n<p><em><strong>注意: 在Java8中，永久代已经被移除，被一个称为“元数据区”(元空间)的区域所取代。</strong></em> </p>\n<p><em><strong>方法区和永久代的关系很像Java中接口和类的关系，类实现了接口，而永久代就是HotSpot虚拟机对虚拟机规范中方法区的一种实现方式。</strong></em></p>\n<blockquote>\n<p>在方法区中，存储了每个类的信息（包括类的名称、修饰符、方法信息、字段信息）、类中静态变量、类中定义为final类型的常量、类中的Field信息、类中的方法信息以及编译器编译后的代码等。当开发人员在程序中通过Class对象中的getName、isInterface等方法来获取信息时，这些数据都来源于方法区域，同时方法区域也是全局共享的，在一定的条件下它也会被GC，在这里进行的GC主要是方法区里的常量池和类型的卸载。当方法区域需要使用的内存超过其允许的大小时，会抛出OutOfMemory的错误信息。</p>\n<p>在方法区中有一个非常重要的部分就是运行时常量池，用于存放静态编译产生的字面量和符号引用。运行时生成的常量也会存在这个常量池中，比如String的intern方法。它是每一个类或接口的常量池的运行时表示形式，在类和接口被加载到JVM后，对应的运行时常量池就被创建出来。</p>\n</blockquote>\n<p>JVM堆分代</p>\n<blockquote>\n<p>1、JVM堆被分为了年轻代和老年代。年轻代的GC过程称为Yong GC，速度快较频繁。老年代的GC过程称为Full GC，速度较慢应该尽量避免。</p>\n<p>2、对象被创建后，除了少部分大对象会在老年代分配内存外，大部分的对象首先都是在年轻代进行内存分配，而且大部分的对象都是“朝生夕死”，很快就会被年轻代的Yong GC回收掉。</p>\n<p>3、老年代的内存空间一般会比年轻代的内存空间大，能存放的对象多，老年代的空间不足后会进行Full GC操作，比Yong GC耗时，所以应尽量避免频繁的Full GC操作。</p>\n</blockquote>\n<p>年轻代的分区</p>\n<blockquote>\n<p>1、年轻代中分为一个Eden区和两个Surviver区，比例为8：1：1，两个Surviver区分别称为“From”区和“To”区。对象在Eden区创建，经过一次Yong GC后，还存活的对象将会被复制到Surviver区的“From”区，此时“To”区是空的。到了下一次GC的时候，Eden区还存活的对象会复制到Surviver区的“To”区，而“Form”区的对象有两个去处，“From”区的对象会根据经过的GC次数计算年龄，如果年龄到达了阈值（默认15），则会被移动到老年代中，否则就复制到“To”区，此时“From”区变成了空的，然后“From”区和“To”区进行角色互换，到下一次进行GC时，还是有一块空的“To”区，用来存放从eden区和“From”区移动过来的对象。</p>\n<p>2、那这种分区有什么好处呢？</p>\n<p>a、在年轻代新增Surviver区，有利于减轻老年代的负担，尽可能的让大部分对象在年轻代通过较高效的Yong GC回收掉，不至于老年代里存放的对象过多导致内存不足而进行频繁的Full GC操作。</p>\n<p>b、这种分区有利于减少内存碎片的产生。</p>\n<p>首先我们来看看，如果年轻代只分为Eden区和Surviver区两个区域并且比例是8:2的时候，内存的回收和分配情况会怎么样。第一次Yong GC后，Eden区还存活的对象移动到Surviver区，Surviver区还存活的对象保留在Surviver区，而这些对象的内存是不连续的，Surviver区里就会产生很多内存碎片，这就会导致有些大对象要移动到Surviver区的时候，没有足够的连续内存进行分配，而不得不移动到老年代中，增加老年代的负担，降低效率。</p>\n<p>然后我们看看Eden区和Surviver区的比例是8:1:1时会有什么样的效果。第一次Yong GC后，Eden区还存活的对象复制到Surviver区的“To”区，“From”区还存活的对象也复制到“To”区，再清空Eden区和From区，这样就等于“From”区完全是空的了，而“To”区也不会有内存碎片产生，等到第二次Yong GC时，“From”区和“To”区角色互换，很好的解决了内存碎片的问题。</p>\n<h4 id=\"详细的过程：\"><a href=\"#详细的过程：\" class=\"headerlink\" title=\"详细的过程：\"></a>详细的过程：</h4><p>1.当系统创建一个对象的时候，总是在Eden区操作，当这个区满了，那么就会触发一次<em><strong>YoungGC</strong></em>，也就是<em><strong>年轻代的垃圾回收</strong></em>。</p>\n<p>一般来说这时候不是所有的对象都没用了，所以就会把还能用的对象复制到From区。</p>\n<p>2.这样整个Eden区就被清理干净了，可以继续创建新的对象，当Eden区再次被用完，就再触发一次YoungGC，然后呢，注意，这个时候跟刚才稍稍有点区别。这次触发YoungGC后，<strong>会将Eden区与From区还在被使用的对象复制到To区</strong>，</p>\n<p>3.再下一次YoungGC的时候，<strong>则是将Eden区与To区中的还在被使用的对象复制到From区</strong>。</p>\n<p>4.经过若干次YoungGC后，有些对象在From与To之间来回游荡，这时候From区与To区亮出了底线（阈值），这些家伙要是到现在还没挂掉，对不起，一起滚到（复制）老年代吧。</p>\n<p><img src=\"/2022/06/12/jvm%E9%9D%A2%E8%AF%95/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BlZXJsZXNzX2Z1,size_16,color_FFFFFF,t_70.png\" alt=\"img\"></p>\n</blockquote>\n</blockquote>\n<h3 id=\"3-JVM怎么回收内存，gc机制是什么\"><a href=\"#3-JVM怎么回收内存，gc机制是什么\" class=\"headerlink\" title=\"3.JVM怎么回收内存，gc机制是什么?\"></a>3.JVM怎么回收内存，gc机制是什么?</h3><blockquote>\n<p>垃圾收集需要完成的三件事情：</p>\n<ul>\n<li><p>哪些内存需要回收？</p>\n<blockquote>\n<p>程序计数器，虚拟机栈和本地方法栈都是随线程而生，随线程而灭。 栈中的栈帧随着方法的进入和退出而有条不紊地执行着出栈和入栈操作。 每一个栈帧中分配多少内存基本上是在类结构确定下来时就已知的因此这几个区域的内存分配和回收都具备确定性，<strong>在这几个区域内就不需要过多考虑如何回收的问题</strong>， 当方法结束或者线程结束时， 内存自然就跟随着回收了。</p>\n<p>而Java堆和方法区这两个区域则有着很显著的不确定性： 一个接口的多个实现类需要的内存可能会不一样， 一个方法所执行的不同条件分支所需要的内存也可能不一样， 只有处于运行期间， 我们才能知道程序究竟会创建哪些对象， 创建多少个对象， 这部分内存的分配和回收是动态的。 因此，垃圾收集器所关注的正是这部分内存该如何管理。</p>\n</blockquote>\n</li>\n<li><p>什么时候回收？ 哪些还“存活”着， 哪些已经“死去”了。</p>\n<blockquote>\n<p>判断对象是否死去通常有两种方法：引用计数算法和可达性分析算法。</p>\n<h4 id=\"引用计数算法\"><a href=\"#引用计数算法\" class=\"headerlink\" title=\"引用计数算法\"></a>引用计数算法</h4><p>引用计数算法：在对象中添加一个引用计数器， 每当有一个地方引用它时， 计数器值就加一； 当引用失效时， 计数器值就减一； 任何时刻计数器为零的对象就是不可能再被使用的。</p>\n<p>优点:</p>\n<ul>\n<li>原理简单，<strong>判断</strong>效率高</li>\n<li>实时性，<strong>任何内存，一旦没有指向它的引用，就会立即被回收</strong>。</li>\n</ul>\n<p>缺点:</p>\n<ul>\n<li>内存分配和释放次数变多，维护引用计数代价越高（执行效率低）</li>\n<li>循环引用不能去使用（关键缺点）</li>\n</ul>\n<p>在Java领域，至少主流的Java虚拟机里面都没有选用引用计数算法来管理内存，主要原因是这个看似简单的算法<strong>有很多例外情况要考虑</strong>，必须要配合大量额外处理才能保证正确地工作。</p>\n<h4 id=\"可达性分析算法\"><a href=\"#可达性分析算法\" class=\"headerlink\" title=\"可达性分析算法\"></a>可达性分析算法</h4><p>可达性分析算法：通过一系列称为“GC Roots”的根对象作为起始节点集， 从这些节点开始， 根据引用关系向下搜索， 搜索过程所走过的路径称为“引用链”（Reference Chain） ，如果某个对象到GC Roots间没有任何引用链相连，或者用图论的话来说就是从GC Roots到这个对象不可达时， 则证明此对象是不可能再被使用的。</p>\n<p>如下图所示， 对象object 5、 object 6、 object 7虽然互有关联， 但是它们到GC Roots是不可达的，因此它们将会被判定为可回收的对象。</p>\n<p><img src=\"/2022/06/12/jvm%E9%9D%A2%E8%AF%95/Users\\12136\\Desktop\\blog\\source_posts\\jvm面试.assets\\30fd6c9f4f6645d21928035233adbed9.png\" alt=\"image.png\"></p>\n<p>在Java技术体系里面， 固定可作为GC Roots的对象包括以下几种：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">在虚拟机栈（栈帧中的本地变量表）中引用的对象， 譬如，各个线程被调用的方法堆栈中使用到的参数、 局部变量、 临时变量等。</span><br><span class=\"line\">在方法区中类静态属性引用的对象， 譬如，Java类的引用类型静态变量。</span><br><span class=\"line\">在方法区中常量引用的对象， 譬如，字符串常量池（String Table）里的引用。</span><br><span class=\"line\">在本地方法栈中JNI（即通常所说的Native方法）引用的对象。</span><br><span class=\"line\">Java虚拟机内部的引用，如，基本数据类型对应的Class对象， 一些常驻的异常对象（比如NullPointExcepiton、 OutOfMemoryError）等， 还有系统类加载器。</span><br><span class=\"line\">所有被同步锁（<span class=\"keyword\">synchronized</span>关键字）持有的对象。</span><br><span class=\"line\">反映Java虚拟机内部情况的JMXBean、 JVMTI中注册的回调、本地代码缓存等。</span><br></pre></td></tr></table></figure>\n\n\n</blockquote>\n</li>\n<li><p>如何回收？</p>\n<blockquote>\n<p>即使在可达性分析算法中判定为不可达的对象，也不是“非死不可”的，这时候它们暂时还处于“缓刑”阶段。</p>\n<p>这边就要用到垃圾收集算法</p>\n<h3 id=\"标记-清除算法\"><a href=\"#标记-清除算法\" class=\"headerlink\" title=\"标记-清除算法\"></a>标记-清除算法</h3><p>算法分为标记和清除两个阶段：首先标记出所有需要回收的对象，在标记完成后统一回收掉所有被标记的对象。它是最基础的收集算法，因为后续的收集算法都是基于这种思路并对其缺点进行改进而得到的。</p>\n<p>缺点:</p>\n<ul>\n<li>标记和清除过程的效率都不高</li>\n<li>标记清除之后会产生大量的不连续的内存碎片，分配较大对象无法找到连续内存不得不触发另一次垃圾回收</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/20200520095343831.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjU3NTU0Mg==,size_16,color_FFFFFF,t_70\" alt=\"标记-清除算法执行过程\"></p>\n<h3 id=\"复制算法\"><a href=\"#复制算法\" class=\"headerlink\" title=\"复制算法\"></a>复制算法</h3><p>为了解决效率问题，一种称为“复制”的收集算法，它将可用内存按容量划分为大小相等的两块，每次只使用一块。当这块内存用完了。就将还活着的对象复制到另一块上面，然后再把已经用过的内存空间一次清理掉。这样使得每次都是对其中一块内存回收，内存分配时也就不用考虑内存碎片等复杂情况，只需要移动堆顶指针，按顺序分配内存即可，实现简单，运行高效。只是这种算法的代价是将内存缩小为原来的一半，未免也太高了一点。</p>\n<p>如图所示，“<strong>半区域复制</strong>”这样实现的垃圾回收算法缺点显而易见<br>（1）内存利用效率太低，只能利用一半的内存<br>（2）如果内存中出现对象大都是存活的情况，将会产生大量内存间复制的开销</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200520101309851.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjU3NTU0Mg==,size_16,color_FFFFFF,t_70\" alt=\"复制算法执行过程\"></p>\n<p>在1989年，Andrew Appel针对具备“朝生夕灭”特点的对象，提出了一种更为优化的半区复制分代策略，现在称为“Appel式回收”。HotSpot虚拟机的Serial、ParNew等新生代收集器均采用了这种策略来设计新生代的内存布局。<br>  具体做法就是，把新生代分为一块较大的Eden空间和两块较小的Survivor空间，每次分配内存只使用Eden和其中一块Survivor。发生内存收集时，将Eden和Survivor中仍然存活的对象一次性复制到另外一块Survivor空间上，然后直接清理掉Eden和已使用过的那一块Survivor空间。HotSpot虚拟机默认的Eden和Survivor的大小默认时8:1，也即每次新生代中可用内存空间为整个新生代容量的90%，只有另一个Survivor空间，即10%的新生代是“浪费”的。如图：<br><img src=\"https://img-blog.csdnimg.cn/01ad068083f7434490866dd0e8399fc3.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAbG9yZGt5,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"标记-整理算法\"><a href=\"#标记-整理算法\" class=\"headerlink\" title=\"标记-整理算法\"></a>标记-整理算法</h3><p>复制算法在对象存活率较高时就要执行较多的复制操作，效率将会变低。更关键的是，如果不想浪费50%的空间，就需要有额外的空间进行分配担保，以应对内存中被使用的所有的对象都100%存活的极端情况，<strong>所以在老年代一般不能直接选用这种算法。</strong><br>根据老年代的特点，有人提出了一种“标记-整理“算法，标记过程仍然与”标记-清除“算法一样，但是后续步骤不是直接对可回收的对象进行清理，而是让所有存活的对象都向一端移动，然后清理掉端边界以外的内存。<br><img src=\"https://img-blog.csdnimg.cn/20200520110040232.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjU3NTU0Mg==,size_16,color_FFFFFF,t_70\" alt=\"标记-整理算法执行过程\"></p>\n<h3 id=\"分代收集算法\"><a href=\"#分代收集算法\" class=\"headerlink\" title=\"分代收集算法\"></a>分代收集算法</h3><p>当前商业虚拟机的垃圾回收都采用”分代收集“算法，这种算法并没有什么新的思想，只是根据对象的存活周期的不同将内存划分为几块。一般是把Java堆分为老年代和新生代，这样就可以根据各个年代的特点采用最适当的收集算法。在新生代中，每次垃圾收集时都发现有大批的对象死去，只有少量存活，那就选用复制算法，只需要付出少量的存活对象的复制成本就可以完成收集。而老年代中因为对象的存活率高、没有额外的空间对他进行分配担保，就必须使用”标记-整理“或者”标记-清理“算法来进行回收。</p>\n<p>（1） 年轻代(Young Gen)</p>\n<p>年轻代特点是区域相对老年代较小，对像存活率低。</p>\n<p>这种情况复制算法的回收整理，速度是最快的。复制算法的效率只和当前存活对像大小有关，因而很适用于年轻代的回收。而复制算法内存利用率不高的问题，通过hotspot中的两个survivor的设计得到缓解。</p>\n<p>（2） 老年代(Tenure Gen)</p>\n<p>老年代的特点是区域较大，对像存活率高。</p>\n<p>这种情况，存在大量存活率高的对像，复制算法明显变得不合适。一般是由标记清除或者是标记清除与标记整理的混合实现。</p>\n<p>Mark阶段的开销与存活对像的数量成正比，这点上说来，对于老年代，标记清除或者标记整理有一些不符，但可以通过多核/线程利用，对并发、并行的形式提标记效率。</p>\n<p>Sweep阶段的开销与所管理区域的大小形正相关，但Sweep“就地处决”的特点，回收的过程没有对像的移动。使其相对其它有对像移动步骤的回收算法，仍然是效率最好的。但是需要解决内存碎片问题。</p>\n<p>Compact阶段的开销与存活对像的数据成开比，如上一条所描述，对于大量对像的移动是很大开销的，做为老年代的第一选择并不合适。</p>\n<p>基于上面的考虑，老年代一般是由标记清除或者是标记清除与标记整理的混合实现。以hotspot中的CMS回收器为例，CMS是基于Mark-Sweep实现的，对于对像的回收效率很高，而对于碎片问题，CMS采用基于Mark-Compact算法的Serial Old回收器做为补偿措施：当内存回收不佳（碎片导致的Concurrent Mode Failure时），将采用Serial Old执行Full GC以达到对老年代内存的整理。</p>\n<h4 id=\"总结：没有最好的算法，只有最合适的算法\"><a href=\"#总结：没有最好的算法，只有最合适的算法\" class=\"headerlink\" title=\"总结：没有最好的算法，只有最合适的算法\"></a>总结：没有最好的算法，只有最合适的算法</h4></blockquote>\n</li>\n</ul>\n</blockquote>\n<h3 id=\"4-static变量的初始化前后在jvm内存中的位置？\"><a href=\"#4-static变量的初始化前后在jvm内存中的位置？\" class=\"headerlink\" title=\"4.static变量的初始化前后在jvm内存中的位置？\"></a>4.static变量的初始化前后在jvm内存中的位置？</h3><blockquote>\n<p>成员变量数据存储在堆内存的对象中，所以也叫对象的特有数据。</p>\n<p>静态变量数据存储在方法区（共享数据区）的静态区，所以也叫对象的共享数据。</p>\n</blockquote>\n<h3 id=\"5-Java方法调用在jvm中是怎样的过程-方法栈、入参、返回值\"><a href=\"#5-Java方法调用在jvm中是怎样的过程-方法栈、入参、返回值\" class=\"headerlink\" title=\"5.Java方法调用在jvm中是怎样的过程(方法栈、入参、返回值)\"></a>5.Java方法调用在jvm中是怎样的过程(方法栈、入参、返回值)</h3><blockquote>\n<p>方法（Java中称为方法，其他语言一般称为函数）调用主要是通过栈来存储相关的数据，系统就方法调用者和方法如何使用栈做了约定，返回值可以简单认为是通过一个专门的返回值存储器来存储的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Sum</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">sum</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> a * b;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">d</span> <span class=\"operator\">=</span> Sum.sum(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">        System.out.println(d);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>当程序在 main 方法调用 Sum.sum 之前，栈的情况大概如图所示。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/16766bef159f43a7588afbfb06017327.png\" alt=\"调用Sum.sum之前的栈示意图\"></p>\n<p>在 main 方法调用 Sum.sum 时，首先将参数 1 和 2 入栈，然后将返回地址（也就是调用方法结束后要执行的指令地址）入栈，<br>接着跳转到 sum 函数，在 sum 函数内部，需要为局部变量 c 分配一个空间，而参数变量 a 和 b 则直接对应于入栈的数据 1 和 2，在返回之前，返回值保存到了专门的返回值存储器中。</p>\n<p>在调用 return 后，程序会跳转到栈中保存的返回地址，即 main 的一条指令地址，而 sum 函数相关的数据会出栈，从而又变回上图中的样子。</p>\n<p>main 的下一条指令是根据方法返回值给变量 d 赋值，返回值从专门的返回值存储器中获得。<br><img src=\"https://img-blog.csdnimg.cn/img_convert/1f0d23ad1a920bd0cf2889940087e568.png\" alt=\"在Sum.sum内部，准备返回之前的栈示意图\"></p>\n<h3 id=\"程序执行的基本原理\"><a href=\"#程序执行的基本原理\" class=\"headerlink\" title=\"程序执行的基本原理\"></a>程序执行的基本原理</h3><p>CPU有一个指令指示器，指向下一条要执行的指令，要么顺序执行，要么进行跳转（条件跳转或无条件跳转）。</p>\n<p>具体到Java程序来说就是，程序从 main 方法开始顺序执行，方法调用可以看作一个无条件跳转，跳转到对应方法的指令处开始执行，<br>碰到 return 语句或者方法结尾的时候，再执行一次无条件跳转， 跳转回调用方，执行调用方法后的下一条指令。</p>\n</blockquote>\n<h3 id=\"6-如果一个程序频繁触发Full-GC，原因可能是什么？\"><a href=\"#6-如果一个程序频繁触发Full-GC，原因可能是什么？\" class=\"headerlink\" title=\"6.如果一个程序频繁触发Full GC，原因可能是什么？\"></a>6.如果一个程序频繁触发Full GC，原因可能是什么？</h3><blockquote>\n<p>（1）System.gc()方法的调用。此方法的调用是建议JVM进行Full GC,虽然只是建议而非一定，但很多情况下它会触发 Full GC,从而增加Full GC的频率，也即增加了间歇性停顿的次数。强烈建议能不使用此方法就别使用，让虚拟机自己去管理它的内存，可通过通过-XX:+ DisableExplicitGC来禁止RMI（Java远程方法调用）调用System.gc。</p>\n<p>（2）旧生代空间不足。旧生代空间只有在新生代对象转入及创建为大对象、大数组时才会出现不足的现象，当执行Full GC后空间仍然不足，则抛出错误：java.lang.OutOfMemoryError: Java heap space 。为避免以上两种状况引起的FullGC，调优时应尽量做到让对象在Minor GC阶段被回收、让对象在新生代多存活一段时间及不要创建过大的对象及数组。</p>\n<p>（3）Permanet Generation空间满了。Permanet Generation中存放的为一些class的信息等，当系统中要加载的类、反射的类和调用的方法较多时，Permanet Generation可能会被占满，在未配置为采用CMS GC的情况下会执行Full GC。如果经过Full GC仍然回收不了，那么JVM会抛出错误信息：java.lang.OutOfMemoryError: PermGen space 。为避免Perm Gen占满造成Full GC现象，可采用的方法为增大Perm Gen空间或转为使用CMS GC。</p>\n<p>（4）通过Minor GC后进入老年代的平均大小大于老年代的可用内存。如果发现统计数据说之前Minor GC的平均晋升大小比目前old gen剩余的空间大，则不会触发Minor GC而是转为触发full GC。</p>\n<p>（5）由Eden区、From Space区向To Space区复制时，对象大小大于To Space可用内存，则把该对象转存到老年代，且老年代的可用内存小于该对象大小</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">1.java远程调用System.gc()方法</span><br><span class=\"line\">2.老年代空间不足</span><br><span class=\"line\">3.永久代空间满了（java8被元空间替代，使用本地内存，所以这个现在不太可能发生）</span><br><span class=\"line\">4.假如young gc后，进入老年代的平均大小大于老年代可用内存会触发full gc</span><br><span class=\"line\">5.由Eden区，from区向to区复制时（或者颠倒顺序），对象大于to区内存，则移动到老年代，但是老年代内存小于该对象大小</span><br></pre></td></tr></table></figure>\n\n</blockquote>\n<h3 id=\"7-jvm如何知道new了一个对象要多大内存\"><a href=\"#7-jvm如何知道new了一个对象要多大内存\" class=\"headerlink\" title=\"7.jvm如何知道new了一个对象要多大内存\"></a>7.jvm如何知道new了一个对象要多大内存</h3><blockquote>\n<p>对象在堆内存中的存储布局可以划分为三个部分： <code>对象头</code>,<code>实例数据</code>,<code>对齐填充</code></p>\n<h3 id=\"对象头\"><a href=\"#对象头\" class=\"headerlink\" title=\"对象头\"></a>对象头</h3><p>对象的对象头包括两类信息。第一类是存储对象自身的运行时数据，第二类是类型指针</p>\n<h5 id=\"Mark-World\"><a href=\"#Mark-World\" class=\"headerlink\" title=\"Mark World\"></a>Mark World</h5><p>存储对象自身的运行时数据，如哈希码，GC分代年龄、锁状态标志、线程持有的锁等等。这部分的数据长度在32位虚拟机中为<strong>4个字节</strong>，在64位虚拟机中是<strong>8个字节</strong>，官方称之为 <code>Mark Word</code></p>\n<h5 id=\"类型指针\"><a href=\"#类型指针\" class=\"headerlink\" title=\"类型指针\"></a>类型指针</h5><p>指向它的类型元数据的指针（指向它的Class对象的指针），大小是4个字节。Java虚拟机通过这个指针来确定该对象是哪个类的实例</p>\n<h3 id=\"实例数据\"><a href=\"#实例数据\" class=\"headerlink\" title=\"实例数据\"></a>实例数据</h3><p>实例数据部分是对象真正存储的有效信息，即我们在程序代码里面所定义的各种类型的字段内容。计算方式是累加，如下对象：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">O</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> o1;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">long</span> o2</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>实例数据部分长度就是 int(4字节)+long(8字节)=12字节</p>\n<h3 id=\"对齐填充\"><a href=\"#对齐填充\" class=\"headerlink\" title=\"对齐填充\"></a>对齐填充</h3><p>第三部分就是对齐填充。HotSpot虚拟机的自动内存管理要求对象起始地址必须是8字节的整数倍，换句话说就是任何对象的大小都必须是8字节的整数倍。<strong>如果对象大小没到8字节的整数倍，那就需要通过对齐填充来补全。</strong></p>\n<p>实战<br>已经知道了对象的内存布局，我们就可以来尝试计算一个类对象占用的内存：<br>我们就来计算 String类的内存：<br>我们先来查看String类里面的实例数据有哪些;</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Stable</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">byte</span>[] value;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">byte</span> coder;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">int</span> hash; <span class=\"comment\">// Default to 0</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">boolean</span> hashIsZero; <span class=\"comment\">// Default to false;</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> <span class=\"variable\">serialVersionUID</span> <span class=\"operator\">=</span> -<span class=\"number\">6849794470754667710L</span>;</span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">boolean</span> COMPACT_STRINGS;</span><br><span class=\"line\">可以得到实例数据部分的字节是 数组对象 + <span class=\"type\">byte</span>（<span class=\"number\">1</span>字节）+ <span class=\"type\">int</span>（<span class=\"number\">4</span>字节）+ <span class=\"type\">boolean</span>(<span class=\"number\">1</span>字节) + <span class=\"type\">long</span>（<span class=\"number\">8</span>字节） + Boolean（<span class=\"number\">1</span>字节）</span><br></pre></td></tr></table></figure>\n\n<p>那么数组对象也是一个对象，它的占用内存是 对象头（8字节）+ 引用（4字节）+ 记录长度的int（4字节）=16字节。</p>\n<p>所以空的String对象占用内存是 8+16+1+4+1+8+1+ 1字节（字节填充）=40字节</p>\n<p>非空的String对象</p>\n<p>非空的string对象比空的string对象只有在数组对象里的 实例数据部分变化了，其他都没变，<br>所以非空的String对象占用内存是 8+16+1+4+1+8+1+ 1字节（字节填充）=40+ n字节（n是byte数组的长度）</p>\n</blockquote>\n<h3 id=\"8-堆，方法区，永久代，元空间-之间的关系\"><a href=\"#8-堆，方法区，永久代，元空间-之间的关系\" class=\"headerlink\" title=\"8.堆，方法区，永久代，元空间 之间的关系\"></a>8.堆，方法区，永久代，元空间 之间的关系</h3><blockquote>\n<ol>\n<li><h4 id=\"方法区和永久代的关系\"><a href=\"#方法区和永久代的关系\" class=\"headerlink\" title=\"方法区和永久代的关系\"></a>方法区和永久代的关系</h4><p>方法区是 《Java虚拟机规范 》中的规范，在 HotSpot 虚拟机中，JDK 6.0 及以前由永久代实现，就如同 Java 中的接口和实现一样。</p>\n<p>永久代并不是很好的方法区实现，《Java虚拟机规范》中方法区不需要连续的内存20)并且可以选择固定大小或可扩展，而永久代有 <code>-XX:MaxPermSize</code> 上限，即使不设置也有默认大小，很容易造成内存溢出。</p>\n</li>\n<li><h4 id=\"堆和方法区的关系\"><a href=\"#堆和方法区的关系\" class=\"headerlink\" title=\"堆和方法区的关系\"></a>堆和方法区的关系</h4><p>《Java虚拟机规范》把方法区描述为堆的逻辑部分，但它却有一个名字 Non-Heap 非堆，两者物理上并无联系。</p>\n<p>两者的共同点就是都可以选择固定大小或可扩展。</p>\n</li>\n<li><h4 id=\"元空间：JDK-8-把永久代迁移到由本地内存实现的元空间当中\"><a href=\"#元空间：JDK-8-把永久代迁移到由本地内存实现的元空间当中\" class=\"headerlink\" title=\"元空间：JDK 8 把永久代迁移到由本地内存实现的元空间当中\"></a>元空间：JDK 8 把永久代迁移到由本地内存实现的元空间当中</h4></li>\n<li><h4 id=\"永久代数据迁移\"><a href=\"#永久代数据迁移\" class=\"headerlink\" title=\"永久代数据迁移\"></a>永久代数据迁移</h4><ul>\n<li>1.6 及以前永久代是方法区的实现，其中包括：已加载的类型信息，常量，静态变量，即时编译器编译过后的代码缓存等。</li>\n<li>1.7 将字符串常量池，静态变量移出到堆中。</li>\n<li>1.8 将老年代剩余内容（主要是类型信息）全部移到元空间中。</li>\n</ul>\n</li>\n<li><h4 id=\"方法区的实现永久代真的永久吗？\"><a href=\"#方法区的实现永久代真的永久吗？\" class=\"headerlink\" title=\"方法区的实现永久代真的永久吗？\"></a>方法区的实现永久代真的永久吗？</h4><p>垃圾回收在这个区域出现的比较少，但是并不是没有，主要是常量池的回收和类型的卸载。主要是动态类的生成：CGLib字节码增强，JSP 等。</p>\n</li>\n<li><h4 id=\"永久代和元空间\"><a href=\"#永久代和元空间\" class=\"headerlink\" title=\"永久代和元空间\"></a>永久代和元空间</h4><p>JDK 8 以后，永久代完全退出历史舞台，由元空间替代</p>\n</li>\n<li><h4 id=\"常量池在-JDK-6-7-8-中存在位置证明\"><a href=\"#常量池在-JDK-6-7-8-中存在位置证明\" class=\"headerlink\" title=\"常量池在 JDK 6,7,8 中存在位置证明\"></a>常量池在 JDK 6,7,8 中存在位置证明</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashSet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Set;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RuntimeConstantPoolOOM</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        Set&lt;String&gt; set = <span class=\"keyword\">new</span> <span class=\"title class_\">HashSet</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// String.intern();去字符串常量池中查找有没有这个字符串，有的话指向引用，没有将字符串拷贝进字符串常量池当中</span></span><br><span class=\"line\">            set.add(String.valueOf(i++).intern());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"number\">12345678910111213</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>JDK 6：<code>-XX:MaxPermSize</code> 限制永久代大小，异常 <code>OOM:PermGen space</code> ，代表永久代空间不足，此时字符串常量池在永久代当中。</li>\n<li>JDK 7及以上：<code>-XX:MaxPermSize</code> 限制永久代大小，循环一直下去，不会爆异常。<code>-Xmx512M</code> 限制最大堆就可以看到 <code>OOM:heap space</code>堆内存不足，代表字符串常量池在堆中。</li>\n</ol>\n<p><img src=\"/2022/06/12/jvm%E9%9D%A2%E8%AF%95/image-20220914163105961.png\" alt=\"image-20220914163105961\"></p>\n<p><strong>指令补充</strong></p>\n<table>\n<thead>\n<tr>\n<th>-Xmssize</th>\n<th>设置初始化堆内存大小，这个值的大小必须是1024的倍数，并且大于1M，可以指定单位k(K),m(M),g(G)。例如 -Xms6m。如果没有设置这个值，那么它的初始化大小就是年轻代和老年代的和。等价于<code>-XX:InitialHeapSize</code>。</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-Xmxsize</td>\n<td>设置最大堆内存大小，这个值的大小必须是1024的倍数，并且大于2M，可以指定单位k(K),m(M),g(G)。默认值是根据运行时的系统配置来确定的。一般服务器部署时，把<code>-Xms</code>和<code>-Xmx</code>的值设置成相同的大小。<code>-Xmx</code>选项和<code>-XX:MaxHeapSize</code>相同。</td>\n</tr>\n<tr>\n<td>-Xmnsize</td>\n<td>设置年轻代大小。可以指定单位k(K),m(M),g(G) .例如-Xmn256m。还可以通过其他两个选项来代替这个选项来指定年轻代最小和最大内存：<code>-XX:NewSize</code>指定初始化大小,<code>-XX:MaxNewSize</code>指定最大内存大小</td>\n</tr>\n<tr>\n<td>-XX:NewSize=&lt; n &gt;[g|m|k]</td>\n<td>年轻代的初始值。</td>\n</tr>\n<tr>\n<td>-XX:MaxNewSize=&lt; n &gt;[g|m|k]</td>\n<td>年轻代的最大值。</td>\n</tr>\n<tr>\n<td>-Xsssize</td>\n<td>设置线程栈的大小。可以指定单位k(K),m(M),g(G)。默认值根据内存而定。 这个选项和<code>-XX:ThreadStackSize</code>相同</td>\n</tr>\n<tr>\n<td>-XX:ThreadStackSize=size</td>\n<td>设置线程栈大小。默认值依赖于机器内存。这个选项和<code>-Xss</code>选项的功能相同。</td>\n</tr>\n<tr>\n<td>-XX:MetaspaceSize=size</td>\n<td>设置元数据空间初始大小。</td>\n</tr>\n<tr>\n<td>-XX:MaxMetaspaceSize=size</td>\n<td>设置元数据空间最大值。</td>\n</tr>\n<tr>\n<td>-XX:NewRatio</td>\n<td>设置老生代和新生代大小的比例，比如-XX:NewRatio=2表示1/3的Heap是新生代，2/3的Heap是老生代。</td>\n</tr>\n<tr>\n<td>-XX:SurvivorRatio</td>\n<td>用来设置新生代中Eden和Survivor空间大小的比例，需要注意的是有两个Survivor。比如-XX:SurvivorRatio=8表示Eden区域在新生代的8/10，两个Survivor分别占1/10。</td>\n</tr>\n</tbody></table>\n<p><img src=\"/2022/06/12/jvm%E9%9D%A2%E8%AF%95/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA4ODk5OA==,size_16,color_FFFFFF,t_70.png\" alt=\"在这里插入图片描述\"></p>\n</li>\n</ol>\n</blockquote>\n","categories":["面试"],"tags":["面试","Jvm"]},{"title":"lock锁和Synchronized锁","url":"/2022/07/10/lock%E9%94%81%E5%92%8CSynchronized%E9%94%81/","content":"<h1 id=\"lock锁和Synchronized锁\"><a href=\"#lock锁和Synchronized锁\" class=\"headerlink\" title=\"lock锁和Synchronized锁\"></a>lock锁和Synchronized锁</h1><blockquote>\n<h3 id=\"synchronized是Java中的关键字，是一种同步锁。它修饰的对象有以下几种\"><a href=\"#synchronized是Java中的关键字，是一种同步锁。它修饰的对象有以下几种\" class=\"headerlink\" title=\"synchronized是Java中的关键字，是一种同步锁。它修饰的对象有以下几种\"></a>synchronized是Java中的关键字，是一种同步锁。它修饰的对象有以下几种</h3><h3 id=\"一个线程访问一个对象中的synchronized-this-同步代码块时，其他试图访问该对象的线程将被阻塞-：\"><a href=\"#一个线程访问一个对象中的synchronized-this-同步代码块时，其他试图访问该对象的线程将被阻塞-：\" class=\"headerlink\" title=\"(一个线程访问一个对象中的synchronized(this)同步代码块时，其他试图访问该对象的线程将被阻塞)：\"></a>(一个线程访问一个对象中的synchronized(this)同步代码块时，其他试图访问该对象的线程将被阻塞)：</h3><ol>\n<li>修饰一个代码块，被修饰的代码块称为同步语句块，其作用的范围是大括号{}括起来的代码，作用的对象是调用这个代码块的对象； 　</li>\n<li>修饰一个方法，被修饰的方法称为同步方法，其作用的范围是整个方法，作用的对象是调用这个方法的对象；</li>\n<li>修改一个静态的方法，其作用的范围是整个静态方法，作用的对象是这个类的所有对象；</li>\n<li>修改一个类，其作用的范围是synchronized后面括号括起来的部分，作用主的对象是这个类的所有对象。</li>\n</ol>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Ticket</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span>  <span class=\"type\">int</span> <span class=\"variable\">number</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>  <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sale</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot;:&quot;</span>+(number++));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"type\">Ticket</span> <span class=\"variable\">ticket</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Ticket</span>();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;</span><br><span class=\"line\">                ticket.sale();</span><br><span class=\"line\">        &#125;,<span class=\"string\">&quot;aa&quot;</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;</span><br><span class=\"line\">                ticket.sale();</span><br><span class=\"line\">        &#125;,<span class=\"string\">&quot;bb&quot;</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;</span><br><span class=\"line\">                ticket.sale();</span><br><span class=\"line\">        &#125;,<span class=\"string\">&quot;cc&quot;</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">结果:</span><br><span class=\"line\">aa:<span class=\"number\">0</span></span><br><span class=\"line\">aa:<span class=\"number\">1</span></span><br><span class=\"line\">aa:<span class=\"number\">2</span></span><br><span class=\"line\">aa:<span class=\"number\">3</span></span><br><span class=\"line\">aa:<span class=\"number\">4</span></span><br><span class=\"line\">bb:<span class=\"number\">5</span></span><br><span class=\"line\">bb:<span class=\"number\">6</span></span><br><span class=\"line\">bb:<span class=\"number\">7</span></span><br><span class=\"line\">bb:<span class=\"number\">8</span></span><br><span class=\"line\">bb:<span class=\"number\">9</span></span><br><span class=\"line\">cc:<span class=\"number\">10</span></span><br><span class=\"line\">cc:<span class=\"number\">11</span></span><br><span class=\"line\">cc:<span class=\"number\">12</span></span><br><span class=\"line\">cc:<span class=\"number\">13</span></span><br><span class=\"line\">cc:<span class=\"number\">14</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Lock\"><a href=\"#Lock\" class=\"headerlink\" title=\"Lock\"></a>Lock</h4><blockquote>\n<p>synchronized是java中的一个关键字，也就是说是Java语言内置的特性。那么为什么会出现Lock呢？</p>\n<p>　　1）Lock不是Java语言内置的，synchronized是Java语言的<strong>关键字</strong>，因此是内置特性。Lock是一个类，通过这个类可以实现同步访问；</p>\n<p>　　2）Lock和synchronized有一点非常大的不同，采用synchronized不需要用户去手动释放锁，当synchronized方法或者synchronized代码块执行完之后，系统会自动让线程释放对锁的占用；而Lock则必须要用户去手动释放锁，如果没有主动释放锁，就有可能导致出现死锁现象。</p>\n<p><strong>synchronized 的局限性 与 Lock 的优点</strong>　</p>\n<p>　　如果一个代码块被synchronized关键字修饰，当一个线程获取了对应的锁，并执行该代码块时，其他线程便只能一直等待直至占有锁的线程释放锁。事实上，占有锁的线程释放锁一般会是以下三种情况之一：</p>\n<p>　　1：占有锁的线程执行完了该代码块，然后释放对锁的占有；</p>\n<p>　　2：占有锁线程执行发生异常，此时JVM会让线程自动释放锁；</p>\n<p>　　3：占有锁线程进入 WAITING 状态从而释放锁，例如在该线程中调用wait()方法等。</p>\n<p>　　试考虑以下三种情况：　</p>\n<p>Case 1 ：</p>\n<p>　　<strong>在使用synchronized关键字的情形下，假如占有锁的线程由于要等待IO或者其他原因（比如调用sleep方法）被阻塞了，但是又没有释放锁，那么其他线程就只能一直等待，别无他法。这会极大影响程序执行效率。因此，就需要有一种机制可以不让等待的线程一直无期限地等待下去（比如只等待一定的时间 (解决方案：tryLock(long time, TimeUnit unit)) 或者 能够响应中断 (解决方案：lockInterruptibly())），这种情况可以通过 Lock 解决。</strong></p>\n<p>Case 2 ：</p>\n<p>　　<strong>我们知道，当多个线程读写文件时，读操作和写操作会发生冲突现象，写操作和写操作也会发生冲突现象，但是读操作和读操作不会发生冲突现象。但是如果采用synchronized关键字实现同步的话，就会导致一个问题，即当多个线程都只是进行读操作时，也只有一个线程在可以进行读操作，其他线程只能等待锁的释放而无法进行读操作。因此，需要一种机制来使得当多个线程都只是进行读操作时，线程之间不会发生冲突。同样地，Lock也可以解决这种情况 (解决方案：ReentrantReadWriteLock) 。</strong></p>\n<p>Case 3 ：</p>\n<p>　　<strong>我们可以通过Lock得知线程有没有成功获取到锁 (解决方案：ReentrantLock) ，但这个是synchronized无法办到的。</strong></p>\n<p><strong>上面提到的三种情形，我们都可以通过Lock来解决，但 synchronized 关键字却无能为力。事实上，Lock 是 java.util.concurrent.locks包 下的接口，Lock 实现提供了比 synchronized 关键字 更广泛的锁操作，它能以更优雅的方式处理线程同步问题。也就是说，Lock提供了比synchronized更多的功能。</strong></p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Ticket</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span>  <span class=\"type\">ReentrantLock</span> <span class=\"variable\">lock</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ReentrantLock</span>();</span><br><span class=\"line\">    <span class=\"keyword\">private</span>  <span class=\"type\">int</span> <span class=\"variable\">number</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>  <span class=\"keyword\">void</span> <span class=\"title function_\">sale</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        lock.lock();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot;:&quot;</span>+(number++));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        lock.unlock();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"type\">Ticket</span> <span class=\"variable\">ticket</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Ticket</span>();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;</span><br><span class=\"line\">                ticket.sale();</span><br><span class=\"line\">        &#125;,<span class=\"string\">&quot;aa&quot;</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;</span><br><span class=\"line\">                ticket.sale();</span><br><span class=\"line\">        &#125;,<span class=\"string\">&quot;bb&quot;</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;</span><br><span class=\"line\">                ticket.sale();</span><br><span class=\"line\">        &#125;,<span class=\"string\">&quot;cc&quot;</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">结果:</span><br><span class=\"line\">aa:<span class=\"number\">0</span></span><br><span class=\"line\">aa:<span class=\"number\">1</span></span><br><span class=\"line\">aa:<span class=\"number\">2</span></span><br><span class=\"line\">aa:<span class=\"number\">3</span></span><br><span class=\"line\">aa:<span class=\"number\">4</span></span><br><span class=\"line\">cc:<span class=\"number\">5</span></span><br><span class=\"line\">cc:<span class=\"number\">6</span></span><br><span class=\"line\">cc:<span class=\"number\">7</span></span><br><span class=\"line\">cc:<span class=\"number\">8</span></span><br><span class=\"line\">cc:<span class=\"number\">9</span></span><br><span class=\"line\">bb:<span class=\"number\">10</span></span><br><span class=\"line\">bb:<span class=\"number\">11</span></span><br><span class=\"line\">bb:<span class=\"number\">12</span></span><br><span class=\"line\">bb:<span class=\"number\">13</span></span><br><span class=\"line\">bb:<span class=\"number\">14</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>lock没有主动用unlock()去释放锁,会造成死锁现象,因此用lock需要在finally块中释放锁.</strong></p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取锁  </span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">lock</span><span class=\"params\">()</span>   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果当前线程未被中断，则获取锁，可以响应中断  </span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">lockInterruptibly</span><span class=\"params\">()</span>   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回绑定到此 Lock 实例的新 Condition 实例  </span></span><br><span class=\"line\">Condition <span class=\"title function_\">newCondition</span><span class=\"params\">()</span>   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 仅在调用时锁为空闲状态才获取该锁，可以响应中断  </span></span><br><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"title function_\">tryLock</span><span class=\"params\">()</span>   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果锁在给定的等待时间内空闲，并且当前线程未被中断，则获取锁  </span></span><br><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"title function_\">tryLock</span><span class=\"params\">(<span class=\"type\">long</span> time, TimeUnit unit)</span>   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 释放锁  </span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">unlock</span><span class=\"params\">()</span>  </span><br></pre></td></tr></table></figure>\n","categories":["java知识"],"tags":["java基础","方法句柄， JVM"]},{"title":"八锁问题","url":"/2022/07/10/%E5%85%AB%E9%94%81%E9%97%AE%E9%A2%98/","content":"<h1 id=\"八锁问题\"><a href=\"#八锁问题\" class=\"headerlink\" title=\"八锁问题\"></a>八锁问题</h1><ol>\n<li>new发短信后 睡眠100毫秒，发短信、发邮件的打印顺序</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test01</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"type\">Test0101</span> <span class=\"variable\">test0101</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Test0101</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            test0101.sendMessage();</span><br><span class=\"line\">        &#125;,<span class=\"string\">&quot;AAA&quot;</span>).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            test0101.sendEmail();</span><br><span class=\"line\">        &#125;,<span class=\"string\">&quot;BBB&quot;</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Test0101</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sendMessage</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;sendMessage&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sendEmail</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;sendEmail&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">结果:</span><br><span class=\"line\">sendMessage</span><br><span class=\"line\">sendEmail</span><br><span class=\"line\">因为<span class=\"keyword\">synchronized</span>关键字 是对该资源类的对象上锁，因此哪个线程先拿到对象锁，就先执行</span><br></pre></td></tr></table></figure>\n\n<p> 2.发短信线程中执行时睡眠4秒，发短信、发邮件的打印顺序</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test02</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"type\">Test0201</span> <span class=\"variable\">test0201</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Test0201</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            test0201.sendMessage();</span><br><span class=\"line\">        &#125;,<span class=\"string\">&quot;AAA&quot;</span>).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            test0201.sendEmail();</span><br><span class=\"line\">        &#125;,<span class=\"string\">&quot;BBB&quot;</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Test0201</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sendMessage</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">4000</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;sendMessage&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sendEmail</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;sendEmail&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">结果:</span><br><span class=\"line\">sendMessage</span><br><span class=\"line\">sendEmail</span><br><span class=\"line\">原理同上。还是上面的线程先拿到 资源类 锁对象</span><br></pre></td></tr></table></figure>\n\n<p>3.打电话线程，发短信、打电话的打印顺序</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test03</span>  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"type\">Test0301</span> <span class=\"variable\">test0301</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Test0301</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            test0301.sendMessage();</span><br><span class=\"line\">        &#125;,<span class=\"string\">&quot;AAA&quot;</span>).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            test0301.call();</span><br><span class=\"line\">        &#125;,<span class=\"string\">&quot;BBB&quot;</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Test0301</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sendMessage</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">4000</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;sendMessage&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sendEmail</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;sendEmail&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">call</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;call&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">结果:</span><br><span class=\"line\">call</span><br><span class=\"line\">sendMessage</span><br><span class=\"line\"><span class=\"title function_\">call</span><span class=\"params\">()</span>为普通方法,不受同步方法的影响,不受锁的影响</span><br></pre></td></tr></table></figure>\n\n<p>4.两个资源，发短信、发邮件的打印顺序(先邮件后短信)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test04</span>  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"type\">Test0401</span> <span class=\"variable\">test0401</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Test0401</span>();</span><br><span class=\"line\">        <span class=\"type\">Test0401</span> <span class=\"variable\">test0402</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Test0401</span>();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            test0401.sendMessage();</span><br><span class=\"line\">        &#125;,<span class=\"string\">&quot;AAA&quot;</span>).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            test0402.sendEmail();</span><br><span class=\"line\">        &#125;,<span class=\"string\">&quot;BBB&quot;</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Test0401</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sendMessage</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">4000</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;sendMessage&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sendEmail</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">call</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;call&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">结果:</span><br><span class=\"line\">sendEmail</span><br><span class=\"line\">sendMessage</span><br><span class=\"line\">区别于问题<span class=\"number\">1</span>，该情况是 两个资源类对象分别开启两个线程，因此锁对象 并无互相干扰，因为线程延时的原因，打电话 先输出</span><br></pre></td></tr></table></figure>\n\n<p>5.两个同步方法变静态、一个资源，发短信、发邮件的打印顺序</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test05</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"type\">Test0501</span> <span class=\"variable\">test0401</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Test0501</span>();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            test0401.sendMessage();</span><br><span class=\"line\">        &#125;,<span class=\"string\">&quot;AAA&quot;</span>).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            test0401.sendEmail();</span><br><span class=\"line\">        &#125;,<span class=\"string\">&quot;BBB&quot;</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Test0501</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sendMessage</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">4000</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;sendMessage&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sendEmail</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;sendEmail&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">call</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;call&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">结果:</span><br><span class=\"line\">sendMessage</span><br><span class=\"line\">sendEmail</span><br><span class=\"line\">加上<span class=\"keyword\">static</span>关键字之后，两个方法都变为静态方法。</span><br></pre></td></tr></table></figure>\n\n<p>6.两个静态同步方法、两个资源，发短信、发邮件的打印顺序</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test06</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"type\">Test0601</span> <span class=\"variable\">test0601</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Test0601</span>();</span><br><span class=\"line\">        <span class=\"type\">Test0601</span> <span class=\"variable\">test0602</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Test0601</span>();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            test0601.sendMessage();</span><br><span class=\"line\">        &#125;,<span class=\"string\">&quot;AAA&quot;</span>).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            test0602.sendEmail();</span><br><span class=\"line\">        &#125;,<span class=\"string\">&quot;BBB&quot;</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Test0601</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sendMessage</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">4000</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;sendMessage&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sendEmail</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;sendEmail&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">call</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;call&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">结果:</span><br><span class=\"line\">sendMessage</span><br><span class=\"line\">sendEmail</span><br><span class=\"line\">原理同<span class=\"number\">5</span>，<span class=\"keyword\">synchronized</span> 加 静态方法 锁的是 Class</span><br></pre></td></tr></table></figure>\n\n<p>7.一个静态同步方法、一个普通同步方法、一个资源，发短信、发邮件的打印顺序</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test07</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"type\">Test0701</span> <span class=\"variable\">test0701</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Test0701</span>();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            test0701.sendMessage();</span><br><span class=\"line\">        &#125;,<span class=\"string\">&quot;AAA&quot;</span>).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            test0701.sendEmail();</span><br><span class=\"line\">        &#125;,<span class=\"string\">&quot;BBB&quot;</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Test0701</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sendMessage</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">4000</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;sendMessage&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sendEmail</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;sendEmail&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">call</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;call&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">结果:</span><br><span class=\"line\">sendEmail</span><br><span class=\"line\">sendMessage</span><br><span class=\"line\"><span class=\"keyword\">synchronized</span> 锁的是 类实例即对象 、<span class=\"keyword\">synchronized</span> 加 静态方法 锁的是 Class</span><br></pre></td></tr></table></figure>\n\n<p>8.一个静态同步方法、一个普通同步方法、两个资源，发短信、发邮件的打印顺序</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test08</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"type\">Test0801</span> <span class=\"variable\">test0801</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Test0801</span>();</span><br><span class=\"line\">        <span class=\"type\">Test0801</span> <span class=\"variable\">test0802</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Test0801</span>();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            test0801.sendMessage();</span><br><span class=\"line\">        &#125;,<span class=\"string\">&quot;AAA&quot;</span>).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            test0802.sendEmail();</span><br><span class=\"line\">        &#125;,<span class=\"string\">&quot;BBB&quot;</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Test0801</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sendMessage</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">4000</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;sendMessage&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sendEmail</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;sendEmail&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">call</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;call&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">结果:</span><br><span class=\"line\">sendEmail</span><br><span class=\"line\">sendMessage</span><br><span class=\"line\">原理同<span class=\"number\">7</span></span><br></pre></td></tr></table></figure>\n","categories":["java知识"],"tags":["java基础","Juc"]},{"title":"五种IO模型","url":"/2022/09/01/%E4%BA%94%E7%A7%8DIO%E6%A8%A1%E5%9E%8B/","content":"<h2 id=\"Java中的三大IO模型\"><a href=\"#Java中的三大IO模型\" class=\"headerlink\" title=\"Java中的三大IO模型\"></a>Java中的三大IO模型</h2><p>在JDK1.4之前，基于Java所有的socket通信都采用了同步阻塞模型（BIO），这种模型性能低下，当时大型的服务均采用C或C++开发，因为它们可以直接使用操作系统提供的异步IO或者AIO，使得性能得到大幅提升。</p>\n<p>2002年，JDK1.4发布，新增了java.nio包，提供了许多异步IO开发的API和类库。新增的NIO，极大的促进了基于Java的异步非阻塞的发展和应用。</p>\n<p>2011年，JDK7发布，将原有的NIO进行了升级，称为NIO2.0，其中也对AIO进行了支持。</p>\n<h3 id=\"BIO模型\"><a href=\"#BIO模型\" class=\"headerlink\" title=\"BIO模型\"></a>BIO模型</h3><blockquote>\n<p>java中的BIO是blocking I/O的简称，它是同步阻塞型IO，其相关的类和接口在java.io下。</p>\n<p>BIO模型简单来讲，就是服务端为每一个请求都分配一个线程进行处理，如下：</p>\n<p><img src=\"/2022/09/01/%E4%BA%94%E7%A7%8DIO%E6%A8%A1%E5%9E%8B/e8e029a04700e7f4523e63108c6c771992b4b1be.png@942w_497h_progressive.webp\" alt=\"img\"></p>\n<p>示例代码：</p>\n<p>public class BIOServer {</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">ServerSocket</span> <span class=\"variable\">serverSocket</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ServerSocket</span>(<span class=\"number\">6666</span>);</span><br><span class=\"line\">    <span class=\"type\">ExecutorService</span> <span class=\"variable\">executorService</span> <span class=\"operator\">=</span> Executors.newCachedThreadPool();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;等待客户端连接。。。。&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Socket</span> <span class=\"variable\">socket</span> <span class=\"operator\">=</span> serverSocket.accept(); <span class=\"comment\">//阻塞</span></span><br><span class=\"line\">        executorService.execute(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"type\">InputStream</span> <span class=\"variable\">inputStream</span> <span class=\"operator\">=</span> socket.getInputStream(); <span class=\"comment\">//阻塞</span></span><br><span class=\"line\">                <span class=\"type\">byte</span>[] bytes = <span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">                    <span class=\"type\">int</span> <span class=\"variable\">length</span> <span class=\"operator\">=</span> inputStream.read(bytes);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(length == -<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    System.out.println(<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(bytes, <span class=\"number\">0</span>, length, <span class=\"string\">&quot;UTF-8&quot;</span>));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>}<br>这种模式存在的问题：</p>\n<p>客户端的并发数与后端的线程数成1:1的比例，线程的创建、销毁是非常消耗系统资源的，随着并发量增大，服务端性能将显著下降，甚至会发生线程堆栈溢出等错误。</p>\n<p>当连接创建后，如果该线程没有操作时，会进行阻塞操作，这样极大的浪费了服务器资源。</p>\n</blockquote>\n<h3 id=\"NIO模型\"><a href=\"#NIO模型\" class=\"headerlink\" title=\"NIO模型\"></a>NIO模型</h3><blockquote>\n<p>NIO，称之为New IO 或是 non-block IO （非阻塞IO），这两种说法都可以，其实称之为非阻塞IO更恰当一些。</p>\n<p>NIO相关的代码都放在了java.nio包下，其三大核心组件：Buffer（缓冲区）、Channel（通道）、Selector（选择器/多路复用器）</p>\n<p>Buffer</p>\n<p>在NIO中，所有的读写操作都是基于缓冲区完成的，底层是通过数组实现的，常用的缓冲区是ByteBuffer，每一种java基本类型都有对应的缓冲区对象（除了Boolean类型），如：CharBuffer、IntBuffer、LongBuffer等。</p>\n<p>Channel</p>\n<p>在BIO中是基于Stream实现，而在NIO中是基于通道实现，与流不同的是，通道是双向的，既可以读也可以写。</p>\n<p>Selector</p>\n<p>Selector是多路复用器，它会不断的轮询注册在其上的Channel，如果某个Channel上发生读或写事件，这个Channel就处于就绪状态，会被Selector轮询出来，然后通过SelectionKey获取就绪Channel的集合，进行IO的读写操作。</p>\n<p>基本示意图如下：</p>\n<p><img src=\"/2022/09/01/%E4%BA%94%E7%A7%8DIO%E6%A8%A1%E5%9E%8B/262bc99c60a8dacc1116aff1585ec53655e1c44b.png@942w_509h_progressive.webp\" alt=\"img\"></p>\n<p>可以看出，NIO模型要优于BIO模型，主要是：</p>\n<p>通过多路复用器就可以实现一个线程处理多个通道，避免了多线程之间的上下文切换导致系统开销过大。</p>\n<p>NIO无需为每一个连接开一个线程处理，并且只有通道真正有有事件时，才进行读写操作，这样大大的减少了系统开销。</p>\n<p>示例代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SelectorDemo</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 注册事件</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Selector <span class=\"title function_\">getSelector</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"comment\">//获取selector对象</span></span><br><span class=\"line\">        <span class=\"type\">Selector</span> <span class=\"variable\">selector</span> <span class=\"operator\">=</span> Selector.open();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">ServerSocketChannel</span> <span class=\"variable\">serverSocketChannel</span> <span class=\"operator\">=</span> ServerSocketChannel.open();</span><br><span class=\"line\">        serverSocketChannel.configureBlocking(<span class=\"literal\">false</span>); <span class=\"comment\">//非阻塞</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//获取通道并且绑定端口</span></span><br><span class=\"line\">        <span class=\"type\">ServerSocket</span> <span class=\"variable\">socket</span> <span class=\"operator\">=</span> serverSocketChannel.socket();</span><br><span class=\"line\">        socket.bind(<span class=\"keyword\">new</span> <span class=\"title class_\">InetSocketAddress</span>(<span class=\"number\">6677</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//注册感兴趣的事件</span></span><br><span class=\"line\">        serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> selector;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">listen</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">Selector</span> <span class=\"variable\">selector</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.getSelector();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">            selector.select(); <span class=\"comment\">//该方法会阻塞，直到至少有一个事件的发生</span></span><br><span class=\"line\">            Set&lt;SelectionKey&gt; selectionKeys = selector.selectedKeys();</span><br><span class=\"line\">            Iterator&lt;SelectionKey&gt; iterator = selectionKeys.iterator();</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (iterator.hasNext()) &#123;</span><br><span class=\"line\">                <span class=\"type\">SelectionKey</span> <span class=\"variable\">selectionKey</span> <span class=\"operator\">=</span> iterator.next();</span><br><span class=\"line\">                process(selectionKey, selector);</span><br><span class=\"line\">                iterator.remove();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">process</span><span class=\"params\">(SelectionKey key, Selector selector)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(key.isAcceptable())&#123; <span class=\"comment\">//新连接请求</span></span><br><span class=\"line\">            <span class=\"type\">ServerSocketChannel</span> <span class=\"variable\">server</span> <span class=\"operator\">=</span> (ServerSocketChannel)key.channel();</span><br><span class=\"line\">            <span class=\"type\">SocketChannel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> server.accept();</span><br><span class=\"line\">            channel.configureBlocking(<span class=\"literal\">false</span>); <span class=\"comment\">//非阻塞</span></span><br><span class=\"line\">            channel.register(selector, SelectionKey.OP_READ);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(key.isReadable())&#123; <span class=\"comment\">//读数据</span></span><br><span class=\"line\">            <span class=\"type\">SocketChannel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> (SocketChannel)key.channel();</span><br><span class=\"line\">            <span class=\"type\">ByteBuffer</span> <span class=\"variable\">byteBuffer</span> <span class=\"operator\">=</span> ByteBuffer.allocate(<span class=\"number\">1024</span>);</span><br><span class=\"line\">            channel.read(byteBuffer);</span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;form 客户端 &quot;</span> + <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(byteBuffer.array(), <span class=\"number\">0</span>, byteBuffer.position()));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">SelectorDemo</span>().listen();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h3 id=\"AIO模型\"><a href=\"#AIO模型\" class=\"headerlink\" title=\"AIO模型\"></a>AIO模型</h3><blockquote>\n<p>在NIO中，Selector多路复用器在做轮询时，如果没有事件发生，也会进行阻塞，如何能把这个阻塞也优化掉呢？那么AIO就在这样的背景下诞生了。</p>\n<p>AIO是asynchronous I/O的简称，是异步IO，该异步IO是需要依赖于操作系统底层的异步IO实现。</p>\n<p>AIO的基本流程是：用户线程通过系统调用，告知kernel内核启动某个IO操作，用户线程返回。kernel内核在整个IO操作（包括数据准备、数据复制）完成后，通知用户程序，用户执行后续的业务操作。</p>\n<ul>\n<li><p>kernel的数据准备</p>\n<p>将数据从网络物理设备（网卡）读取到内核缓冲区。</p>\n</li>\n<li><p>kernel的数据复制</p>\n<p>将数据从内核缓冲区拷贝到用户程序空间的缓冲区。</p>\n<p><img src=\"/2022/09/01/%E4%BA%94%E7%A7%8DIO%E6%A8%A1%E5%9E%8B/583df5514d2c98bf09ae08637144d8e96e47704f.png@731w_681h_progressive.webp\" alt=\"img\"></p>\n<p>目前AIO模型存在的不足：</p>\n<ol>\n<li><p>需要完成事件的注册与传递，这里边需要底层操作系统提供大量的支持，去做大量的工作。</p>\n</li>\n<li><p>Windows 系统下通过 IOCP 实现了真正的异步 I/O。但是，就目前的业界形式来说，Windows 系统，很少作为百万级以上或者说高并发应用的服务器操作系统来使用。</p>\n</li>\n<li><p>而在 Linux 系统下，异步IO模型在2.6版本才引入，目前并不完善。所以，这也是在 Linux 下，实现高并发网络编程时都是以 NIO 多路复用模型模式为主。</p>\n</li>\n</ol>\n</li>\n</ul>\n</blockquote>\n<h3 id=\"Reactor模型\"><a href=\"#Reactor模型\" class=\"headerlink\" title=\"Reactor模型\"></a>Reactor模型</h3><blockquote>\n<p>Reactor线程模型不是Java专属，也不是Netty专属，它其实是一种并发编程模型，是一种思想，具有指导意义。比如，Netty就是结合了NIO的特点，应用了Reactor线程模型所实现的。</p>\n<p>Reactor模型中定义的三种角色：</p>\n<ul>\n<li>Reactor：负责监听和分配事件，将I/O事件分派给对应的Handler。新的事件包含连接建立就绪、读就绪、写就绪等。</li>\n<li>Acceptor：处理客户端新连接，并分派请求到处理器链中。</li>\n<li>Handler：将自身与事件绑定，执行非阻塞读/写任务，完成channel的读入，完成处理业务逻辑后，负责将结果写出channel。</li>\n</ul>\n<p>常见的Reactor线程模型有三种，如下：</p>\n<ul>\n<li>Reactor单线程模型</li>\n<li>Reactor多线程模型</li>\n<li>主从Reactor多线程模型</li>\n</ul>\n<h4 id=\"单Reactor单线程模型\"><a href=\"#单Reactor单线程模型\" class=\"headerlink\" title=\"单Reactor单线程模型\"></a>单Reactor单线程模型</h4><p><img src=\"/2022/09/01/%E4%BA%94%E7%A7%8DIO%E6%A8%A1%E5%9E%8B/9d48bbccca4988a42fceda53b7faef999a4593c0.png@942w_381h_progressive.webp\" alt=\"img\"></p>\n<p>说明:</p>\n<ul>\n<li>Reactor充当多路复用器角色，监听多路连接的请求，由单线程完成</li>\n<li>Reactor收到客户端发来的请求时，如果是新建连接通过Acceptor完成，其他的请求Handler完成。</li>\n<li>Handler完成业务逻辑的处理，基本的流程是：Read –&gt; 业务处理 –&gt; Send 。</li>\n</ul>\n<p>这种模型优点:</p>\n<ul>\n<li>结构简单，由单线程完成，没有多线程、进程通信等问题</li>\n<li>适合在一些业务逻辑比较简单、对于性能要求不高的应用场景</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>由于是单线程操作、不能充分发挥多核CPU的性能</li>\n<li>当Reactor线程负载过重之后、处理速度将变慢，这会导致大量客户端连接超时，超时之后往往会进行重发，这更加重Reactor线程的负载，最终会导致大量消息积压和处理超时，成为系统的性能瓶颈。</li>\n<li>可靠性差，如果该线程进入死循环或意外终止，就会导致整个通信系统不可用，容易造成单点故障。 </li>\n</ul>\n<h4 id=\"单Reactor多线程模型\"><a href=\"#单Reactor多线程模型\" class=\"headerlink\" title=\"单Reactor多线程模型\"></a>单Reactor多线程模型</h4><p><img src=\"/2022/09/01/%E4%BA%94%E7%A7%8DIO%E6%A8%A1%E5%9E%8B/0a19c9de9af761ed990068f2f48871268bd0cb02.png@942w_576h_progressive.webp\" alt=\"img\"></p>\n<p>说明:</p>\n<ul>\n<li>在Reactor多线程模型相比较单线程模型而言，不同点在于，Handler不会处理业务逻辑，只是负责响应用户请求，真正的业务逻辑，在另外的线程中完成。</li>\n<li>这样可以降低Reactor的性能开销，充分利用CPU资源，从而更专注的做事件分发工作了，提升整个应用的吞吐。 </li>\n</ul>\n<p>但是这个模型存在的问题：</p>\n<ul>\n<li><p>多线程数据共享和访问比较复杂。如果子线程完成业务处理后，把结果传递给主线程Reactor进行发送，就会涉及共享数据的互斥和保护机制。</p>\n</li>\n<li><p>Reactor承担所有事件的监听和响应，只在主线程中运行，可能会存在性能问题。例如并发百万客户端连接，或者服务端需要对客户端握手进行安全认证，但是认证本身非常损耗性能。</p>\n</li>\n</ul>\n<p>为了解决性能问题，产生了第三种主从Reactor多线程模型。</p>\n<h4 id=\"主从Reactor多线程模型\"><a href=\"#主从Reactor多线程模型\" class=\"headerlink\" title=\"主从Reactor多线程模型\"></a>主从Reactor多线程模型</h4><p><img src=\"/2022/09/01/%E4%BA%94%E7%A7%8DIO%E6%A8%A1%E5%9E%8B/348b425d88ffbce6873196c1ca299f07320f70ac.png@942w_432h_progressive.webp\" alt=\"img\"></p>\n<p>在主从模型中，将Reactor分成2部分：</p>\n<ul>\n<li>MainReactor负责监听server socket，用来处理网络IO连接建立操作，将建立的socketChannel指定注册给SubReactor。</li>\n<li>SubReactor主要完成和建立起来的socket的数据交互和事件业务处理操作。</li>\n</ul>\n<p>该模型的优点：</p>\n<ul>\n<li><p>响应快，不必为单个同步事件所阻塞，虽然Reactor本身依然是同步的。</p>\n</li>\n<li><p>可扩展性强，可以方便地通过增加SubReactor实例个数来充分利用CPU资源。</p>\n</li>\n<li><p>可复用性高，Reactor模型本身与具体事件处理逻辑无关，具有很高的复用性。</p>\n</li>\n</ul>\n</blockquote>\n<h3 id=\"Netty模型\"><a href=\"#Netty模型\" class=\"headerlink\" title=\"Netty模型\"></a>Netty模型</h3><blockquote>\n<p>Netty模型是基于Reactor模型实现的，对于以上三种模型都有非常好的支持，也非常的灵活，一般情况，在服务端会采用主从架构模型，基本示意图如下：</p>\n<p><img src=\"/2022/09/01/%E4%BA%94%E7%A7%8DIO%E6%A8%A1%E5%9E%8B/a463c8eb5c2ebd4db875eed66346404d55c741b6.png@942w_369h_progressive.webp\" alt=\"img\"></p>\n<p>说明：</p>\n<ul>\n<li><p>在Netty模型中，负责处理新连接事件的是BossGroup，负责处理其他事件的是WorkGroup。Group就是线程池的概念。</p>\n</li>\n<li><p>NioEventLoop表示一个不断循环的执行处理任务的线程，用于监听绑定在其上的读/写事件。</p>\n</li>\n<li><p>通过Pipeline（管道）执行业务逻辑的处理，Pipeline中会有多个ChannelHandler，真正的业务逻辑是在ChannelHandler中完成的。</p>\n</li>\n</ul>\n</blockquote>\n","categories":["面试"],"tags":["面试","Linux","IO"]},{"title":"分布式面试","url":"/2022/06/12/%E5%88%86%E5%B8%83%E5%BC%8F%E9%9D%A2%E8%AF%95/","content":"<h2 id=\"分布式\"><a href=\"#分布式\" class=\"headerlink\" title=\"分布式\"></a>分布式</h2><h3 id=\"1-什么是CAP理论\"><a href=\"#1-什么是CAP理论\" class=\"headerlink\" title=\"1.什么是CAP理论\"></a>1.什么是CAP理论</h3><blockquote>\n<p>CAP理论是分布式领域中非常重要的一个指导理论，C(Consistency)表示强一致性，A(Availability)表示可用性，P(Partition Tolerance)表示<br>分区容错性，CAP理论指出在目前的硬件条件下，一个分布式系统是必须要保证分区容错性的，而在这个前提下，分布式系统要么保证C，要么保证AP，无法同时保证CAP。</p>\n<p><strong>分区容错性</strong>表示，一个系统虽然是分布式的，但是对外看上去应该是一个整体，不能由于分布式系统内部的某个结点挂点，或网络出现了故障，而导致系统对外出现异常。所以，对于分布式系统而言是一定要保证分区容错性的。</p>\n<p><strong>强一致性</strong>表示，一个分布式系统中各个结点之间能及时的同步数据，在数据同步过程中，是不能对外提供服务的，不然就会造成数据不一致，所以强一致性和可用性是不能同时满足的。</p>\n<p><strong>可用性</strong>表示，一个分布式系统对外要保证可用。</p>\n</blockquote>\n<h3 id=\"2-什么是BASE理论\"><a href=\"#2-什么是BASE理论\" class=\"headerlink\" title=\"2.什么是BASE理论\"></a>2.什么是BASE理论</h3><blockquote>\n<p>由于不能同时满足CAP，所以出现了BASE理论:<br>1.BA: Basically Available，表示基本可用，表示可以允许一定程度的不可用，比如由于系统故障，请求时间变长，或者由于系统故障导致部分<br>非核心功能不可用，都是允许的</p>\n<p>2.S: Soft state:表示分布式系统可以处于一种中间状态，比如数据正在同步</p>\n<p>3.E:Eventually consistent，表示最终一致性，不要求分布式系统数据实时达到一致，允许在经过一段时间后再达到一致，在达到一致过程中<br>系统也是可用的</p>\n</blockquote>\n<h3 id=\"3-什么是RPC\"><a href=\"#3-什么是RPC\" class=\"headerlink\" title=\"3.什么是RPC\"></a>3.什么是RPC</h3><blockquote>\n<h2 id=\"什么是-RPC-？\"><a href=\"#什么是-RPC-？\" class=\"headerlink\" title=\"什么是 RPC ？\"></a>什么是 RPC ？</h2><ul>\n<li>RPC (Remote Procedure Call)即<strong>远程过程调用</strong>，是分布式系统常见的一种通信方法。它允许程序调用另一个地址空间（通常是共享网络的另一台机器上）的过程或函数，而不用程序员显式编码这个远程调用的细节。</li>\n<li>除 RPC 之外，常见的多系统数据交互方案还有分布式消息队列、HTTP 请求调用、数据库和分布式缓存等。</li>\n<li>其中 RPC 和 HTTP 调用是没有经过中间件的，它们是端到端系统的直接数据交互。</li>\n</ul>\n<p><strong>简单的说</strong></p>\n<ul>\n<li>RPC就是从一台机器（客户端）上通过参数传递的方式调用另一台机器（服务器）上的一个函数或方法（可以统称为服务）并得到返回的结果。</li>\n<li>RPC会隐藏底层的通讯细节（不需要直接处理Socket通讯或Http通讯）。</li>\n<li>客户端发起请求，服务器返回响应（类似于Http的工作方式）RPC在使用形式上像调用本地函数（或方法）一样去调用远程的函数（或方法）。</li>\n</ul>\n</blockquote>\n<h3 id=\"4-什么是分布式ID\"><a href=\"#4-什么是分布式ID\" class=\"headerlink\" title=\"4.什么是分布式ID\"></a>4.什么是分布式ID</h3><blockquote>\n<p>在分布式系统中，经常需要一些全局唯一的ID对数据、消息、http请求等进行唯一标识。那么这个全局唯一ID就叫分布式ID</p>\n</blockquote>\n<h3 id=\"5-为什么需要分布式ID\"><a href=\"#5-为什么需要分布式ID\" class=\"headerlink\" title=\"5.为什么需要分布式ID\"></a>5.为什么需要分布式ID</h3><blockquote>\n<p>1.如果id我们使用的是数据库的自增长类型，在分布式系统中需要分库和分表时，会有两个相同的表，有可能产生主键冲突。</p>\n<p>2.电商订单号，采用自增方式，是最简单的生成规则。但是！这种与流水号相同的订单号很容易就被竞争对手看出你公司真实的运营信息。</p>\n</blockquote>\n<h3 id=\"6-分布式ID解决方案\"><a href=\"#6-分布式ID解决方案\" class=\"headerlink\" title=\"6.分布式ID解决方案\"></a>6.分布式ID解决方案</h3><blockquote>\n<p>1.uuid，这种方案复杂度最低，但是会影响存储空间和性能</p>\n<p>⒉利用单机数据库的自增主键，作为分布式ID的生成器，复杂度适中，ID长度较之uuid更短，但是受到单机数据库性能的限制，并发量大的时候此方案也不是最优方案</p>\n<p>3.利用redis、zookeeper的特性来生成id，比如redis的自增命令、zookeeper的顺序节点，这种方案和单机数据库(mysql)相比，性能有所提高,可以适当选用</p>\n<p>4.雪花算法，一切问题如果能直接用算法解决，那就是最合适的，利用雪花算法也可以生成分布式ID，底层原理就是通过某台机器在某一毫秒内对某一个数字自增，这种方案也能保证分布式架构中的系统id唯一，但是只能保证趋势递增。业界存在tinyid、 leaf等开源中间件实现了雪花算法</p>\n</blockquote>\n<h3 id=\"7-分布式锁的使用场景和实现方案\"><a href=\"#7-分布式锁的使用场景和实现方案\" class=\"headerlink\" title=\"7.分布式锁的使用场景和实现方案\"></a>7.分布式锁的使用场景和实现方案</h3><blockquote>\n<p>在单体架构中，多个线程都是属于同一个进程的，所以在线程并发执行时，遇到资源竞争时，可以利用ReentrantLock、synchronized等技术来作为锁，来控制共享资源的使用。</p>\n<p>而在分布式架构中，多个线程是可能处于不同进程中的，而这些线程并发执行遇到资源竞争时，利用ReentrantLock、synchronized等技术是没办法来控制多个进程中的线程的，所以需要分布式锁，意思就是，需要一个分布式锁生成器，分布式系统中的应用程序都可以来使用这个生成器所提供的锁，从而达到多个进程中的线程使用同一把锁。</p>\n<p>目前主流的分布式锁的实现方案有两种:</p>\n<p>1.zookeeper:利用的是zookeeper的临时节点、顺序节点、watch机制来实现的，zookeeper分布式锁的特点是高一致性，因为zookeeper保证的是CP，所以由它实现的分布式锁更可靠，不会出现混乱</p>\n<p>2.redis:利用redis的setnw、lua脚本、消费订阅等机制来实现的，redis分布式锁的特点是高可用，因为redis保证的是AP，所以由它实现的分布式锁可能不可靠，不稳定(一旦redis中的数据出现了不一致)，可能会出现多个客户端同时加到锁的情况</p>\n</blockquote>\n<h3 id=\"8-分布式事务和实现实现方案\"><a href=\"#8-分布式事务和实现实现方案\" class=\"headerlink\" title=\"8.分布式事务和实现实现方案\"></a>8.分布式事务和实现实现方案</h3><blockquote>\n<p>在分布式系统中，一次业务处理可能需要多个应用来实现，比如用户发送一次下单请求，就涉及到订单系统创建订单、库存系统减库存，而对于一次下单，订单创建与减库存应该是要同时成功或同时失败的，但在分布式系统中，如果不做处理，就很有可能出现订单创建成功，但是减库存失败，那么解决这类问题，就需要用到分布式事务。常用解决方案有:</p>\n<p>1.本地消息表:创建订单时，将减库存消息加入在本地事务中，一起提交到数据库存入本地消息表，然后调用库存系统，如果调用成功则修改本地消息状态为成功，如果调用库存系统失败，则由后台定时任务从本地消息表中取出未成功的消息，重试调用库存系统</p>\n<p>2.消息队列:目前RocketMQ中支持事务消息，它的工作原理是:</p>\n<p>a.生产者订单系统先发送一条half消息到Broker，half消息对消费者而言是不可见的</p>\n<p>b.再创建订单，根据创建订单成功与否，向Broker发送commit或rollback</p>\n<p>c.并且生产者订单系统还可以提供Broker回调接口，当Broker发现一段时间half消息没有收到任何操作命令，则会主动调此接口来查询订单是否创建成功</p>\n<p>d.一旦half消息commit了，消费者库存系统就会来消费，如果消费成功，则消息销毁，分布式事务成功结束</p>\n<p>e.如果消费失败，则根据重试策略进行重试，最后还失败则进入死信队列，等待进一步处理</p>\n<p>3.Seata:阿里开源的分布式事务框架，支持AT、TCC等多种模式，底层都是基于两阶段提交理论来实现的</p>\n</blockquote>\n<h3 id=\"9-简述zab协议\"><a href=\"#9-简述zab协议\" class=\"headerlink\" title=\"9.简述zab协议\"></a>9.简述zab协议</h3><blockquote>\n<p>ZAB协议（Zookeeper Atomic Broadcast原子广播）是Zookeeper用来实现一致性的原子广播协议，该协议描述了Zookeeper是如何实现一致性的，分为三个阶段:</p>\n<p>1.领导者选举阶段:从Zookeeper集群中选出一个节点作为Leader，所有的写请求都会由Leader节点来处理</p>\n<p>⒉数据同步阶段:集群中所有节点中的数据要和Leader节点保持一致，如果不一致则要进行同步</p>\n<p>3.请求广播阶段:当Leader节点接收到写请求时，会利用两阶段提交来广播该写请求，使得写请求像事务一样在其他节点上执行，达到节点上的数据实时一致</p>\n<p>但值得注意的是，Zookeeper只是尽量的在达到强一致性，实际上仍然只是最终一致性的。</p>\n</blockquote>\n<h3 id=\"10-Spring-Cloud和Dubbo有哪些区别\"><a href=\"#10-Spring-Cloud和Dubbo有哪些区别\" class=\"headerlink\" title=\"10.Spring Cloud和Dubbo有哪些区别?\"></a>10.Spring Cloud和Dubbo有哪些区别?</h3><blockquote>\n<p>Spring Cloud是一个微服务框架，提供了微服务领域中的很多功能组件，Dubbo一开始是一个RPC调用框架，核心是解决服务调用间的问题，Spring Cloud是一个大而全的框架，Dubbo则更侧重于服务调用，所以Dubbo所提供的功能没有SpringCloud全面，但是Dubbo的服务调用性能比Spring Cloud高，不过Spring Cloud和Dubbo并不是对立的，是可以结合起来一起使用的。</p>\n</blockquote>\n<h3 id=\"11-什么是服务雪崩-什么是服务限流\"><a href=\"#11-什么是服务雪崩-什么是服务限流\" class=\"headerlink\" title=\"11.什么是服务雪崩?什么是服务限流?\"></a>11.什么是服务雪崩?什么是服务限流?</h3><blockquote>\n<p>1.当服务A调用服务B，服务B调用C，此时大量请求突然请求服务A，假如服务A本身能抗住这些请求，但是如果服务C抗<br>不住，导致服务C请求堆积，从而服务B请求堆积，从而服务A不可用，这就是服务雪崩，解决方式就是服务降级和服务熔断。<br>2．服务限流是指在高并发请求下，为了保护系统，可以对访问服务的请求进行数量上的限制，从而防止系统不被大量请求<br>压垮，在秒杀中，限流是非常重要的。</p>\n</blockquote>\n<h3 id=\"12-什么是服务熔断-什么是服务降级-区别是什么\"><a href=\"#12-什么是服务熔断-什么是服务降级-区别是什么\" class=\"headerlink\" title=\"12.什么是服务熔断?什么是服务降级?区别是什么?\"></a>12.什么是服务熔断?什么是服务降级?区别是什么?</h3><blockquote>\n<p>1.服务熔断是指，当服务A调用的某个服务B不可用时，上游服务A为了保证自己不受影响，从而不再调用服务B，直接返回一个结果，减轻服务A和服务B的压力，直到服务B恢复。</p>\n<p>2.服务降级是指，当发现系统压力过载时，可以通过关闭某个服务，或限流某个服务来减轻系统压力，这就是服务降级。</p>\n<p>相同点:</p>\n<p>1．都是为了防止系统崩溃</p>\n<p>2．都让用户体验到某些功能暂时不可用</p>\n<p>不同点:熔断是下游服务故障触发的，降级是为了降低系统负载</p>\n</blockquote>\n","categories":["面试"],"tags":["面试","分布式"]},{"title":"十大排序算法","url":"/2022/08/20/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/","content":"<p> 下图展示了十大排序的名字和大致用法 </p>\n<p><img src=\"/2022/08/20/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/1652691519-SVKUkM-image.png\" alt=\"image.png\"></p>\n<h3 id><a href=\"#\" class=\"headerlink\" title></a></h3><blockquote>\n<p>说到排序，首先要用到就是交换数字，接下来谈谈三次交换方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 方法一: 利用临时数tmp</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">swap</span><span class=\"params\">(<span class=\"type\">int</span>[] arr, <span class=\"type\">int</span> i, <span class=\"type\">int</span> j)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">tmp</span> <span class=\"operator\">=</span> arr[i];</span><br><span class=\"line\">    arr[i] = arr[j];</span><br><span class=\"line\">    arr[j] = tmp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 方法二: 利用加减运算</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">swapCal</span><span class=\"params\">(<span class=\"type\">int</span>[] arr, <span class=\"type\">int</span> i, <span class=\"type\">int</span> j)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i == j) <span class=\"keyword\">return</span>; <span class=\"comment\">// 若无法保证swapCal被调用时满足 i != j，则需有此句，否则i == j时此数将变为0</span></span><br><span class=\"line\">    arr[i] = arr[i] + arr[j]; <span class=\"comment\">// a = a + b</span></span><br><span class=\"line\">    arr[j] = arr[i] - arr[j]; <span class=\"comment\">// b = a - b</span></span><br><span class=\"line\">    arr[i] = arr[i] - arr[j]; <span class=\"comment\">// a = a - b</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 方法三: 利用异或运算</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">swapXOR</span><span class=\"params\">(<span class=\"type\">int</span>[] arr, <span class=\"type\">int</span> i, <span class=\"type\">int</span> j)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i == j) <span class=\"keyword\">return</span>; <span class=\"comment\">// 若无法保证swapXOR被调用时满足 i != j，则需有此句，否则i == j时此数将变为0</span></span><br><span class=\"line\">    arr[i] = arr[i] ^ arr[j]; <span class=\"comment\">// a = a ^ b，也可写成 arr[i] ^= arr[j];</span></span><br><span class=\"line\">    arr[j] = arr[i] ^ arr[j]; <span class=\"comment\">// b = (a ^ b) ^ b = a ^ (b ^ b) = a ^ 0 = a， 也可写成 arr[j] ^= arr[i];</span></span><br><span class=\"line\">    arr[i] = arr[i] ^ arr[j]; <span class=\"comment\">// a = (a ^ b) ^ a = (a ^ a) ^ b = 0 ^ b = b， 也可写成 arr[i] ^= arr[j];</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">方法一: 利用一个临时数 tmp 来交换 arr[i] ，arr[j] 。</span><br><span class=\"line\">方法二: 利用 arr[i] 和和 arr[j] 的加减运算避免临时数 tmp 的开销，但由于涉及到加减法可能导致数字 「提前溢出」 。</span><br><span class=\"line\">方法三: 利用位运算中的 异或 运算，能够避免 tmp 的开销且不会导致数字溢出。</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h3 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h3><blockquote>\n<p>从第一位开始向后依次比较，如果前者大则交换（实际根据大小方向），循环arr.length-1次</p>\n<h4 id=\"最笨的形式\"><a href=\"#最笨的形式\" class=\"headerlink\" title=\"最笨的形式\"></a>最笨的形式</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span>[] bubbleSort(<span class=\"type\">int</span>[] arr) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; arr.length - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; j &lt; arr.length - i; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[j - <span class=\"number\">1</span>] &gt; arr[j]) &#123;</span><br><span class=\"line\">                swap(arr, j - <span class=\"number\">1</span>, j);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化\"></a>优化</h4><h5 id=\"提前结束优化\"><a href=\"#提前结束优化\" class=\"headerlink\" title=\"提前结束优化\"></a>提前结束优化</h5><p>当某一轮比较均未发生交换，说明排序已完成，可设置一个布尔值记录一轮排序是否有发生交换，若无则提前退出循环结束程序。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span>[] bubbleSort(<span class=\"type\">int</span>[] arr) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr.length &lt; <span class=\"number\">2</span>) <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">    <span class=\"comment\">// n - 1轮次执行，当前 n - 1 个元素排好后，最后一个元素无需执行，故i &lt; arr.length - 1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; arr.length - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 本轮执行是否有交换的标志，若无则false，若有则true</span></span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">swapped</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 每轮循环，通过依次向右比较两个数，将本轮循环中最大的数放到最右</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; j &lt; arr.length - i; j++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 若左大于右则交换，并将swapped置为true</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[j - <span class=\"number\">1</span>] &gt; arr[j]) &#123;</span><br><span class=\"line\">                swap(arr, j - <span class=\"number\">1</span>, j);</span><br><span class=\"line\">                swapped = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 若无交换，表示当前数组已完全排序，退出大循环</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!swapped) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"冒泡界优化\"><a href=\"#冒泡界优化\" class=\"headerlink\" title=\"冒泡界优化\"></a>冒泡界优化</h5><p>记录前一轮交换的最终位置，说明该位置之后的元素为已排序状态，下一轮的交换只需执行到该处。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span>[] bubbleSort(<span class=\"type\">int</span>[] arr) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr.length &lt; <span class=\"number\">2</span>) <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">swapped</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">lastSwappedIdx</span> <span class=\"operator\">=</span> arr.length - <span class=\"number\">1</span> ;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">swappedIdx</span> <span class=\"operator\">=</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">// lastSwappedIdx表示前一轮交换的最终位置，即下标为lastSwappedIdx是未排序部分中的最后一个数的下标，</span></span><br><span class=\"line\">    <span class=\"comment\">// 因此for中的界是i &lt; lastSwappedIdx而不需要写成i &lt;= lastSwappedIdx</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (swapped) &#123; <span class=\"comment\">// 当swapped = false时，排序完成</span></span><br><span class=\"line\">        <span class=\"comment\">// 本轮执行是否有交换的标志，若无则true，若有则false</span></span><br><span class=\"line\">        swapped = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 每轮循环，通过依次向右比较两个数，将本轮循环中最大的数放到最右</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; lastSwappedIdx; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 若左大于右则交换，并将swapped置为true</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[i] &gt; arr[i + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                swap(arr, i, i + <span class=\"number\">1</span>);</span><br><span class=\"line\">                swapped = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                swappedIdx = i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        lastSwappedIdx = swappedIdx;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>平均时间复杂度:O(n^2)</strong></p>\n<p><strong>空间复杂度:O(n)</strong></p>\n<p><strong>稳定</strong></p>\n</blockquote>\n<h3 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h3><blockquote>\n<p>每一轮循环选一个最小（或者最大）的数放到第i位，循环arr.length-1次</p>\n<h4 id=\"单元选择排序\"><a href=\"#单元选择排序\" class=\"headerlink\" title=\"单元选择排序\"></a>单元选择排序</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span>[] selectSort(<span class=\"type\">int</span>[] arr) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr.length &lt; <span class=\"number\">2</span>) <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">    <span class=\"comment\">// n - 1 轮次执行,当前 n - 1 个元素排好后，最后一个元素无需执行，故 i &lt; arr.length - 1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; arr.length - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">minIdx</span> <span class=\"operator\">=</span> i;</span><br><span class=\"line\">        <span class=\"comment\">// 找到本轮执行中最小的元素，将最小值下标赋值给min</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> i + <span class=\"number\">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[j] &lt; arr[minIdx])  minIdx = j;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 若本轮第一个数字不是最小值，则交换位置</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (minIdx != i) swap(arr, i, minIdx);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"双元选择排序\"><a href=\"#双元选择排序\" class=\"headerlink\" title=\"双元选择排序\"></a>双元选择排序</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span>[] selectSortDouble(<span class=\"type\">int</span>[] arr) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr.length &lt; <span class=\"number\">2</span>) <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> arr.length;</span><br><span class=\"line\">    <span class=\"comment\">// 每轮确定两个数字，因此界也会动态变化</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; n - <span class=\"number\">1</span> - i; i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">minIdx</span> <span class=\"operator\">=</span> i, maxIdx = i;</span><br><span class=\"line\">        <span class=\"comment\">// 找到本轮执行中最小和最大的元素</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> i + <span class=\"number\">1</span>; j &lt; n - i; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[j] &lt; arr[minIdx]) minIdx = j;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(arr[j] &gt; arr[maxIdx]) maxIdx = j;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 若本轮最大值等于最小值，说明未排序部分所有元素相等，无需再排序</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(minIdx == maxIdx) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 若本轮第一个数字不是最小值，则交换位置（将最小值与本轮第一个数字交换位置）</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (minIdx != i) swap(arr, i, minIdx);</span><br><span class=\"line\">        <span class=\"comment\">// 在交换i和minIdx时，有可能出现i即maxIdx的情况，此时需要修改maxIdx为minIdx</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(maxIdx == i) maxIdx = minIdx;</span><br><span class=\"line\">        <span class=\"comment\">// 若本轮最后一个数字不是最大值，则交换位置（将最大值与本轮最后一个数字交换位置）</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (maxIdx != n - <span class=\"number\">1</span> - i) swap(arr, n - <span class=\"number\">1</span> - i, maxIdx);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>平均时间:O(n^2)</strong></p>\n<p><strong>空间:O(1)</strong></p>\n<p><strong>不稳定</strong></p>\n</blockquote>\n<h3 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h3><blockquote>\n<p>对于待排序数组，从第2个元素开始(称作插入对象元素)，比较它与之前的元素(称作比较对象元素)，当插入对象元素小于比较对象元素时，继续往前比较，直到不小于(≥)比较对象，此时将插入对象元素插入到该次比较对象元素之后。重复这个插入过程直到最后一个元素作为插入对象元素完成插入操作。</p>\n<h4 id=\"简单插入排序\"><a href=\"#简单插入排序\" class=\"headerlink\" title=\"简单插入排序\"></a>简单插入排序</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span>[] insertSort(<span class=\"type\">int</span>[] arr) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr.length &lt; <span class=\"number\">2</span>) <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; arr.length; i++) &#123; <span class=\"comment\">// N-1轮次执行</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">target</span> <span class=\"operator\">=</span> arr[i], j = i - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (; j &gt;= <span class=\"number\">0</span>; j--) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(target &lt; arr[j]) arr[j + <span class=\"number\">1</span>] = arr[j];</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        arr[j + <span class=\"number\">1</span>] = target; <span class=\"comment\">// 若发生移动，此时的插入对象数字≥j位置的数字，故插入位置为j + 1，若未移动也成立，无需判断</span></span><br><span class=\"line\">        <span class=\"comment\">// if(j != i - 1) arr[j + 1] = target; // 也可以用这种写法，表示发生移动才插入，否则不必插入(赋值)，但不判断效率更高</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"折半插入优化-利用二分来减少中间比较次数\"><a href=\"#折半插入优化-利用二分来减少中间比较次数\" class=\"headerlink\" title=\"折半插入优化(利用二分来减少中间比较次数)\"></a>折半插入优化(利用二分来减少中间比较次数)</h4><p>注意到插入排序的每一轮向前插入都使得该元素在完成插入后，从第一个元素到该元素是排序状态（指这部分的相对排序状态，在它们中间后续可能还会插入其他数字），利用这一点，对一个新的插入对象向前执行折半插入，能够显著减少比较的次数。另一种优化是增量递减插入排序，也叫希尔排序，将在希尔排序章节中介绍。</p>\n<p>折半插入的关键在于找到插入位置，折半过程代码如下。这实际上是二分查找「模版一」中的「小于等于」情形。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span>[] insertSortBinary(<span class=\"type\">int</span>[] arr) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr.length &lt; <span class=\"number\">2</span>) <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">    <span class=\"comment\">// n - 1 轮次执行</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 若当前插入对象大于等于前一个对象，无需插入</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arr[i - <span class=\"number\">1</span>] &lt;= arr[i]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">target</span> <span class=\"operator\">=</span> arr[i];</span><br><span class=\"line\">        <span class=\"comment\">// 折半查找 (二分查找「模版一」)</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">low</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>, high = i - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"comment\">// while结束后，target要插入的位置为low或high + 1 (low = high + 1)</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (low &lt;= high) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">center</span> <span class=\"operator\">=</span> low + (high - low) / <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[center] &lt;= target) low = center + <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> high = center - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> i; j &gt; low; j--) &#123; <span class=\"comment\">// 移动</span></span><br><span class=\"line\">            arr[j] = arr[j - <span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        arr[low] = target; <span class=\"comment\">// 插入</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>平均时间:O(n^2)</strong></p>\n<p><strong>空间:O(1)</strong></p>\n<p><strong>不稳定</strong></p>\n</blockquote>\n<h3 id=\"希尔排序\"><a href=\"#希尔排序\" class=\"headerlink\" title=\"希尔排序\"></a>希尔排序</h3><blockquote>\n<p>希尔排序是基于插入排序的以下两点性质而提出改进方法的：</p>\n<ul>\n<li>插入排序在对几乎已经排好序的数据操作时，效率高，即可以达到线性排序的效率；</li>\n<li>但插入排序一般来说是低效的，因为插入排序每次只能将数据移动一位；</li>\n</ul>\n<p>希尔排序的基本思想是：先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，待整个序列中的记录”基本有序”时，再对全体记录进行依次直接插入排序。</p>\n<h4 id=\"Shell增量\"><a href=\"#Shell增量\" class=\"headerlink\" title=\"Shell增量\"></a>Shell增量</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 希尔排序：采用Shell增量 N / 2^k</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span>[] shellSortShell(<span class=\"type\">int</span>[] arr) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr.length &lt; <span class=\"number\">2</span>) <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> arr.length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">gap</span> <span class=\"operator\">=</span> n / <span class=\"number\">2</span>; gap &gt; <span class=\"number\">0</span>; gap /= <span class=\"number\">2</span>) &#123; <span class=\"comment\">// gap 初始为 n/2，缩小gap直到1</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">start</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; start &lt; gap; start++) &#123; <span class=\"comment\">// 步长增量是gap，当前增量下需要对gap组序列进行简单插入排序</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> start + gap; i &lt; n; i += gap) &#123; <span class=\"comment\">// 此for及下一个for对当前增量序列执行简单插入排序</span></span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">target</span> <span class=\"operator\">=</span> arr[i], j = i - gap;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (; j &gt;= <span class=\"number\">0</span>; j -= gap) &#123; </span><br><span class=\"line\">                     <span class=\"keyword\">if</span> (target &lt; arr[j]) &#123;</span><br><span class=\"line\">                         arr[j + gap] = arr[j];</span><br><span class=\"line\">                     &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">break</span>; </span><br><span class=\"line\">                &#125;                 </span><br><span class=\"line\">                <span class=\"keyword\">if</span> (j != i - gap) arr[j + gap] = target;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Hibbard增量\"><a href=\"#Hibbard增量\" class=\"headerlink\" title=\"Hibbard增量\"></a>Hibbard增量</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 希尔排序： 采用Hibbard增量 &#123;1, 3, 7, 15,...&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span>[] shellSortHibbard(<span class=\"type\">int</span>[] arr) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr.length &lt; <span class=\"number\">2</span>) <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> arr.length, gap = <span class=\"number\">1</span>; </span><br><span class=\"line\">    <span class=\"keyword\">while</span> (gap &lt; n / <span class=\"number\">2</span>) gap = gap * <span class=\"number\">2</span> + <span class=\"number\">1</span>; <span class=\"comment\">// 初始化gap (Hibbard增量序列)</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (; gap &gt; <span class=\"number\">0</span>; gap /= <span class=\"number\">2</span>) &#123; <span class=\"comment\">// 缩小gap直到1</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">start</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; start &lt; gap; start++) &#123; <span class=\"comment\">// 步长增量是gap，当前增量下需要对gap组序列进行简单插入排序</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> start + gap; i &lt; arr.length; i += gap) &#123; <span class=\"comment\">// 此for及下一个for对当前增量序列执行简单插入排序</span></span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">target</span> <span class=\"operator\">=</span> arr[i], j = i - gap;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (; j &gt;= <span class=\"number\">0</span>; j -= gap) &#123; </span><br><span class=\"line\">                     <span class=\"keyword\">if</span> (target &lt; arr[j]) &#123;</span><br><span class=\"line\">                         arr[j + gap] = arr[j];</span><br><span class=\"line\">                     &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">break</span>; </span><br><span class=\"line\">                &#125;                 </span><br><span class=\"line\">                <span class=\"keyword\">if</span> (j != i - gap) arr[j + gap] = target;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Knuth增量\"><a href=\"#Knuth增量\" class=\"headerlink\" title=\"Knuth增量\"></a>Knuth增量</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 希尔排序： 采用Knuth增量 &#123;1, 4, 13, 40,...&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span>[] shellSortKnuth(<span class=\"type\">int</span>[] arr) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr.length &lt; <span class=\"number\">2</span>) <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> arr.length, gap = <span class=\"number\">1</span>; </span><br><span class=\"line\">    <span class=\"keyword\">while</span> (gap &lt; n / <span class=\"number\">3</span>) gap = gap * <span class=\"number\">3</span> + <span class=\"number\">1</span>; <span class=\"comment\">// 初始化gap (Knuth增量序列)</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (; gap &gt; <span class=\"number\">0</span>; gap /= <span class=\"number\">3</span>) &#123; <span class=\"comment\">// 缩小gap直到1</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">start</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; start &lt; gap; start++) &#123; <span class=\"comment\">// 步长增量是gap，当前增量下需要对gap组序列进行简单插入排序</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> start + gap; i &lt; arr.length; i += gap) &#123; <span class=\"comment\">// 此for及下一个for对当前增量序列执行简单插入排序</span></span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">target</span> <span class=\"operator\">=</span> arr[i], j = i - gap;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (; j &gt;= <span class=\"number\">0</span>; j -= gap) &#123; </span><br><span class=\"line\">                     <span class=\"keyword\">if</span> (target &lt; arr[j]) &#123;</span><br><span class=\"line\">                         arr[j + gap] = arr[j];</span><br><span class=\"line\">                     &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">break</span>; </span><br><span class=\"line\">                &#125;                 </span><br><span class=\"line\">                <span class=\"keyword\">if</span> (j != i - gap) arr[j + gap] = target;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>简单插入排序和希尔排序比较</p>\n<p><img src=\"https://pic.leetcode-cn.com/1653024423-RVrPou-image.png\" alt=\"image.png\"></p>\n</blockquote>\n<h3 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h3><blockquote>\n<p>归并排序是 <strong>分治思想</strong> 的应用，即将原待排数组 <strong>递归或迭代地</strong> 分为左右两半，直到数组长度为1，然后对左右数组进行合并(merge)，在合并中完成排序。</p>\n<p><strong>自顶向下</strong>(top-down)：从输入数组出发，不断二分该数组，直到数组长度为1，再执行合并。适合用 递归 实现。</p>\n<p><strong>自底向上</strong>(bottom-up)：从输入数组的单个元素出发，一一合并，二二合并，四四合并直到数组有序。适合用 迭代 实现。</p>\n<h4 id=\"自顶向下非原地归并\"><a href=\"#自顶向下非原地归并\" class=\"headerlink\" title=\"自顶向下非原地归并\"></a>自顶向下非原地归并</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span>[] mergeSort(<span class=\"type\">int</span>[] arr) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr.length &lt; <span class=\"number\">2</span>) <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">    <span class=\"type\">int</span>[] tmpArr = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[arr.length];</span><br><span class=\"line\">    mergeSort(arr, tmpArr, <span class=\"number\">0</span>, arr.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">mergeSort</span><span class=\"params\">(<span class=\"type\">int</span>[] arr, <span class=\"type\">int</span>[] tmpArr, <span class=\"type\">int</span> left, <span class=\"type\">int</span> right)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(left &lt; right) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">center</span> <span class=\"operator\">=</span> left + (right - left) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        mergeSort(arr, tmpArr, left, center);</span><br><span class=\"line\">        mergeSort(arr, tmpArr, center + <span class=\"number\">1</span>, right);</span><br><span class=\"line\">        merge(arr, tmpArr, left, center, right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 非原地合并方法</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">merge</span><span class=\"params\">(<span class=\"type\">int</span>[] arr, <span class=\"type\">int</span>[] tmpArr, <span class=\"type\">int</span> leftPos, <span class=\"type\">int</span> leftEnd, <span class=\"type\">int</span> rightEnd)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">rightPos</span> <span class=\"operator\">=</span> leftEnd + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">startIdx</span> <span class=\"operator\">=</span> leftPos;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">tmpPos</span> <span class=\"operator\">=</span> leftPos;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (leftPos &lt;= leftEnd &amp;&amp; rightPos &lt;= rightEnd) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arr[leftPos] &lt;= arr[rightPos]) &#123;</span><br><span class=\"line\">            tmpArr[tmpPos++] = arr[leftPos++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            tmpArr[tmpPos++] = arr[rightPos++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 比较完成后若左数组还有剩余，则将其添加到tmpArr剩余空间</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (leftPos &lt;= leftEnd) &#123;</span><br><span class=\"line\">        tmpArr[tmpPos++] = arr[leftPos++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 比较完成后若右数组还有剩余，则将其添加到tmpArr剩余空间</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (rightPos &lt;= rightEnd) &#123;</span><br><span class=\"line\">        tmpArr[tmpPos++] = arr[rightPos++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 容易遗漏的步骤，将tmpArr拷回arr中</span></span><br><span class=\"line\">    <span class=\"comment\">// 从小区间排序到大区间排序，大区间包含原来的小区间，需要从arr再对应比较排序到tmpArr中，</span></span><br><span class=\"line\">    <span class=\"comment\">// 所以arr也需要动态更新为排序状态，即随时将tmpArr拷回到arr中</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> startIdx; i &lt;= rightEnd; i++) &#123;</span><br><span class=\"line\">        arr[i] = tmpArr[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"自顶向下原地归并\"><a href=\"#自顶向下原地归并\" class=\"headerlink\" title=\"自顶向下原地归并\"></a>自顶向下原地归并</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span>[] mergeSort(<span class=\"type\">int</span>[] arr) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr.length &lt; <span class=\"number\">2</span>) <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">    mergeSort(arr, <span class=\"number\">0</span>, arr.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">mergeSort</span><span class=\"params\">(<span class=\"type\">int</span>[] arr, <span class=\"type\">int</span> left, <span class=\"type\">int</span> right)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(left &lt; right) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">center</span> <span class=\"operator\">=</span> left + (right - left) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        mergeSort(arr, left, center);</span><br><span class=\"line\">        mergeSort(arr, center + <span class=\"number\">1</span>, right);</span><br><span class=\"line\">        merge(arr, left, center, right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 原地归并（手摇算法）</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">merge</span><span class=\"params\">(<span class=\"type\">int</span>[] arr, <span class=\"type\">int</span> leftPos, <span class=\"type\">int</span> leftEnd, <span class=\"type\">int</span> rightEnd)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> leftPos, j = leftEnd + <span class=\"number\">1</span>; <span class=\"comment\">// #1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i &lt; j &amp;&amp; j &lt;= rightEnd) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(i &lt; j &amp;&amp; arr[i] &lt;= arr[j]) i++; <span class=\"comment\">// #2</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">index</span> <span class=\"operator\">=</span> j; <span class=\"comment\">// #3</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(j &lt;= rightEnd &amp;&amp; arr[j] &lt; arr[i]) j++; <span class=\"comment\">// #4 注意是 arr[j] &lt; arr[i]，即找到j使得arr[j] 为第一个大于等于 arr[i]值</span></span><br><span class=\"line\">        exchange(arr, i, index - <span class=\"number\">1</span>, j - <span class=\"number\">1</span>); <span class=\"comment\">// #5</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 三次翻转实现交换</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">exchange</span><span class=\"params\">(<span class=\"type\">int</span>[] arr, <span class=\"type\">int</span> left, <span class=\"type\">int</span> leftEnd, <span class=\"type\">int</span> rightEnd)</span> &#123;</span><br><span class=\"line\">    reverse(arr, left, leftEnd);</span><br><span class=\"line\">    reverse(arr, leftEnd + <span class=\"number\">1</span>, rightEnd);</span><br><span class=\"line\">    reverse(arr, left, rightEnd);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">reverse</span><span class=\"params\">(<span class=\"type\">int</span>[] arr, <span class=\"type\">int</span> start, <span class=\"type\">int</span> end)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(start &lt; end) &#123;</span><br><span class=\"line\">        swap(arr, start, end);</span><br><span class=\"line\">        start++;</span><br><span class=\"line\">        end--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"自底向上非原地归并\"><a href=\"#自底向上非原地归并\" class=\"headerlink\" title=\"自底向上非原地归并\"></a>自底向上非原地归并</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span>[] mergeSortBU(<span class=\"type\">int</span>[] arr) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr.length &lt; <span class=\"number\">2</span>) <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">    <span class=\"type\">int</span>[] tmpArr = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[arr.length];</span><br><span class=\"line\">    <span class=\"comment\">// 间隔，注意不能写成gap &lt; arr.length / 2 + 1，此种写法只适用于元素个数为2的n次幂时</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">gap</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; gap &lt; arr.length; gap *= <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 基本分区合并(随着间隔的成倍增长，一一合并，二二合并，四四合并...)</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">left</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; left &lt; arr.length - gap; left += <span class=\"number\">2</span> * gap) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 调用非原地合并方法。leftEnd = left+gap-1; rightEnd = left+2*gap-1;</span></span><br><span class=\"line\">            merge(arr, tmpArr, left, left + gap - <span class=\"number\">1</span>, Math.min(left + <span class=\"number\">2</span> * gap - <span class=\"number\">1</span>, arr.length - <span class=\"number\">1</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"自底向上原地归并\"><a href=\"#自底向上原地归并\" class=\"headerlink\" title=\"自底向上原地归并\"></a>自底向上原地归并</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span>[] mergeSortBUInPlace(<span class=\"type\">int</span>[] arr) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr.length &lt; <span class=\"number\">2</span>) <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">    <span class=\"comment\">// 间隔，注意不能写成gap &lt; arr.length / 2 + 1，此种写法只适用于元素个数为2的n次幂时</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">gap</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; gap &lt; arr.length; gap *= <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 基本分区合并(随着间隔的成倍增长，一一合并，二二合并，四四合并...)</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">left</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; left &lt; arr.length - gap; left += <span class=\"number\">2</span> * gap) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 调用原地合并方法。leftEnd = left+gap-1; rightEnd = left+2*gap-1;</span></span><br><span class=\"line\">            merge(arr, left, left + gap - <span class=\"number\">1</span>, Math.min(left + <span class=\"number\">2</span> * gap - <span class=\"number\">1</span>, arr.length - <span class=\"number\">1</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>平均时间复杂度:O(nlogn)</strong></p>\n<p><strong>空间复杂度:O(n)</strong></p>\n<p><strong>稳定</strong></p>\n</blockquote>\n<h3 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h3><blockquote>\n<p><strong>与归并排序一样，快速排序也是一种利用 分治思想 的排序方法，确定 主轴及分区 是快速排序的核心操作。首先在数组中确定一个主轴元素(下标记为 pivot)，然后将数组分为两部分，小于主轴的放在（确定最终位置的）主轴左侧，大于等于主轴的放在主轴右侧。递归地对主轴左右两侧数组执行这个过程，每次递归都传入待排序数组 arr 和本次要处理的部分的左右界，只处理这个范围内的序列。当所有递归都到达基准情形时，排序完成。因为是原地交换，递归过程中 arr总是在动态排序，递归过程无需返回，为尾递归形式。</strong></p>\n<h4 id=\"递归快排\"><a href=\"#递归快排\" class=\"headerlink\" title=\"递归快排\"></a>递归快排</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 三数取中快排</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span>[] quickSortMedian3(<span class=\"type\">int</span>[] arr) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr.length &lt; <span class=\"number\">2</span>) <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">    quickSortMedian3(arr, <span class=\"number\">0</span>, arr.length - <span class=\"number\">1</span>); <span class=\"comment\">// 后两个参数是下标值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">quickSortMedian3</span><span class=\"params\">(<span class=\"type\">int</span>[] arr, <span class=\"type\">int</span> left, <span class=\"type\">int</span> right)</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (left &lt; right) &#123; </span><br><span class=\"line\">        <span class=\"comment\">// 执行median3将左，中，右三数中值放到left位置上</span></span><br><span class=\"line\">        median3(arr, left, right);</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">pivot</span> <span class=\"operator\">=</span> partition(arr, left, right);</span><br><span class=\"line\">        quickSortMedian3(arr, left, pivot - <span class=\"number\">1</span>);</span><br><span class=\"line\">        quickSortMedian3(arr, pivot + <span class=\"number\">1</span>, right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将left, center, right下标三个数中，大小居中者放到left下标处</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">median3</span><span class=\"params\">(<span class=\"type\">int</span>[]arr, <span class=\"type\">int</span> l, <span class=\"type\">int</span> r)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> l + (r - l) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr[l] &gt; arr[c]) swap(arr, l, c); <span class=\"comment\">// 左中，大者居中</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr[c] &gt; arr[r]) swap(arr, c, r); <span class=\"comment\">// 中右，大者居右，此时最大者居右</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr[c] &gt; arr[l]) swap(arr, l, c); <span class=\"comment\">// 左中，大者居左，此时中者居左</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 随机主轴快排</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span>[] quickSortRandom(<span class=\"type\">int</span>[] arr) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr.length &lt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    quickSortRandom(arr, <span class=\"number\">0</span>, arr.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">quickSortRandom</span><span class=\"params\">(<span class=\"type\">int</span>[] arr, <span class=\"type\">int</span> left, <span class=\"type\">int</span> right)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (left &lt; right) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 取区间内随机下标，注意Random().nextInt(int x)方法的使用（含0不含x）</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">randomIndex</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Random</span>().nextInt(right - left) + left + <span class=\"number\">1</span>; <span class=\"comment\">// 在[left + 1, right]范围内的随机值</span></span><br><span class=\"line\">        <span class=\"comment\">// 交换随机取得的下标元素与当前起始元素</span></span><br><span class=\"line\">        swap(arr, left, randomIndex); <span class=\"comment\">// arr[left]与它之后的某个数交换</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">pivot</span> <span class=\"operator\">=</span> partition(arr, left, right);</span><br><span class=\"line\">        quickSortRandom(arr, left, pivot - <span class=\"number\">1</span>);</span><br><span class=\"line\">        quickSortRandom(arr, pivot + <span class=\"number\">1</span>, right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 朴素快排(首位为主轴)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span>[] quickSortSimple(<span class=\"type\">int</span>[] arr) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr.length &lt; <span class=\"number\">2</span>) <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">    quickSortSimple(arr, <span class=\"number\">0</span>, arr.length - <span class=\"number\">1</span>); <span class=\"comment\">// 后两个参数是下标值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">quickSortSimple</span><span class=\"params\">(<span class=\"type\">int</span>[] arr, <span class=\"type\">int</span> left, <span class=\"type\">int</span> right)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 若left == right，表示此时arr只有一个元素，即为基准情形，完成递归(准确说是完成递进)</span></span><br><span class=\"line\">    <span class=\"comment\">// (尾递归，“回归”过程中不做任何事情）</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (left &lt; right) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">pivot</span> <span class=\"operator\">=</span> partition(arr, left, right);</span><br><span class=\"line\">        quickSortSimple(arr, left, pivot - <span class=\"number\">1</span>);</span><br><span class=\"line\">        quickSortSimple(arr, pivot + <span class=\"number\">1</span>, right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//　partition方法</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"title function_\">partition</span><span class=\"params\">(<span class=\"type\">int</span>[] arr, <span class=\"type\">int</span> left, <span class=\"type\">int</span> right)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">pivot</span> <span class=\"operator\">=</span> left, index = pivot + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 注意此时right是坐标，要执行到最后一个元素，所以是&lt;=</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> index; i &lt;= right; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arr[i] &lt; arr[pivot]) &#123;</span><br><span class=\"line\">            swap(arr, index, i);</span><br><span class=\"line\">            index++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 最后一个小于主轴元素的元素下标是index - 1</span></span><br><span class=\"line\">    swap(arr, pivot, index - <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> index - <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"非递归快排-迭代快排\"><a href=\"#非递归快排-迭代快排\" class=\"headerlink\" title=\"非递归快排 (迭代快排)\"></a><strong>非递归快排 (迭代快排)</strong></h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span>[] quickSortStack(<span class=\"type\">int</span>[] arr) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 用于保存区间左右边界的栈，按right到left的顺序将初始区间界入栈</span></span><br><span class=\"line\">    Deque&lt;Integer&gt; stack = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayDeque</span>&lt;&gt;();</span><br><span class=\"line\">    stack.push(arr.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">    stack.push(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 判断栈是否空，不空则弹出一对left，right界</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!stack.isEmpty()) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">left</span> <span class=\"operator\">=</span> stack.pop(), right = stack.pop();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(left &lt; right) &#123; <span class=\"comment\">// 执行partition的前提是left小于right</span></span><br><span class=\"line\">            <span class=\"comment\">// 对[left, right]区间执行partition方法，得到pivot</span></span><br><span class=\"line\">              <span class=\"comment\">// 加入后续两行实现随机轴快排</span></span><br><span class=\"line\">            <span class=\"comment\">// int randomIndex = new Random().nextInt(right - left) + left + 1; // 在[left + 1, right]范围内的随机值</span></span><br><span class=\"line\">            <span class=\"comment\">// swap(arr, left, randomIndex); // arr[left]与它之后的某个数交换</span></span><br><span class=\"line\">              <span class=\"comment\">// 加入下行实现三数取中快排</span></span><br><span class=\"line\">            median3(arr, left, right);</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">pivot</span> <span class=\"operator\">=</span> partition(arr, left, right);</span><br><span class=\"line\">            <span class=\"comment\">// 当前pivot的左区间存在则将该区间right，left界入栈</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(pivot &gt; left) &#123;</span><br><span class=\"line\">                stack.push(pivot - <span class=\"number\">1</span>);</span><br><span class=\"line\">                stack.push(left);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 当前pivot的右区间存在则将该区间right，left界入栈</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(right &gt; pivot) &#123;</span><br><span class=\"line\">                stack.push(right);</span><br><span class=\"line\">                stack.push(pivot + <span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>平均时间复杂度:O(nlogn)</strong></p>\n<p><strong>空间复杂度:O(logn)</strong></p>\n<p><strong>不稳定</strong></p>\n</blockquote>\n<h3 id=\"堆排序\"><a href=\"#堆排序\" class=\"headerlink\" title=\"堆排序\"></a>堆排序</h3><blockquote>\n<p>将输入数组建立为一个 <strong>大顶堆</strong>，之后反复取出堆顶并对剩余元素重建大顶堆，将依次取出的堆顶逆序排列，即可将原数组从小到大排列完成排序。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span>[] heapSort(<span class=\"type\">int</span>[] arr) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr.length &lt; <span class=\"number\">2</span>) <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">    heapify(arr, arr.length - <span class=\"number\">1</span>); <span class=\"comment\">// 构建大顶堆</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> arr.length - <span class=\"number\">1</span>; i &gt; <span class=\"number\">0</span>; i--) &#123; <span class=\"comment\">// i &gt; 0即可，无需写成i &gt;= 0，当n - 1个元素排序时，最后一个元素也已排序</span></span><br><span class=\"line\">        swap(arr, <span class=\"number\">0</span>, i); <span class=\"comment\">// 交换堆顶和当前未排序部分最后一个元素</span></span><br><span class=\"line\">        <span class=\"comment\">// 此时除当前堆顶元素外都是保持堆序的，只需要对该堆顶调用一次下滤操作</span></span><br><span class=\"line\">        siftDown(arr, <span class=\"number\">0</span>, i - <span class=\"number\">1</span>); <span class=\"comment\">// i - 1是未排序部分最后一个元素下标，确保下滤不会超过此范围</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">heapify</span><span class=\"params\">(<span class=\"type\">int</span>[] arr, <span class=\"type\">int</span> endIdx)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">hole</span> <span class=\"operator\">=</span> (endIdx - <span class=\"number\">1</span>) / <span class=\"number\">2</span>; hole &gt;= <span class=\"number\">0</span>; hole--) &#123; <span class=\"comment\">// (endIdx - 1) / 2伪最后一个非叶子节点下标</span></span><br><span class=\"line\">        siftDown(arr, hole, endIdx);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">siftDown</span><span class=\"params\">(<span class=\"type\">int</span>[] arr, <span class=\"type\">int</span> hole, <span class=\"type\">int</span> endIdx)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">target</span> <span class=\"operator\">=</span> arr[hole]; <span class=\"comment\">// target是要下滤的节点</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">child</span> <span class=\"operator\">=</span> hole * <span class=\"number\">2</span> + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(child &lt;= endIdx) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 满足第一个条件child &lt; endIdx表示hole有右孩子，不满足则hole无右孩子，跳过</span></span><br><span class=\"line\">        <span class=\"comment\">// 第二个条件arr[child + 1] &gt; arr[child]只在第一个条件成立前提下进行判断（因此不必担心arr[child + 1]越界），</span></span><br><span class=\"line\">        <span class=\"comment\">// 若满足，表示hole有右孩子且右孩子更大，令child为右孩子下标。</span></span><br><span class=\"line\">        <span class=\"comment\">// 因此此if过后使得child是hole的孩子中较大的那个</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (child &lt; endIdx &amp;&amp; arr[child + <span class=\"number\">1</span>] &gt; arr[child]) &#123;</span><br><span class=\"line\">            child++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 若child大于target，则child上移到当前hole，hole下滤到child位置 </span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arr[child] &gt; target) &#123;</span><br><span class=\"line\">            arr[hole] = arr[child];</span><br><span class=\"line\">            hole = child;</span><br><span class=\"line\">            child = hole * <span class=\"number\">2</span> + <span class=\"number\">1</span>; <span class=\"comment\">// 当然也可以写成child = child * 2 + 1</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">break</span>; <span class=\"comment\">// 若无需交换hole与child，说明hole已经满足堆序(无需/无法再下滤)，退出while</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    arr[hole] = target; <span class=\"comment\">// 将target填入hole中</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>平均时间复杂度:O(nlogn)</strong></p>\n<p><strong>空间复杂度:O(1)</strong></p>\n<p><strong>不稳定</strong></p>\n</blockquote>\n<h3 id=\"计数排序\"><a href=\"#计数排序\" class=\"headerlink\" title=\"计数排序\"></a>计数排序</h3><blockquote>\n<h4 id=\"计数排序的特征\"><a href=\"#计数排序的特征\" class=\"headerlink\" title=\"计数排序的特征\"></a><strong>计数排序的特征</strong></h4><p>当输入的元素是 n 个 0 到 k 之间的整数时，它的运行时间是 Θ(n + k)。计数排序不是比较排序，排序的速度快于任何比较排序算法。</p>\n<p>由于用来计数的数组C的长度取决于待排序数组中数据的范围（等于待排序数组的最大值与最小值的差加上1），这使得计数排序对于数据范围很大的数组，需要大量时间和内存。例如：计数排序是用来排序0到100之间的数字的最好的算法，但是它不适合按字母顺序排序人名。但是，计数排序可以用在基数排序中的算法来排序数据范围很大的数组。</p>\n<p>通俗地理解，例如有 10 个年龄不同的人，统计出有 8 个人的年龄比 A 小，那 A 的年龄就排在第 9 位,用这个方法可以得到其他每个人的位置,也就排好了序。当然，年龄有重复时需要特殊处理（保证稳定性），这就是为什么最后要反向填充目标数组，以及将每个数字的统计减去 1 的原因。</p>\n<p> 算法的步骤如下：</p>\n<ul>\n<li>（1）找出待排序的数组中最大和最小的元素</li>\n<li>（2）统计数组中每个值为i的元素出现的次数，存入数组C的第i项</li>\n<li>（3）对所有的计数累加（从C中的第一个元素开始，每一项和前一项相加）</li>\n<li>（4）反向填充目标数组：将每个元素i放在新数组的第C(i)项，每放一个元素就将C(i)减去1</li>\n</ul>\n<h4 id=\"不稳定计数排序\"><a href=\"#不稳定计数排序\" class=\"headerlink\" title=\"不稳定计数排序\"></a>不稳定计数排序</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span>[] countSortUnstable(<span class=\"type\">int</span>[] arr) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr.length &lt; <span class=\"number\">2</span>) <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">min</span> <span class=\"operator\">=</span> arr[<span class=\"number\">0</span>], max = arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">        min = Math.min(min, arr[i]);</span><br><span class=\"line\">        max = Math.max(max, arr[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span>[] countArr = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[max - min + <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">        countArr[arr[i] - min]++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">index</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; countArr.length; i++) &#123; <span class=\"comment\">// 遍历countArr</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; countArr[i]; j++) &#123; <span class=\"comment\">// countArr[i]可能有多个相同数字</span></span><br><span class=\"line\">            arr[index] = i + min; <span class=\"comment\">// 复用了原输入数组arr</span></span><br><span class=\"line\">            index++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"稳定计数排序\"><a href=\"#稳定计数排序\" class=\"headerlink\" title=\"稳定计数排序\"></a>稳定计数排序</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span>[] countSort(<span class=\"type\">int</span>[] arr) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr.length &lt; <span class=\"number\">2</span>) <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> arr.length, min = arr[<span class=\"number\">0</span>], max = arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        min = Math.min(min, arr[i]);</span><br><span class=\"line\">        max = Math.max(max, arr[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span>[] countArr = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[max - min + <span class=\"number\">1</span>]; <span class=\"comment\">// arr最多有max-min+1种数字</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        countArr[arr[i] - min]++; <span class=\"comment\">// arr[i]的值出现一次，则countArr[arr[i]-min]加1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; countArr.length; i++) &#123; <span class=\"comment\">// 变形</span></span><br><span class=\"line\">        countArr[i] += countArr[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span>[] sortedArr = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[n]; <span class=\"comment\">// 根据sortedArr, nums, countArr三者关系完成sortedArr的输出</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> n - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">        sortedArr[countArr[arr[i] - min] - <span class=\"number\">1</span>] = arr[i];</span><br><span class=\"line\">        countArr[arr[i] - min]--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sortedArr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>平均时间复杂度:O(n+k)</strong></p>\n<p><strong>空间复杂度:O(n+k)</strong></p>\n<p><strong>稳定</strong></p>\n</blockquote>\n<h3 id=\"基数排序\"><a href=\"#基数排序\" class=\"headerlink\" title=\"基数排序\"></a>基数排序</h3><blockquote>\n<p>非比较排序，「基」指的是数的位，例如十进制数 123，共有百十个位，共 3 个位。基数排序 按数字的位进行循环，每一轮操作都是对当前位（基数）的计数排序，使得输出到 arr 后所有数字在截止到当前位上（即去掉未考察的位后）是排序状态，考察完最大位后完成排序。具体过程如下：</p>\n<ul>\n<li>遍历待排序数组 arr ，找到最大值，计算其位数，例如 arr 中最大数为 123 ，则 maxDigitLen = 3 。</li>\n<li>数组的数字为 n 进制，就创建大小为 n 的计数数组 countArr ，也可以称为 n 个桶。</li>\n<li>开始「位」的 for 循环，循环次数等于 maxDigitLen ，每一轮对 当前所有数字的当前位 执行一次 计数排序。</li>\n<li>每次计数排序结束后将结果写回 arr 。</li>\n<li>for循环结束后返回排序结果 arr。</li>\n</ul>\n<h4 id=\"以计数排序为基础\"><a href=\"#以计数排序为基础\" class=\"headerlink\" title=\"以计数排序为基础\"></a>以计数排序为基础</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span>[] radixSort(<span class=\"type\">int</span>[] arr) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr.length &lt; <span class=\"number\">2</span>) <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">max</span> <span class=\"operator\">=</span> Math.abs(arr[<span class=\"number\">0</span>]); <span class=\"comment\">// 找到arr中绝对值最大者</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">        max = Math.max(max, Math.abs(arr[i]));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">maxDigitLen</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>, base = <span class=\"number\">10</span>; <span class=\"comment\">// 最大位数 &amp; 基（几进制就是几）</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (max != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        maxDigitLen++;</span><br><span class=\"line\">        max /= base;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 在接下来的for中，每一轮都对当前位(基数)执行一次计数排序</span></span><br><span class=\"line\">    <span class=\"type\">int</span>[] sortedArr = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[arr.length];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; maxDigitLen; i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] countArr = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">19</span>]; <span class=\"comment\">// 处理负数优化</span></span><br><span class=\"line\">        <span class=\"comment\">// 根据每一个数字当前位的数字，累计相应位置的计数</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; arr.length; j++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 此步处理要注意，当base大于10时，例如base=100时，1234%100=34</span></span><br><span class=\"line\">            <span class=\"comment\">// 还需要再除以(base/10)，得到的3，然后再+9（考虑负数）才是本次的bucketIdx</span></span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">bucketIdx</span> <span class=\"operator\">=</span> (arr[j] % base) / (base / <span class=\"number\">10</span>) + <span class=\"number\">9</span>;</span><br><span class=\"line\">            countArr[bucketIdx]++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// countArr变形，得到每个下标所代表的arr中的数的当前位在arr中的最大位置（从1开始）</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; j &lt; countArr.length; j++) &#123;</span><br><span class=\"line\">            countArr[j] += countArr[j - <span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 逆序输出保持稳定性</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> arr.length - <span class=\"number\">1</span>; j &gt;= <span class=\"number\">0</span>; j--) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">thisBase</span> <span class=\"operator\">=</span> (arr[j] % base) / (base / <span class=\"number\">10</span>) + <span class=\"number\">9</span>;</span><br><span class=\"line\">            <span class=\"comment\">// countArr[thisBase]得到的从1开始计算的位置，转成下标要-1</span></span><br><span class=\"line\">            sortedArr[countArr[thisBase] - <span class=\"number\">1</span>] = arr[j]; </span><br><span class=\"line\">            countArr[thisBase]--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 完成当前位的计数排序后将排序结果拷贝回原数组</span></span><br><span class=\"line\">        arr = Arrays.copyOf(sortedArr, sortedArr.length);</span><br><span class=\"line\">        <span class=\"comment\">// base进一位，准备下一轮对下一位的计数排序</span></span><br><span class=\"line\">        base *= <span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"不以计数排序为基础\"><a href=\"#不以计数排序为基础\" class=\"headerlink\" title=\"不以计数排序为基础\"></a>不以计数排序为基础</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span>[] radixSort(<span class=\"type\">int</span>[] arr) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr.length &lt; <span class=\"number\">2</span>) <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">    <span class=\"comment\">// 找到arr中绝对值最大者</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">max</span> <span class=\"operator\">=</span> Math.abs(arr[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">        max = Math.max(max, Math.abs(arr[i]));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">maxDigitLen</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>, base = <span class=\"number\">10</span>; <span class=\"comment\">// 最大位数 &amp; 基</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (max != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        maxDigitLen++;</span><br><span class=\"line\">        max /= base;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// arr.length + 1的作用是令每个桶的第0位保存该桶的元素个数。</span></span><br><span class=\"line\">    <span class=\"type\">int</span>[][] buckets = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">19</span>][arr.length + <span class=\"number\">1</span>]; <span class=\"comment\">// 处理负数优化</span></span><br><span class=\"line\">    <span class=\"comment\">// 在每一位上将数组中所有具有该位的数字装入对应桶中</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; maxDigitLen; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; arr.length; j++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 此步处理要注意，当base大于10时，例如base=100时，1234%100=34</span></span><br><span class=\"line\">            <span class=\"comment\">// 还需要再除以(base/10)，得到的3才是本次的bucketIndex</span></span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">bucketIdx</span> <span class=\"operator\">=</span> (arr[j] % base) / (base / <span class=\"number\">10</span>) + <span class=\"number\">9</span>; <span class=\"comment\">// +9使其可以处理负数</span></span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">currentBucketQuantity</span> <span class=\"operator\">=</span> buckets[bucketIdx][<span class=\"number\">0</span>];</span><br><span class=\"line\">            buckets[bucketIdx][currentBucketQuantity + <span class=\"number\">1</span>] = arr[j];</span><br><span class=\"line\">            buckets[bucketIdx][<span class=\"number\">0</span>]++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 将当前所有桶的数按桶序，桶内按低到高输出为本轮排序结果</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">arrIdx</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; buckets.length; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">k</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; k &lt;= buckets[j][<span class=\"number\">0</span>]; k++) &#123;</span><br><span class=\"line\">                arr[arrIdx++] = buckets[j][k];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 每一轮过后将桶计数归零</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span>[] bucket : buckets) bucket[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        base *= <span class=\"number\">10</span>; <span class=\"comment\">// 调整base</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>平均时间复杂度:O(d(n+k))</strong></p>\n<p><strong>空间复杂度:O(n+k)</strong></p>\n<p><strong>稳定</strong></p>\n</blockquote>\n<h3 id=\"桶排序\"><a href=\"#桶排序\" class=\"headerlink\" title=\"桶排序\"></a>桶排序</h3><blockquote>\n<p>桶排序将原数组划分到称为 「桶」 的多个区间中，然后对每个桶单独进行排序，之后再按桶序和桶内序输出结果。适合于分布较均匀的数据，具体做法如下。</p>\n<ul>\n<li><p>根据数据规模按照 一定的方法 将待排序数组arr划分为多个区间，每个区间称作一个桶。</p>\n</li>\n<li><p>每个桶可以是数组，也可以是泛型容器，用于保存arr中落在该桶范围内的数。</p>\n</li>\n<li><p>对每一个桶都单独排序，需要 以适当的排序 方法支持，例如插入排序，快速排序等。</p>\n</li>\n<li><p>所有桶完成排序后，按桶序，桶内序依次输出所有元素，得到arr的排序结果。</p>\n<p><strong>稳定性：取决于桶内排序方法的稳定性。</strong></p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span>[] bucketSort(<span class=\"type\">int</span>[] arr) &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">min</span> <span class=\"operator\">=</span> arr[<span class=\"number\">0</span>], max = arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">        min = Math.min(min, arr[i]);</span><br><span class=\"line\">        max = Math.max(max, arr[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 用泛型List存储所有桶，每个桶是一个ArrayList&lt;Integer&gt;，并初始化所有桶。</span></span><br><span class=\"line\">    <span class=\"comment\">// arr.length/3表示设置数组大小三分之一数量的桶</span></span><br><span class=\"line\">    List&lt;ArrayList&lt;Integer&gt;&gt; buckets = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(arr.length / <span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">        buckets.add(<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 遍历arr，根据元素值将所有元素装入对应值区间的桶中</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// (arr[i] - min)/D为arr[i]元素应该装入的桶的下标，间隔D = (max-min)/(arr.length-1)</span></span><br><span class=\"line\">        <span class=\"comment\">// 虽可写成(arr[i] - min)*(arr.length-1)/(max-min)的形式，但当输入数组取值范围较大且元素较多时</span></span><br><span class=\"line\">        <span class=\"comment\">// (arr[i] - min)*(arr.length-1)可能会超过int上限，因此先做除法求出double类型的D</span></span><br><span class=\"line\">        <span class=\"comment\">// 再做一次除法求出bucketIndex，可以避免计算精度不够高带来的问题</span></span><br><span class=\"line\">        <span class=\"type\">double</span> <span class=\"variable\">interval</span> <span class=\"operator\">=</span> (<span class=\"type\">double</span>)(max - min) / (<span class=\"type\">double</span>)(arr.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">bucketIdx</span> <span class=\"operator\">=</span> (<span class=\"type\">int</span>) ((arr[i] - min) / interval);</span><br><span class=\"line\">        buckets.get(bucketIdx).add(arr[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 桶内排序(调用库函数，从小到大)</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; buckets.size(); i++) &#123;</span><br><span class=\"line\">        Collections.sort(buckets.get(i));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">index</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (ArrayList&lt;Integer&gt; bucket : buckets) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> sortedItem : bucket) &#123;</span><br><span class=\"line\">            arr[index] = sortedItem; <span class=\"comment\">// 复用输入数组arr</span></span><br><span class=\"line\">            index++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>平均时间复杂度:O(n)</strong></p>\n<p><strong>空间复杂度:O(n)</strong></p>\n<p><strong>稳定</strong></p>\n</blockquote>\n","categories":["算法"],"tags":["Java","面试， 排序"]},{"title":"手动实现栈和队列","url":"/2022/09/01/%E6%89%8B%E5%8A%A8%E5%AE%9E%E7%8E%B0%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/","content":"<h3 id=\"1-手动实现栈\"><a href=\"#1-手动实现栈\" class=\"headerlink\" title=\"1. 手动实现栈\"></a>1. 手动实现栈</h3><blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyStack</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> T[]stack;<span class=\"comment\">//数组</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> top;<span class=\"comment\">//当前可以存放数据元素的下标——&gt;栈顶指针</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//用构造函数给定一个初始容量10的数组</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MyStack</span><span class=\"params\">( )</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.stack = (T[])<span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[<span class=\"number\">10</span>];<span class=\"comment\">//泛型不能实例化对象，但是可以类型转换</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//判断栈是否满了</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isFull</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (stack.length == <span class=\"built_in\">this</span>.top);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//判断栈是否为空</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">empty</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.top == <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//入栈操作</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">push</span><span class=\"params\">(T value)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//判断栈是否已经满了</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isFull())&#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.stack = Arrays.copyOf(stack,<span class=\"number\">2</span>*stack.length);<span class=\"comment\">//满了就扩容成原来容量的两倍</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.stack[<span class=\"built_in\">this</span>.top] = value;<span class=\"comment\">//给top位置添加元素</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.top++;<span class=\"comment\">//top指针指向下一可用空间</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//出栈操作，并返回弹出（删除）栈顶元素</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> T <span class=\"title function_\">pop</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//先判断栈是否为空</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (empty()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalStateException</span>(<span class=\"string\">&quot;栈为空！&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//弹出元素</span></span><br><span class=\"line\">        <span class=\"type\">T</span> <span class=\"variable\">ret</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.stack[<span class=\"built_in\">this</span>.top-<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.top--;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;<span class=\"comment\">//返回删除的元素</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//得到栈顶元素，但是不删除</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> T <span class=\"title function_\">peek</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//判断是否为空</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (empty())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalStateException</span>(<span class=\"string\">&quot;栈为空！&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//返回栈顶元素，不删除</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.stack[top-<span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//展示栈元素</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">show</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> top-<span class=\"number\">1</span>; i&gt;=<span class=\"number\">0</span> ; i--)&#123;</span><br><span class=\"line\">            System.out.print(stack[i]+<span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</blockquote>\n<h3 id=\"2-手动实现队列\"><a href=\"#2-手动实现队列\" class=\"headerlink\" title=\"2.手动实现队列\"></a>2.手动实现队列</h3><blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Node</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> val;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Node next;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Node</span><span class=\"params\">(<span class=\"type\">int</span> val)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.val = val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getVal</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setVal</span><span class=\"params\">(<span class=\"type\">int</span> val)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.val = val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Node <span class=\"title function_\">getNext</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setNext</span><span class=\"params\">(Node next)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.next = next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyQueue</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Node first;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Node last;</span><br><span class=\"line\">    <span class=\"comment\">//队列是否为空</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isEmpty</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.first == <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//入队</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">offer</span><span class=\"params\">(<span class=\"type\">int</span> value)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">node</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>(value);</span><br><span class=\"line\">        <span class=\"comment\">//尾插法，要判断是否第一次插入</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.first == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.first = node;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.last = node;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.last.setNext(node);</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.last = node;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//出队</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">poll</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//判断是否为空</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isEmpty())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalStateException</span>(<span class=\"string\">&quot;队列为空&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">ret</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.first.getVal();</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.first = <span class=\"built_in\">this</span>.first.getNext();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;<span class=\"comment\">//返回出队元素</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//得到队头元素但是不删除</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">peek</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//不要移动first</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(isEmpty()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UnsupportedOperationException</span>(<span class=\"string\">&quot;队列为空！&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.first.getVal();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//展示队列</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">show</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">cur</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.first;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(cur != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            System.out.print(cur.getVal()+<span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">            cur = cur.getNext();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n</blockquote>\n","categories":["java知识"],"tags":["面试","java基础"]},{"title":"手写生产者消费者模式","url":"/2022/08/27/%E6%89%8B%E5%86%99%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%BC%8F/","content":"<h3 id=\"生产者-消费者模式设计要求\"><a href=\"#生产者-消费者模式设计要求\" class=\"headerlink\" title=\"生产者-消费者模式设计要求\"></a>生产者-消费者模式设计要求</h3><p>这种模式满足三点要求：<br>（1）生产者生产数据到缓冲区中，消费者从缓冲区中取数据。<br>（2）缓冲区满时，生产者线程阻塞，进入等待状态。这期间消费者一旦取走数据，队列未满，就会唤醒阻塞的生产者。<br>（3）缓冲区空时，消费者线程阻塞，进入等待状态。这期间生产者一旦往队列中放入数据，就会唤醒阻塞的消费者。</p>\n<blockquote>\n<p>模式组成：<br>公共的缓存队列（给予缓存上限）+ 生产者线程 + 消费者线程。<br>特点：<br>1.实现了生产者、消费者的解耦：通过共享的数据缓冲区域，生产者生产数据之后直接放置在共享数据区中，并不需要关心消费者的行为；而消费者只需要从共享数据区中去获取数据，就不再需要关心生产者的行为。<br>2.实现了线程间的并发协作：如果共享数据区已满的话，阻塞生产者继续生产数据放置入内；如果共享数据区为空的话，阻塞消费者继续消费数据。<br>应用场景：<br>模式解耦、消息队列、分布式场景中很常见。</p>\n</blockquote>\n<p>通常情况下，有5种方式来实现</p>\n<ul>\n<li>synchronized + wait() + notify() 方式</li>\n<li>可重入锁ReentrantLock （配合Condition）</li>\n<li>BlockingQueue 阻塞队列方式</li>\n<li>信号量Semaphore 方式</li>\n<li>管道输入输出流PipedInputStream和PipedOutputStream 方式</li>\n</ul>\n<h3 id=\"第一种方式（synchronized-）\"><a href=\"#第一种方式（synchronized-）\" class=\"headerlink\" title=\"第一种方式（synchronized ）\"></a>第一种方式（synchronized ）</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyBlockingQueue</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"type\">int</span> maxSize;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> LinkedList&lt;Integer&gt; queue;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"title function_\">MyBlockingQueue</span><span class=\"params\">(<span class=\"type\">int</span> size)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.maxSize = size;</span><br><span class=\"line\">\t\tqueue = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>&lt;Integer&gt;();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">put</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(queue.size() == maxSize) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;队列已满，生产者：&quot;</span> + Thread.currentThread().getName() + <span class=\"string\">&quot;进入等待&quot;</span>);</span><br><span class=\"line\">\t\t\twait();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"type\">Random</span> <span class=\"variable\">random</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Random</span>();</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> random.nextInt(<span class=\"number\">100</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;队列未满，生产者：&quot;</span>+Thread.currentThread().getName() + <span class=\"string\">&quot;放入数据&quot;</span> + i);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(queue.size() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\tnotifyAll();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tqueue.add(i);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">take</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(queue.size() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;队列为空，消费者：&quot;</span> + Thread.currentThread().getName() + <span class=\"string\">&quot;进入等待&quot;</span>);</span><br><span class=\"line\">\t\t\twait();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(queue.size() == maxSize) &#123;</span><br><span class=\"line\">\t\t\tnotifyAll();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;队列有数据，消费者：&quot;</span>+Thread.currentThread().getName() + <span class=\"string\">&quot;取出数据&quot;</span> + queue.remove());<span class=\"comment\">//删除第一个数据，最早放入的数据</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Producer</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> MyBlockingQueue myBlockingQueue;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"title function_\">Producer</span><span class=\"params\">(MyBlockingQueue myBlockingQueue)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.myBlockingQueue = myBlockingQueue;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span> ; i &lt; <span class=\"number\">5</span> ; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\tmyBlockingQueue.put();</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Consumer</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> MyBlockingQueue myBlockingQueue;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"title function_\">Consumer</span><span class=\"params\">(MyBlockingQueue myBlockingQueue)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.myBlockingQueue = myBlockingQueue;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span> ; i &lt; <span class=\"number\">5</span> ; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\tmyBlockingQueue.take();</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">producer_consumer_1</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">MyBlockingQueue</span> <span class=\"variable\">myBlockingQueue</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyBlockingQueue</span>(<span class=\"number\">8</span>);</span><br><span class=\"line\">\t\t<span class=\"type\">Producer</span> <span class=\"variable\">producer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Producer</span>(myBlockingQueue);</span><br><span class=\"line\">\t\t<span class=\"type\">Producer</span> <span class=\"variable\">producer2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Producer</span>(myBlockingQueue);</span><br><span class=\"line\">\t\t<span class=\"type\">Consumer</span> <span class=\"variable\">consumer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Consumer</span>(myBlockingQueue);</span><br><span class=\"line\">\t\t<span class=\"type\">Consumer</span> <span class=\"variable\">consumer2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Consumer</span>(myBlockingQueue);</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(producer).start();<span class=\"comment\">//生产者线程1，Thread-0</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(producer2).start();<span class=\"comment\">//生产者线程2，Thread-1</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(consumer).start();<span class=\"comment\">//消费者线程1，Thread-3</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(consumer2).start();<span class=\"comment\">//消费者线程2，Thread-4</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2022/08/27/%E6%89%8B%E5%86%99%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%BC%8F/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwNDgwNzgw,size_16,color_FFFFFF,t_70.png\" alt=\"在这里插入图片描述\"></p>\n<blockquote>\n<p>补充说明：<br>1.使用Linkedlist+等待唤醒机制（wait、notify/notifyAll）+Synchronized实现线程安全。</p>\n<p>2.为什么使用while不是if？</p>\n<p>判断线程是否进入等待状态时，判断需要while，不能用if。在生产者、消费者线程只有一个时，if可以使用。但是多个线程的情况时就会出现问题。</p>\n<p>例如：假设有两个消费者线程，一个生产者线程。队列为空时，消费者1进入等待状态，释放锁。消费者2抢到锁，进去后判断也进入等待，释放锁。这时生产者抢到锁生产数据，队列中有数据了，反过来唤醒两个消费者。<br>消费者1抢到锁执行wait()的逻辑，取出数据并释放锁。这时消费者2拿到锁，执行wait()后的逻辑取数据，但是此时队列中的数据已经被消费者1取出了，没有数据，这时就会出现线程不安全的情况。<br>利用while实现多次判断，不管消费者1还是2抢到锁，执行循环体的逻辑之前，会再一次判断条件是否成立，而if不会，所以使用while。</p>\n</blockquote>\n<h3 id=\"第二种方式（ReentrantLock-）\"><a href=\"#第二种方式（ReentrantLock-）\" class=\"headerlink\" title=\"第二种方式（ReentrantLock ）\"></a>第二种方式（ReentrantLock ）</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyBlockingQueueForCondition</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Queue&lt;Integer&gt; queue;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"type\">int</span> max;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"type\">ReentrantLock</span> <span class=\"variable\">lock</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ReentrantLock</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"type\">Condition</span> <span class=\"variable\">notEmpty</span> <span class=\"operator\">=</span> lock.newCondition();</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"type\">Condition</span> <span class=\"variable\">notFull</span> <span class=\"operator\">=</span> lock.newCondition();</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"title function_\">MyBlockingQueueForCondition</span><span class=\"params\">(<span class=\"type\">int</span> max)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.max = max;</span><br><span class=\"line\">\t\tqueue = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>&lt;Integer&gt;();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">put</span><span class=\"params\">(<span class=\"type\">int</span> i)</span> <span class=\"keyword\">throws</span> InterruptedException&#123;</span><br><span class=\"line\">\t\tlock.lock();</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span>(queue.size() == max) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">&quot;队列已满，生产者：&quot;</span> + Thread.currentThread().getName() + <span class=\"string\">&quot;进入等待&quot;</span>);</span><br><span class=\"line\">\t\t\t\tnotFull.await();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(queue.size() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\tnotEmpty.signalAll();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;队列未满，生产者：&quot;</span>+Thread.currentThread().getName() + <span class=\"string\">&quot;放入数据&quot;</span> + i);</span><br><span class=\"line\">\t\t\tqueue.add(i);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// <span class=\"doctag\">TODO:</span> handle exception</span></span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t\t\tlock.unlock();</span><br><span class=\"line\">\t\t&#125;\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">take</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException&#123;</span><br><span class=\"line\">\t\tlock.lock();</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span>(queue.size() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">&quot;队列为空，消费者：&quot;</span> + Thread.currentThread().getName() + <span class=\"string\">&quot;进入等待&quot;</span>);</span><br><span class=\"line\">\t\t\t\tnotEmpty.await();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(queue.size() == max) &#123;</span><br><span class=\"line\">\t\t\t\tnotFull.signalAll();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// <span class=\"doctag\">TODO:</span> handle exception</span></span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t\t\tlock.unlock();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> queue.remove();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;队列有数据，消费者：&quot;</span>+Thread.currentThread().getName() + <span class=\"string\">&quot;取出数据&quot;</span> + i);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> i;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ProducerForCondition</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> MyBlockingQueueForCondition myBlockingQueueForCondition;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"title function_\">ProducerForCondition</span><span class=\"params\">(MyBlockingQueueForCondition myBlockingQueueForCondition)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.myBlockingQueueForCondition = myBlockingQueueForCondition;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span> ; i &lt; <span class=\"number\">5</span> ; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\tmyBlockingQueueForCondition.put(i);</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ConsumerForCondition</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> MyBlockingQueueForCondition myBlockingQueueForCondition;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"title function_\">ConsumerForCondition</span><span class=\"params\">(MyBlockingQueueForCondition myBlockingQueueForCondition)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.myBlockingQueueForCondition = myBlockingQueueForCondition;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span> ; i &lt; <span class=\"number\">5</span> ; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\tmyBlockingQueueForCondition.take();</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">producer_consumer_2</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">\t\t<span class=\"type\">MyBlockingQueueForCondition</span> <span class=\"variable\">myBlockingQueueForCondition</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyBlockingQueueForCondition</span>(<span class=\"number\">8</span>);</span><br><span class=\"line\">\t\t<span class=\"type\">ProducerForCondition</span> <span class=\"variable\">producerForCondition1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ProducerForCondition</span>(myBlockingQueueForCondition);</span><br><span class=\"line\">\t\t<span class=\"type\">ProducerForCondition</span> <span class=\"variable\">producerForCondition2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ProducerForCondition</span>(myBlockingQueueForCondition);</span><br><span class=\"line\">\t\t<span class=\"type\">ConsumerForCondition</span> <span class=\"variable\">consumerForCondition1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ConsumerForCondition</span>(myBlockingQueueForCondition);</span><br><span class=\"line\">\t\t<span class=\"type\">ConsumerForCondition</span> <span class=\"variable\">consumerForCondition2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ConsumerForCondition</span>(myBlockingQueueForCondition);</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(producerForCondition1).start();</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(producerForCondition2).start();</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(consumerForCondition1).start();</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(consumerForCondition2).start();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2022/08/27/%E6%89%8B%E5%86%99%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%BC%8F/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwNDgwNzgw,size_16,color_FFFFFF,t_70-16616110494823.png\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"第三种方式（BlockingQueue-）\"><a href=\"#第三种方式（BlockingQueue-）\" class=\"headerlink\" title=\"第三种方式（BlockingQueue ）\"></a>第三种方式（BlockingQueue ）</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ArrayBlockingQueueTest</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> BlockingQueue&lt;Integer&gt; queue = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayBlockingQueue</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">Producer</span> <span class=\"variable\">producer1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Producer</span>(queue);</span><br><span class=\"line\">\t\t<span class=\"type\">Consumer</span> <span class=\"variable\">consumer1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Consumer</span>(queue);</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(producer1).start();</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(consumer1).start();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Producer</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">private</span> BlockingQueue queue;</span><br><span class=\"line\">\t\t<span class=\"keyword\">public</span> <span class=\"title function_\">Producer</span><span class=\"params\">(BlockingQueue queue)</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">this</span>.queue = queue;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123; </span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span> ; i &lt; <span class=\"number\">20</span>;i++) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"type\">Random</span> <span class=\"variable\">random</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Random</span>();</span><br><span class=\"line\">\t\t\t\t\t<span class=\"type\">int</span> <span class=\"variable\">element</span> <span class=\"operator\">=</span> random.nextInt(<span class=\"number\">100</span>);</span><br><span class=\"line\">\t\t\t\t\tSystem.out.println(<span class=\"string\">&quot;生产者&quot;</span> + Thread.currentThread().getName() + <span class=\"string\">&quot;生产数据：&quot;</span> + element);</span><br><span class=\"line\">\t\t\t\t\tqueue.put(element);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// <span class=\"doctag\">TODO:</span> handle exception</span></span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Consumer</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">private</span> BlockingQueue queue;</span><br><span class=\"line\">\t\t<span class=\"keyword\">public</span> <span class=\"title function_\">Consumer</span><span class=\"params\">(BlockingQueue queue)</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">this</span>.queue = queue;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span> ; i &lt; <span class=\"number\">20</span>;i++) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"type\">Integer</span> <span class=\"variable\">element</span> <span class=\"operator\">=</span> (Integer) queue.take();</span><br><span class=\"line\">\t\t\t\t\tSystem.out.println(<span class=\"string\">&quot;消费者&quot;</span> + Thread.currentThread().getName() + <span class=\"string\">&quot;消费数据：&quot;</span> + element);</span><br><span class=\"line\">\t\t\t\t\tThread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// <span class=\"doctag\">TODO:</span> handle exception</span></span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","categories":["面试"],"tags":["Java","面试"]},{"title":"java7新特性之方法句柄","url":"/2022/07/10/%E6%96%B9%E6%B3%95%E5%8F%A5%E6%9F%84/","content":"<h1 id=\"方法句柄\"><a href=\"#方法句柄\" class=\"headerlink\" title=\"方法句柄\"></a>方法句柄</h1><p>JDK6之前我们会使用java反射来实现动态方法调用，多数框架用反射的比较多，例如mybatis、spring等。在JDK7中，新增了java.lang.invoke.MethodHandle（方法句柄），称之为“现代化反射”。其实反射和java.lang.invoke.MethodHandle都是间接调用方法的途径，但java.lang.invoke.MethodHandle比反射更简洁，用反射功能会写一大堆冗余代码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Animal</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">void</span> <span class=\"title function_\">race</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Horse</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Animal</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">race</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Horse.race()&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.....</span><br><span class=\"line\"><span class=\"comment\">// 利用接口抽象方法</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    <span class=\"type\">Animal</span> <span class=\"variable\">animal</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Horse</span>();</span><br><span class=\"line\">    animal.race();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"comment\">// 反射调用</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    <span class=\"type\">Horse</span> <span class=\"variable\">object</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Horse</span>();</span><br><span class=\"line\">    <span class=\"type\">Method</span> <span class=\"variable\">method</span> <span class=\"operator\">=</span> object.getClass().getMethod(<span class=\"string\">&quot;race&quot;</span>);</span><br><span class=\"line\">    method.invoke(object);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>MethodType用来描述方法的返回值类型以及入参类型。<br>MehodHandle包含一个指向Method对象（方法在jvm内部的对等体）的指针。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">(String s)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello,&quot;</span> + s + <span class=\"string\">&quot;MethodHandle&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">        <span class=\"type\">Main</span> <span class=\"variable\">main</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Main</span>();</span><br><span class=\"line\">        <span class=\"type\">MethodHandle</span> <span class=\"variable\">mh</span> <span class=\"operator\">=</span> getToStringMH();</span><br><span class=\"line\">        System.out.println((String) mh.invokeExact(main, <span class=\"string\">&quot;ss&quot;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> MethodHandle <span class=\"title function_\">getToStringMH</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">MethodType</span> <span class=\"variable\">mt</span> <span class=\"operator\">=</span> MethodType.methodType(String.class, String.class);  <span class=\"comment\">//获取方法类型 参数为:1.返回值类型,2方法中参数类型</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">MethodHandle</span> <span class=\"variable\">mh</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            mh = MethodHandles.lookup().findVirtual(Main.class, <span class=\"string\">&quot;toString&quot;</span>, mt);  <span class=\"comment\">//查找方法句柄</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (NoSuchMethodException | IllegalAccessException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> mh;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>方法句柄是一个强类型的，能够被直接执行的引用。该引用可以指向常规的静态方法或者实例方法，也可以指向构造器或者字段。当指向字段时，方法句柄实则指向包含字段访问字节码的虚构方法，语义上等价于目标字段的 getter 或者 setter 方法。</p>\n<p>方法句柄的类型（MethodType）是由所指向方法的参数类型以及返回类型组成的。它是用来确认方法句柄是否适配的唯一关键。当使用方法句柄时，我们其实并不关心方法句柄所指向方法的类名或者方法名。</p>\n<p><strong>MethodHandle 的创建方式：</strong></p>\n<p>方式一、通过反射创建 MethodHandle（不符合初衷）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">race</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> MethodHandles.Lookup <span class=\"title function_\">lookup</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> MethodHandles.lookup();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">        <span class=\"type\">Method</span> <span class=\"variable\">method</span> <span class=\"operator\">=</span> Main.class.getDeclaredMethod(<span class=\"string\">&quot;race&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">MethodHandle</span> <span class=\"variable\">methodHandle</span> <span class=\"operator\">=</span> Main.lookup().unreflect(method);</span><br><span class=\"line\">        methodHandle.invoke();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">输出: hello</span><br></pre></td></tr></table></figure>\n\n<p>方式二、根据 MethodType 创建 MethodHandle</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">race</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;race&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">say</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;say&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> MethodHandles.Lookup <span class=\"title function_\">lookup</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> MethodHandles.lookup();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">        MethodHandles.<span class=\"type\">Lookup</span> <span class=\"variable\">lookup</span> <span class=\"operator\">=</span> Main.lookup();</span><br><span class=\"line\">        <span class=\"type\">MethodType</span> <span class=\"variable\">methodType</span> <span class=\"operator\">=</span> MethodType.methodType(<span class=\"keyword\">void</span>.class);</span><br><span class=\"line\">        <span class=\"type\">MethodHandle</span> <span class=\"variable\">methodHandle</span> <span class=\"operator\">=</span> lookup.findStatic(Main.class, <span class=\"string\">&quot;race&quot;</span>, methodType);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">MethodHandle</span> <span class=\"variable\">methodHandle2</span> <span class=\"operator\">=</span> lookup.findVirtual(Main.class, <span class=\"string\">&quot;say&quot;</span>, methodType);</span><br><span class=\"line\">        methodHandle.invoke();</span><br><span class=\"line\">        methodHandle2.invoke(<span class=\"keyword\">new</span> <span class=\"title class_\">Main</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">输出:</span><br><span class=\"line\">race</span><br><span class=\"line\">say</span><br></pre></td></tr></table></figure>\n\n<p>小结一下：</p>\n<p>1、<strong>方法句柄的访问权限不取决于方法句柄的创建位置，而是取决于 Lookup 对象的创建位置。</strong></p>\n<p>2、如果 JDK 版本大于8，那么可以在其他类中，也能够通过该 Lookup 对象对类私有属性进行赋值、取值操作。</p>\n<h4 id=\"外类中操控私有字段\"><a href=\"#外类中操控私有字段\" class=\"headerlink\" title=\"外类中操控私有字段\"></a>外类中操控私有字段</h4><p>因为权限问题，外类中创建的 Lookup 对象无法操控私有字段，那么有什么替代方案呢？</p>\n<ul>\n<li>通过操控get和set方法</li>\n<li>反射</li>\n</ul>\n<p>关于invoke和invokeExtract方法的区别：</p>\n<blockquote>\n<p>invokeExtract要求更加精确，<br>如下 methodHandle2.invokeExact(test1,5.1,new Integer(1));可以执行，<br>methodHandle2.invokeExact(test1,5.1,1);会报错，因为要将1转换为integer，所以不合要求。这个方法要求不能有任何类型转换，也就是参数严格一致。<br>invoke相对要轻松很多。</p>\n</blockquote>\n<p>关键概念</p>\n<blockquote>\n<p>Lookup<br>MethodHandle 的创建工厂，通过它可以创建MethodHandle，值得注意的是检查工作是在创建时处理的，而不是在调用时处理。</p>\n<p>MethodType<br>顾名思义，就是代表方法的签名。一个方法的返回值类型是什么，有几个参数，每个参数的类型什么？</p>\n<p>MethodHandle<br>方法句柄，通过它我们就可以动态访问类型信息了。</p>\n</blockquote>\n<p>如何使用</p>\n<blockquote>\n<p>当理解了上面几个关键概念后使用起来就比较简单了，总的来说只需要4步：</p>\n<p>创建Lookup<br>创建MethodType<br>基于Lookup与MethodType获得MethodHandle<br>调用MethodHandle</p>\n</blockquote>\n","categories":["java知识"],"tags":["java基础","方法句柄， JVM"]},{"title":"泰拉瑞亚服务器搭建","url":"/2022/08/10/%E6%B3%B0%E6%8B%89%E7%91%9E%E4%BA%9A%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/","content":"<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">一、设置swap，防止内存不足</span><br><span class=\"line\">首先查看</span><br><span class=\"line\">free –m</span><br><span class=\"line\">可以看到swap分区是0</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">1、删除原有的分区</span><br><span class=\"line\">swapoff -a</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">2、新建分区</span><br><span class=\"line\">dd if=/dev/zero of=/root/swapfile bs=1M count=2048</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">3、格式化交换分区</span><br><span class=\"line\">mkswap /root/swapfile</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">4、启动新建的swap交换分区</span><br><span class=\"line\">swapon /root/swapfile</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">5、添加开机启动</span><br><span class=\"line\">进入目录</span><br><span class=\"line\">vi /etc/fstab</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">按（英文下状态小写的）i进入编辑模式，到达文件底部添加内容</span><br><span class=\"line\">/root/swapfile swap swap defaults 0 0</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">完毕后依次按键盘 Esc-键盘shift+:+输入wq保存/退出编辑好的文件</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">6、使用命令重启服务器</span><br><span class=\"line\">reboot</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">……等待重启</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">7、检查</span><br><span class=\"line\">输入命令free –m</span><br><span class=\"line\">看Swap有了数值，表示成功添加。</span><br><span class=\"line\"></span><br><span class=\"line\">8、进入管理员权限</span><br><span class=\"line\">sudo su root</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">二、安装工具</span><br><span class=\"line\">1、下载工具</span><br><span class=\"line\"></span><br><span class=\"line\">yum romove wget</span><br><span class=\"line\"></span><br><span class=\"line\">yum install -y wget</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">2、解压工具</span><br><span class=\"line\">yum install -y unzip</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">3、压缩工具</span><br><span class=\"line\">yum install –y zip</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">4、远程管理工具</span><br><span class=\"line\">yum install -y screen</span><br><span class=\"line\">看到Complete!表示完成</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">三、创建目录</span><br><span class=\"line\">1、创建父目录</span><br><span class=\"line\">mkdir /opt/terraria</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">2、创建2个子目录,和存档目录</span><br><span class=\"line\">mkdir /opt/terraria/bin keyword zip</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">3、查看目录是否创建成功</span><br><span class=\"line\">ls /opt/terraria/</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">4、进入zip文件夹</span><br><span class=\"line\">cd /opt/terraria/zip</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">5、下载泰拉瑞亚服务器包（最新版本去官网寻找）</span><br><span class=\"line\">wget https://terraria.org/api/download/pc-dedicated-server/terraria-server-1436.zip</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">6、查看是否下载好terraria-server-1436.zip</span><br><span class=\"line\">ls</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">7、解压服务器包到bin文件夹</span><br><span class=\"line\">unzip terraria-server-1436.zip -d ../bin</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">8、新建服务器的配置文件</span><br><span class=\"line\">vim ../server-config</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">按（英文状态小写的）i进入编辑模式</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">world=/opt/terraria/keyword/存档名.wld</span><br><span class=\"line\">worldname=世界的名字</span><br><span class=\"line\">difficulty=0</span><br><span class=\"line\">autocreate=2</span><br><span class=\"line\">maxplayers=4</span><br><span class=\"line\">password=设定一个密码</span><br><span class=\"line\">worldpath=/opt/terraria/keyword</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">参数解释：</span><br><span class=\"line\">autocreate是地图大小1&lt;2&lt;3</span><br><span class=\"line\">difficulty是难度0为普通,1为专家</span><br><span class=\"line\">maxplayers 最大人数</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">按esc-shift+:- wq保存退出</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">四、启动准备</span><br><span class=\"line\">1、放行7777端口</span><br><span class=\"line\">启动防火墙：systemctl start firewalld</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">firewall-cmd --permanent --add-port=7777/tcp</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">firewall-cmd --reload</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">1、给文件添加最高权限</span><br><span class=\"line\">chmod 777 /opt/terraria/bin/1432/Linux/TerrariaServer.bin.x86_64</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">2、进入启动目录</span><br><span class=\"line\">cd /opt/terraria/bin/1432/Linux</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">3、启动服务器使用自定义的配置文件</span><br><span class=\"line\">./TerrariaServer.bin.x86_64 -config /opt/terraria/server-config</span><br><span class=\"line\">等待加载……</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">4、已经创建成功此时还差一步</span><br><span class=\"line\">先退出</span><br><span class=\"line\">exit</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">编辑之前的配置文件</span><br><span class=\"line\">vim /opt/terraria/server-config</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">按（英文状态小写的）i进入编辑模式</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">分别给worldname=xx 每段前加#号</span><br><span class=\"line\">difficulty=xx</span><br><span class=\"line\">autocreate=xx</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">按esc-shift+:- wq保存退出</span><br><span class=\"line\">目的是让注释代码让其失效，不然每次重开服务器都会生成新世界</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">五、创建新会话来运行服务器</span><br><span class=\"line\">1、移动到服务器目录</span><br><span class=\"line\">cd /opt/terraria/1432/Linux</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">2、创建新的screen会话，用于运行服务器</span><br><span class=\"line\">screen -S terrariaServer</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">3、启动服务器使用自定义的配置文件</span><br><span class=\"line\">./TerrariaServer.bin.x86_64 -config /opt/terraria/server-config</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">创建好后,使用Ctrl+A+D退出会话，不会被关闭</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">停止服务器输入</span><br><span class=\"line\">exit</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">重新连接screen会话</span><br><span class=\"line\">screen -R terrariaServer</span><br></pre></td></tr></table></figure>\n\n\n\n\n","categories":["兴趣"],"tags":["Linux","游戏"]},{"title":"浅谈数据库大数据量问题","url":"/2022/09/14/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%A7%E6%95%B0%E6%8D%AE%E9%87%8F%E6%8F%92%E5%85%A5/","content":"<h2 id=\"大批量插入数据优化\"><a href=\"#大批量插入数据优化\" class=\"headerlink\" title=\"大批量插入数据优化\"></a>大批量插入数据优化</h2><blockquote>\n<h3 id=\"1-一条SQL语句插入多条数据\"><a href=\"#1-一条SQL语句插入多条数据\" class=\"headerlink\" title=\"1.一条SQL语句插入多条数据\"></a>1.一条SQL语句插入多条数据</h3><p>常用的插入语句如：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> `insert_table` (`datetime`, `uid`, `content`, `type`) </span><br><span class=\"line\">    <span class=\"keyword\">VALUES</span> (<span class=\"string\">&#x27;0&#x27;</span>, <span class=\"string\">&#x27;userid_0&#x27;</span>, <span class=\"string\">&#x27;content_0&#x27;</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> `insert_table` (`datetime`, `uid`, `content`, `type`) </span><br><span class=\"line\">    <span class=\"keyword\">VALUES</span> (<span class=\"string\">&#x27;1&#x27;</span>, <span class=\"string\">&#x27;userid_1&#x27;</span>, <span class=\"string\">&#x27;content_1&#x27;</span>, <span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n\n<p>修改成：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> `insert_table` (`datetime`, `uid`, `content`, `type`) </span><br><span class=\"line\">    <span class=\"keyword\">VALUES</span> (<span class=\"string\">&#x27;0&#x27;</span>, <span class=\"string\">&#x27;userid_0&#x27;</span>, <span class=\"string\">&#x27;content_0&#x27;</span>, <span class=\"number\">0</span>), (<span class=\"string\">&#x27;1&#x27;</span>, <span class=\"string\">&#x27;userid_1&#x27;</span>, <span class=\"string\">&#x27;content_1&#x27;</span>, <span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n\n<p>修改后的插入操作能够提高程序的插入效率。这里第二种SQL执行效率高的主要原因是合并后日志量（MySQL的binlog和innodb的事务让日志）减少了， <strong>降低日志刷盘的数据量和频率，从而提高效率</strong>。通过合并SQL语句，同时也能减少SQL语句解析的次数，减少网络传输的IO 。</p>\n<p>可以显著提高效率</p>\n<h3 id=\"2-在事务中进行插入处理。\"><a href=\"#2-在事务中进行插入处理。\" class=\"headerlink\" title=\"2.在事务中进行插入处理。\"></a>2.在事务中进行插入处理。</h3><p>把插入修改成：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">START</span> TRANSACTION;</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> `insert_table` (`datetime`, `uid`, `content`, `type`) </span><br><span class=\"line\">    <span class=\"keyword\">VALUES</span> (<span class=\"string\">&#x27;0&#x27;</span>, <span class=\"string\">&#x27;userid_0&#x27;</span>, <span class=\"string\">&#x27;content_0&#x27;</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> `insert_table` (`datetime`, `uid`, `content`, `type`) </span><br><span class=\"line\">    <span class=\"keyword\">VALUES</span> (<span class=\"string\">&#x27;1&#x27;</span>, <span class=\"string\">&#x27;userid_1&#x27;</span>, <span class=\"string\">&#x27;content_1&#x27;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">COMMIT</span>;</span><br></pre></td></tr></table></figure>\n\n<p>使用事务可以提高数据的插入效率，这是因为进行一个INSERT操作时，<strong>MySQL内部会建立一个事务</strong>，在事务内才进行真正插入处理操作。通过使用事务可以减少创建事务的消耗， <code>所有插入都在执行后才进行提交操作</code> 。</p>\n<h3 id=\"3-数据有序插入。\"><a href=\"#3-数据有序插入。\" class=\"headerlink\" title=\"3.数据有序插入。\"></a>3.数据有序插入。</h3><p>数据有序的插入是指插入记录在主键上是有序排列，例如datetime是记录的主键：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> `insert_table` (`datetime`, `uid`, `content`, `type`) </span><br><span class=\"line\">    <span class=\"keyword\">VALUES</span> (<span class=\"string\">&#x27;1&#x27;</span>, <span class=\"string\">&#x27;userid_1&#x27;</span>, <span class=\"string\">&#x27;content_1&#x27;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> `insert_table` (`datetime`, `uid`, `content`, `type`) </span><br><span class=\"line\">    <span class=\"keyword\">VALUES</span> (<span class=\"string\">&#x27;0&#x27;</span>, <span class=\"string\">&#x27;userid_0&#x27;</span>, <span class=\"string\">&#x27;content_0&#x27;</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> `insert_table` (`datetime`, `uid`, `content`, `type`) </span><br><span class=\"line\">    <span class=\"keyword\">VALUES</span> (<span class=\"string\">&#x27;2&#x27;</span>, <span class=\"string\">&#x27;userid_2&#x27;</span>, <span class=\"string\">&#x27;content_2&#x27;</span>,<span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n\n<p>修改成：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> `insert_table` (`datetime`, `uid`, `content`, `type`) </span><br><span class=\"line\">    <span class=\"keyword\">VALUES</span> (<span class=\"string\">&#x27;0&#x27;</span>, <span class=\"string\">&#x27;userid_0&#x27;</span>, <span class=\"string\">&#x27;content_0&#x27;</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> `insert_table` (`datetime`, `uid`, `content`, `type`) </span><br><span class=\"line\">    <span class=\"keyword\">VALUES</span> (<span class=\"string\">&#x27;1&#x27;</span>, <span class=\"string\">&#x27;userid_1&#x27;</span>, <span class=\"string\">&#x27;content_1&#x27;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> `insert_table` (`datetime`, `uid`, `content`, `type`) </span><br><span class=\"line\">    <span class=\"keyword\">VALUES</span> (<span class=\"string\">&#x27;2&#x27;</span>, <span class=\"string\">&#x27;userid_2&#x27;</span>, <span class=\"string\">&#x27;content_2&#x27;</span>,<span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n\n<p><strong>由于数据库插入时，需要维护索引数据</strong>，<code>无序的记录会增大维护索引的成本</code>。 我们可以参照InnoDB使用的B+tree索引，如果每次插入记录都在索引的最后面，索引的定位效率很高，并且对索引调整较小；如果插入的记录在索引中间，需要B+tree进行分裂合并等处理，会消耗比较多计算资源，并且插入记录的索引定位效率会下降，数据量较大时会有频繁的磁盘操作。</p>\n</blockquote>\n","categories":["面试"],"tags":["面试","Mysql"]},{"title":"浅谈AQS","url":"/2022/09/01/%E6%B5%85%E8%B0%88AQS/","content":"<h3 id=\"AQS的原理\"><a href=\"#AQS的原理\" class=\"headerlink\" title=\"AQS的原理\"></a>AQS的原理</h3><blockquote>\n<p>AQS:全称是AbstractQuenedSynchronizer（抽象队列同步器）。是除了java自带的synchronized关键字之外的锁机制。</p>\n</blockquote>\n<h3 id=\"AQS的核心思想是\"><a href=\"#AQS的核心思想是\" class=\"headerlink\" title=\"AQS的核心思想是:\"></a><strong>AQS的核心思想</strong>是:</h3><blockquote>\n<p> 如果被请求的共享资源空闲，则将当前请求资源的线程设置为有效的工作线程，并将共享资源设置为锁定状态，如果被请求的共享资源被占用，那么就需要一套线程阻塞等待以及被唤醒时锁分配的机制，这个机制AQS是用CLH队列锁实现的，即将暂时获取不到锁的线程加入到队列中。</p>\n<p>CLH（Craig，Landin，and Hagersten locks）队列是一个虚拟的双向队列，虚拟的双向队列即不存在队列实例，仅存在节点之间的关联关系。<br><strong>AQS是将每一条请求共享资源的线程封装成一个CLH锁队列的一个结点（Node），来实现锁的分配。</strong></p>\n<p>用大白话来说，AQS就是基于CLH队列，用volatile修饰共享变量state，线程通过CAS去改变状态符，成功则获取锁成功，失败则进入等待队列，等待被唤醒。</p>\n<p><strong>注意：AQS是自旋锁：</strong>在等待唤醒的时候，经常会使用自旋（while(!cas())）的方式，不停地尝试获取锁，直到被其他线程获取成功</p>\n<p><strong>实现了AQS的锁有：自旋锁、互斥锁、读锁写锁、条件产量、信号量、栅栏都是AQS的衍生物</strong></p>\n</blockquote>\n<p><img src=\"/2022/09/01/%E6%B5%85%E8%B0%88AQS/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L211bGluc2VuNzc=,size_16,color_FFFFFF,t_70.png\" alt=\"在这里插入图片描述\"></p>\n<p>如图示，AQS维护了一个volatile int state和一个FIFO线程等待队列，多线程争用资源被阻塞的时候就会进入这个队列。state就是共享资源，其访问方式有如下三种：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">getState()</span><br><span class=\"line\"></span><br><span class=\"line\">setState()</span><br><span class=\"line\"></span><br><span class=\"line\">compareAndSetState()</span><br></pre></td></tr></table></figure>\n\n<p>AQS 定义了两种资源共享方式：<br>1.<strong>Exclusive</strong>：独占，只有一个线程能执行，如ReentrantLock<br>2.<strong>Share</strong>：共享，多个线程可以同时执行，如Semaphore、CountDownLatch、ReadWriteLock，CyclicBarrier</p>\n<p>不同的自定义同步器争用共享资源的方式也不同。自定义同步器在实现时只需要实现共享资源state的获取与释放方式即可，至于具体线程等待队列的维护（如获取资源失败入队/唤醒出队等），AQS已经在顶层实现好了。自定义同步器实现时主要实现以下几种方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">isHeldExclusively()：该线程是否正在独占资源。只有用到condition才需要去实现它。</span><br><span class=\"line\">tryAcquire(<span class=\"type\">int</span>)：独占方式。尝试获取资源，成功则返回<span class=\"literal\">true</span>，失败则返回<span class=\"literal\">false</span>。</span><br><span class=\"line\">tryRelease(<span class=\"type\">int</span>)：独占方式。尝试释放资源，成功则返回<span class=\"literal\">true</span>，失败则返回<span class=\"literal\">false</span>。</span><br><span class=\"line\">tryAcquireShared(<span class=\"type\">int</span>)：共享方式。尝试获取资源。负数表示失败；<span class=\"number\">0</span>表示成功，但没有剩余可用资源；正数表示成功，且有剩余资源。</span><br><span class=\"line\">tryReleaseShared(<span class=\"type\">int</span>)：共享方式。尝试释放资源，如果释放后允许唤醒后续等待结点返回<span class=\"literal\">true</span>，否则返回<span class=\"literal\">false</span>。</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"state状态\"><a href=\"#state状态\" class=\"headerlink\" title=\"state状态\"></a>state状态</h3><p>AbstractQueuedSynchronizer维护了一个volatile int类型的变量，用户表示当前同步状态。volatile虽然不能保证操作的原子性，但是保证了当前变量state的可见性。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * The synchronization state.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"type\">int</span> state;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Returns the current value of synchronization state.</span></span><br><span class=\"line\"><span class=\"comment\"> * This operation has memory semantics of a &#123;<span class=\"doctag\">@code</span> volatile&#125; read.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> current state value</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"title function_\">getState</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> state;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Sets the value of synchronization state.</span></span><br><span class=\"line\"><span class=\"comment\"> * This operation has memory semantics of a &#123;<span class=\"doctag\">@code</span> volatile&#125; write.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> newState the new state value</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setState</span><span class=\"params\">(<span class=\"type\">int</span> newState)</span> &#123;</span><br><span class=\"line\">    state = newState;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Atomically sets synchronization state to the given updated</span></span><br><span class=\"line\"><span class=\"comment\"> * value if the current state value equals the expected value.</span></span><br><span class=\"line\"><span class=\"comment\"> * This operation has memory semantics of a &#123;<span class=\"doctag\">@code</span> volatile&#125; read</span></span><br><span class=\"line\"><span class=\"comment\"> * and write.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> expect the expected value</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> update the new value</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"doctag\">@code</span> true&#125; if successful. False return indicates that the actual</span></span><br><span class=\"line\"><span class=\"comment\"> *         value was not equal to the expected value.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"type\">boolean</span> <span class=\"title function_\">compareAndSetState</span><span class=\"params\">(<span class=\"type\">int</span> expect, <span class=\"type\">int</span> update)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// See below for intrinsics setup to support this</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> unsafe.compareAndSwapInt(<span class=\"built_in\">this</span>, stateOffset, expect, update);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"应用实现\"><a href=\"#应用实现\" class=\"headerlink\" title=\"应用实现\"></a>应用实现</h3><ul>\n<li><p>Lock</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">NonfairSync</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Sync</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> <span class=\"variable\">serialVersionUID</span> <span class=\"operator\">=</span> <span class=\"number\">7316153563782823691L</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Performs lock.  Try immediate barge, backing up to normal</span></span><br><span class=\"line\"><span class=\"comment\">     * acquire on failure.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title function_\">lock</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (compareAndSetState(<span class=\"number\">0</span>, <span class=\"number\">1</span>))</span><br><span class=\"line\">            setExclusiveOwnerThread(Thread.currentThread());</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            acquire(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"type\">boolean</span> <span class=\"title function_\">tryAcquire</span><span class=\"params\">(<span class=\"type\">int</span> acquires)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> nonfairTryAcquire(acquires);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title function_\">acquire</span><span class=\"params\">(<span class=\"type\">int</span> arg)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!tryAcquire(arg) &amp;&amp;</span><br><span class=\"line\">        acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</span><br><span class=\"line\">        selfInterrupt();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  </span><br></pre></td></tr></table></figure>\n\n<p>通过注释我们知道，acquire方法是一种互斥模式，且忽略中断。该方法至少执行一次tryAcquire(int)方法，如果tryAcquire(int)方法返回true，则acquire直接返回，否则当前线程需要进入队列进行排队。函数流程如下：</p>\n<ul>\n<li>tryAcquire()尝试直接去获取资源，如果成功则直接返回；</li>\n<li>addWaiter()将该线程加入等待队列的尾部，并标记为独占模式；</li>\n<li>acquireQueued()使线程在等待队列中获取资源，一直获取到资源后才返回。如果在整个等待过程中被中断过，则返回true，否则返回false。</li>\n<li>如果线程在等待过程中被中断过，它是不响应的。只是获取资源后才再进行自我中断selfInterrupt()，将中断补上。</li>\n</ul>\n<h4 id=\"tryAcquire\"><a href=\"#tryAcquire\" class=\"headerlink\" title=\"tryAcquire\"></a>tryAcquire</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"type\">boolean</span> <span class=\"title function_\">tryAcquire</span><span class=\"params\">(<span class=\"type\">int</span> arg)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UnsupportedOperationException</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"type\">boolean</span> <span class=\"title function_\">nonfairTryAcquire</span><span class=\"params\">(<span class=\"type\">int</span> acquires)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">Thread</span> <span class=\"variable\">current</span> <span class=\"operator\">=</span> Thread.currentThread();</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> getState();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (compareAndSetState(<span class=\"number\">0</span>, acquires)) &#123;</span><br><span class=\"line\">                setExclusiveOwnerThread(current);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (current == getExclusiveOwnerThread()) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">nextc</span> <span class=\"operator\">=</span> c + acquires;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nextc &lt; <span class=\"number\">0</span>) <span class=\"comment\">// overflow</span></span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&quot;Maximum lock count exceeded&quot;</span>);</span><br><span class=\"line\">            setState(nextc);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br></pre></td></tr></table></figure>\n\n<p>1.判断状态位是否为0,0是可以占用,如果是0的话占用,不是0的话返回false</p>\n<p>2.判断当前线程是否为得到位置的线程,比如如果前一个线程走了,然后又回来有点事情的话,那么返回false</p>\n</li>\n</ul>\n","categories":["面试"],"tags":["面试","Juc"]},{"title":"浅谈Lambda表达式","url":"/2022/09/14/%E6%B5%85%E8%B0%88Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/","content":"<h4 id=\"什么是Lambda表达式？\"><a href=\"#什么是Lambda表达式？\" class=\"headerlink\" title=\"什么是Lambda表达式？\"></a>什么是Lambda表达式？</h4><blockquote>\n<p>可以将Lambda表达式理解为一个匿名函数； Lambda表达式允许将一个函数作为另外一个函数的参数； 我们可以把 Lambda 表达式理解为是一段可以传递的代码（将代码作为实参）,也可以理解为函数式编程，将一个函数作为参数进行传递。</p>\n</blockquote>\n<h4 id=\"2-为什么要引入Lambda表达式？\"><a href=\"#2-为什么要引入Lambda表达式？\" class=\"headerlink\" title=\"2. 为什么要引入Lambda表达式？\"></a>2. 为什么要引入Lambda表达式？</h4><blockquote>\n<p>当java程序员看到其他语言的程序员（如JS，Python）在使用闭包或者Lambda表达式的时候，于是开始吐槽世界上使用最广的语言居然不支持函数式编程。千呼万唤，Java8推出了Lambda表达式。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.isea.java;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestLambda</span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">       <span class=\"type\">Thread</span> <span class=\"variable\">thread</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">MyRunnable</span>());</span><br><span class=\"line\">       thread.start();</span><br><span class=\"line\">       thread.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyRunnable</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span>&#123;</span><br><span class=\"line\">\t    <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Hello&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>为了使这段代码变得更加简洁，可以使用匿名内部类重构一下（注意代码中的注释）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.isea.java;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestLambda</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Runnable</span>() &#123;</span><br><span class=\"line\">        <span class=\"comment\">//这里的new Runnable()，这里new 了接口，在这个new的接口里面，我们写了这个接口的实现类。</span></span><br><span class=\"line\">        <span class=\"comment\">//这里可以看出，我们把一个重写的run()方法传入了一个构造函数中。</span></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;Hello&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-Lambda表达式的分类\"><a href=\"#3-Lambda表达式的分类\" class=\"headerlink\" title=\"3. Lambda表达式的分类\"></a>3. Lambda表达式的分类</h4><h5 id=\"1-无参无返回值\"><a href=\"#1-无参无返回值\" class=\"headerlink\" title=\"1. 无参无返回值\"></a>1. 无参无返回值</h5><blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestLambda</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; System.out.println(<span class=\"string\">&quot;Hello&quot;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h5 id=\"2-有参无返回值\"><a href=\"#2-有参无返回值\" class=\"headerlink\" title=\"2. 有参无返回值\"></a>2. 有参无返回值</h5><blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestLambda</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        ArrayList&lt;String&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        list.add(<span class=\"string\">&quot;AAAAA&quot;</span>);</span><br><span class=\"line\">        list.add(<span class=\"string\">&quot;BBBBB&quot;</span>);</span><br><span class=\"line\">        list.add(<span class=\"string\">&quot;CCCCC&quot;</span>);</span><br><span class=\"line\">        list.add(<span class=\"string\">&quot;DDDDD&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">//形参的类型是确定的，可省略；只有一个形参，()可以省略；</span></span><br><span class=\"line\">        list.forEach(t -&gt; System.out.print(t + <span class=\"string\">&quot;\\t&quot;</span>));</span><br><span class=\"line\"><span class=\"comment\">//或者更简洁的方法引用：list.forEach(System.out::println);</span></span><br><span class=\"line\">        <span class=\"comment\">//打印结果：AAAAA\tBBBBB\tCCCCC\tDDDDD</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">forEach</span><span class=\"params\">(Consumer&lt;? <span class=\"built_in\">super</span> E&gt; action)</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>forEach() 功能等同与增强型for循环 这个方法来自于Iterable接口，Collection接口继承了这个接口，List又继承了Collection接口，而ArrayList是List的实现类；forEach函数，指明该函数需要传入一个函数，而且是有参数没有返回值的函数，而Consumer接口中正好有且仅有一个这样的有参无返回值的抽象方法。接下来，我们会了解到这是使用Lambda的必要条件。</p>\n<h5 id=\"3-无参有返回值\"><a href=\"#3-无参有返回值\" class=\"headerlink\" title=\"3. 无参有返回值\"></a>3. 无参有返回值</h5><blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Random;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.stream.Stream;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestLambda</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Random</span> <span class=\"variable\">random</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Random</span>();</span><br><span class=\"line\">        Stream&lt;Integer&gt; stream = Stream.generate(() -&gt;random.nextInt(<span class=\"number\">100</span>));</span><br><span class=\"line\">        stream.forEach(t -&gt; System.out.println(t));</span><br><span class=\"line\">    &#125;<span class=\"comment\">//只有一个return，可以省略return；该方法将会不断的打印100以内的正整数。</span></span><br><span class=\"line\">&#125;<span class=\"comment\">//Stream.generate()方法创建无限流，该方法要求传入一个无参有返回值的方法。</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span>&lt;T&gt; Stream&lt;T&gt; <span class=\"title function_\">generate</span><span class=\"params\">(Supplier&lt;T&gt; s)</span> <span class=\"comment\">//来自源码</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n<h5 id=\"4-有参有返回值\"><a href=\"#4-有参有返回值\" class=\"headerlink\" title=\"4. 有参有返回值\"></a>4. 有参有返回值</h5><blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.text.Collator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.TreeSet;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestLambda</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Collator</span> <span class=\"variable\">collator</span> <span class=\"operator\">=</span> Collator.getInstance();</span><br><span class=\"line\">        TreeSet&lt;Student&gt; set = <span class=\"keyword\">new</span> <span class=\"title class_\">TreeSet</span>&lt;&gt;((s1,s2) -&gt; collator.compare(s1.getName(),s2.getName()));</span><br><span class=\"line\">        set.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Student</span>(<span class=\"number\">10</span>,<span class=\"string\">&quot;张飞&quot;</span>));</span><br><span class=\"line\">        set.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Student</span>(<span class=\"number\">3</span>,<span class=\"string\">&quot;周瑜&quot;</span>));</span><br><span class=\"line\">        set.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Student</span>(<span class=\"number\">1</span>,<span class=\"string\">&quot;宋江&quot;</span>));</span><br><span class=\"line\">        set.forEach(student -&gt; System.out.println(student));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;<span class=\"comment\">//这里的Collator是一个抽象类，但是提供了获取该类实例的方法getInstance()</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Student</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Student</span><span class=\"params\">(<span class=\"type\">int</span> id, String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.id = id;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getId</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setId</span><span class=\"params\">(<span class=\"type\">int</span> id)</span> &#123;</span><br><span class=\"line\">        Home | This.ID = id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setName</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Student&#123;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;id=&quot;</span> + id +</span><br><span class=\"line\">                <span class=\"string\">&quot;, name=&#x27;&quot;</span> + name + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&#x27;&#125;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h4 id=\"4-函数式接口\"><a href=\"#4-函数式接口\" class=\"headerlink\" title=\"4. 函数式接口\"></a>4. 函数式接口</h4><blockquote>\n<p>即SAM（Single Abstract Method ）接口，有且只有一个抽象方法的接口（可以有默认方法或者是静态方法和从Object继承来的方法，但是抽象方法有且只能有一个）。 JDK1.8之后，添加@FunctionalInterface表示这个接口是是一个函数式接口，因为有了@functionalInterface标记，也称这样的接口为Mark（标记）类型的接口。举例子：</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\">java.lang.Runnable&#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\">java.lang.Comparator&lt;T&gt;&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> <span class=\"title function_\">compare</span><span class=\"params\">(T o1, T o2)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Function</span>&lt;T, R&gt; &#123;</span><br><span class=\"line\">\tR <span class=\"title function_\">apply</span><span class=\"params\">(T t)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>针对上面的例子，比方说这个Runnable接口是支持Lambda表达式，那么如果有一个方法（比如Thread类的构造函数）需要传入一个Runnable接口的实现类的话，那么就可以直接把Lambda表达式写进去。</p>\n<p>换个角度说TreeSet，它有一个构造函数中是要求传入一个接口类型，如果这个接口类型恰好是函数式接口，那么直接传进去一个Lambda表达式即可。</p>\n<p><strong>函数式接口作用</strong></p>\n<blockquote>\n<p>函数式接口能够接受匿名内部类的实例化对象，换句话说，我们可以使用匿名内部类来实例化函数式接口的对象，而Lambda表达式能够代替内部类实现代码的进一步简化，因此，Lambda表达式和函数式接口紧密的联系到了一起，接下来的这句话非常的重要：</p>\n<p>每一个Lambda表达式能隐式的给函数式接口赋值</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; System.out.println(<span class=\"string\">&quot;hello&quot;</span>)).start();</span><br></pre></td></tr></table></figure>\n</blockquote>\n<blockquote>\n<p>编译器会认为Thread()中传入的是一个Runnable的对象，而我们利用IDEA的智能感知，鼠标指向“-&gt;”或“（）”的时候，会发现这是一个Runnable类型，实际上编译器会自动将Lambda表达式赋值给函数式接口，在本例中就是Runnable接口。本例中Lambda表达式将打印方法传递给了Runnable接口中的run（）方法，从而形成真正的方法体。</p>\n<p>而且，参数与返回值是一一对应的，即如果函数式接口中的抽象方法是有返回值，有参数的，那么要求Lambda表达式也是有返回值，有参数的（余下类推）</p>\n</blockquote>\n<blockquote>\n<p><strong>四大函数式接口：</strong></p>\n<p>有时候后，如果我们调用某一个方法，发现这个方法中需要传入的参数要求是一个函数式的接口，那么我们可以直接传入Lambda表达式。这些接口位于java.util.function包下，需要注意一下，java.util包和java.util.function包这两个包没有什么关系，切不可以为function包是java.util包下面的包。</p>\n<ol>\n<li>消费型接口：Consumer&lt; T&gt; void accept(T t)有参数，无返回值的抽象方法；</li>\n<li>供给型接口：Supplier &lt; T&gt; T get() 无参有返回值的抽象方法；</li>\n<li>断定型接口： Predicate&lt; T&gt; boolean test(T t):有参，但是返回值类型是固定的boolean</li>\n<li>函数型接口： Function&lt; T，R&gt; R apply(T t)有参有返回值的抽象方法；</li>\n</ol>\n</blockquote>\n<h4 id=\"5-新日期时间API-补充\"><a href=\"#5-新日期时间API-补充\" class=\"headerlink\" title=\"5. 新日期时间API(补充)\"></a>5. 新日期时间API(补充)</h4><blockquote>\n<h4 id=\"1-LocalDate-只有年月日\"><a href=\"#1-LocalDate-只有年月日\" class=\"headerlink\" title=\"1. LocalDate(只有年月日)\"></a>1. LocalDate(只有年月日)</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LocalDate_Test</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">LocalDate</span> <span class=\"variable\">date</span> <span class=\"operator\">=</span> LocalDate.now();</span><br><span class=\"line\">        System.out.println(date.getYear()+<span class=\"string\">&quot; &quot;</span>+date.getMonthValue()+<span class=\"string\">&quot; &quot;</span>+date.getDayOfMonth());</span><br><span class=\"line\">        System.out.println(date.toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-LocalTime-只有时分秒\"><a href=\"#2-LocalTime-只有时分秒\" class=\"headerlink\" title=\"2 . LocalTime(只有时分秒)\"></a>2 . LocalTime(只有时分秒)</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LocalTime_Test</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">LocalTime</span> <span class=\"variable\">time</span> <span class=\"operator\">=</span> LocalTime.now();</span><br><span class=\"line\">        System.out.println(time.getHour()+<span class=\"string\">&quot; &quot;</span>+time.getMinute()+<span class=\"string\">&quot; &quot;</span>+time.getSecond());</span><br><span class=\"line\">        System.out.println(time.toString());</span><br><span class=\"line\">        System.out.println(time.toSecondOfDay());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-LocalDateTime-年月日和时分秒\"><a href=\"#3-LocalDateTime-年月日和时分秒\" class=\"headerlink\" title=\"3. LocalDateTime(年月日和时分秒)\"></a>3. LocalDateTime(年月日和时分秒)</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LocalDateTime_Test</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">LocalDateTime</span> <span class=\"variable\">dateTime</span> <span class=\"operator\">=</span> LocalDateTime.now();</span><br><span class=\"line\">        System.out.println(dateTime.getYear()+<span class=\"string\">&quot; &quot;</span>+dateTime.getMonthValue()+<span class=\"string\">&quot; &quot;</span>+dateTime.getDayOfMonth()+</span><br><span class=\"line\">                            dateTime.getHour()+<span class=\"string\">&quot; &quot;</span>+dateTime.getMinute()+<span class=\"string\">&quot; &quot;</span>+dateTime.getSecond());</span><br><span class=\"line\">        System.out.println(dateTime.toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-DateTimeFormatter\"><a href=\"#4-DateTimeFormatter\" class=\"headerlink\" title=\"4. DateTimeFormatter\"></a>4. DateTimeFormatter</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DateTimeFormatter_Test</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">DateTimeFormatter</span> <span class=\"variable\">formatter</span> <span class=\"operator\">=</span> DateTimeFormatter.ofPattern(<span class=\"string\">&quot;yyyy-MM-dd:HH:mm:ss&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">LocalDateTime</span> <span class=\"variable\">dateTime</span> <span class=\"operator\">=</span> LocalDateTime.parse(<span class=\"string\">&quot;2017-12-15:19:15:01&quot;</span>,formatter);</span><br><span class=\"line\">        System.out.println(dateTime.toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-ZonedDateTime-有时区\"><a href=\"#5-ZonedDateTime-有时区\" class=\"headerlink\" title=\"5. ZonedDateTime(有时区)\"></a>5. ZonedDateTime(有时区)</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ZonedDateTime_Test</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ZonedDateTime</span> <span class=\"variable\">zonedDateTime</span> <span class=\"operator\">=</span> ZonedDateTime.now();</span><br><span class=\"line\">        <span class=\"type\">DateTimeFormatter</span> <span class=\"variable\">formatter</span> <span class=\"operator\">=</span> DateTimeFormatter.ofPattern(<span class=\"string\">&quot;MM/dd/yyyy:HH:mm:ss&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">date</span> <span class=\"operator\">=</span> zonedDateTime.format(formatter);</span><br><span class=\"line\">        System.out.println(date);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</blockquote>\n","categories":["面试"],"tags":["Java","面试"]},{"title":"浅谈CMS和G1收集器","url":"/2022/09/16/%E6%B5%85%E8%B0%88CMS%E5%92%8CG1%E6%94%B6%E9%9B%86%E5%99%A8/","content":"<h2 id=\"CMS收集器\"><a href=\"#CMS收集器\" class=\"headerlink\" title=\"CMS收集器\"></a>CMS收集器</h2><h3 id=\"1-什么是CMS收集器\"><a href=\"#1-什么是CMS收集器\" class=\"headerlink\" title=\"1.什么是CMS收集器\"></a>1.什么是CMS收集器</h3><blockquote>\n<p>CMS(Concurrent Mark Sweep)收集器是一种以获取最短回收停顿时间为目标的收集器。目前很大一部分的Java应用集中在互联网网站或者B/S系统的服务端上，这类应用尤其重视服务的响应速度，希望系统停顿时间最短，以给用户带来较好的体验。CMS收集器就非常符合这类应用的需求。</p>\n<p>从名字（包含 “Mark Sweep”）上就可以看出，CMS收集器是基于“标记-清除”算法实现的，它的运作过程相对于前面几种收集器来说更复杂一些，整个过程分为4个步骤,包括:</p>\n<ul>\n<li>初始标记(CMS initial mark)</li>\n<li>并发标记(CMS concurrent mark)</li>\n<li>重新标记(CMS remark)</li>\n<li>并发清除(CMS concurrent sweep)</li>\n</ul>\n<p>其中，初始标记、重新标记这两个步骤需要“Stop the World”。初始标记仅仅只是标记一下GC Roots能直接关联到的对象，速度很快，并发标记阶段就是进行GC Roots Tracing的过程，而重新标记阶段则是为了修正并发标记期间因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录，这个阶段的停顿时间一般会比初始标记阶段稍长一些，但远比并发标记的时间短。</p>\n<p>由于整个过程中耗时最长的并发标记和并发清除过程收集器线程都可以与用户线程一起工作，所以，从总体上来说，CMS收集器的内存回收过程是与用户线程一起并发执行的。</p>\n<p>CMS是一款优秀的收集器，它的主要优点在名字上就已经体现出来了: 并发收集、低停顿，Sum公司文档也会称为Concurrent Low Pause Collector(并发低停顿收集器)</p>\n</blockquote>\n<h3 id=\"2-优点\"><a href=\"#2-优点\" class=\"headerlink\" title=\"2.优点\"></a>2.<strong>优点</strong></h3><blockquote>\n<ul>\n<li>并发收集</li>\n<li>低停顿</li>\n</ul>\n</blockquote>\n<h3 id=\"3-CMS收集器缺点\"><a href=\"#3-CMS收集器缺点\" class=\"headerlink\" title=\"3.CMS收集器缺点\"></a>3.CMS收集器<strong>缺点</strong></h3><blockquote>\n<ul>\n<li>CMS收集器对CPU资源非常敏感。</li>\n</ul>\n<blockquote>\n<p>在并发阶段，它虽然不会导致用户线程停顿，但是会因为占用了一部分线程而导致应用程序变慢，总吞吐量会降低。</p>\n</blockquote>\n<ul>\n<li>CMS收集器无法处理浮动垃圾（Floating Garbage)。</li>\n</ul>\n<blockquote>\n<p>可能出现”Concurrent Mode Failure”失败而导致另一次Full GC的产生。由于CMS并发清理阶段用户线程还在运行者，伴随程序运行自然有不断的垃圾不断的产生，这些垃圾只能留在下一次GC才能清理掉。</p>\n</blockquote>\n<ul>\n<li>CMS收集器是基于标记-清除算法，该算法的缺点都有。</li>\n</ul>\n<blockquote>\n<p>收集结束时会有大量空间碎片。</p>\n<p>标记和清除两个过程的效率都不高。</p>\n</blockquote>\n</blockquote>\n<h2 id=\"G1收集器\"><a href=\"#G1收集器\" class=\"headerlink\" title=\"G1收集器\"></a>G1收集器</h2><h3 id=\"1-什么是G1收集器\"><a href=\"#1-什么是G1收集器\" class=\"headerlink\" title=\"1.什么是G1收集器\"></a>1.什么是G1收集器</h3><blockquote>\n<p>G1(Garbage-First)收集器是当今收集器技术发展的最前沿成果之一，早在JDK1.7刚刚确立项目目标，Sum公司给出的JDK1.7 RoadMap里面，它就被视为JDK1.7中HotSpot虚拟机的一个重要进化特征。从JDK 6u14中开始就有Early Access版本的G1收集器共开发人员实验和试用，由此开始G1收集器的“Experimental”状态持续了数年时间，直至JDK7u4，Sum公司才认为它达到足够成熟的商用程度，移除了“Experimental“的标识。</p>\n<p><strong>G1重新定义了堆空间，打破了原有的分代模型，将堆划分为一个个区域。这么做的目的是在进行收集时不必在全堆范围内进行，这是它最显著的特点。区域划分的好处就是带来了停顿时间可预测的收集模型：用户可以指定收集操作在多长时间内完成。即G1提供了接近实时的收集特性。</strong></p>\n</blockquote>\n<h3 id=\"2-优点-1\"><a href=\"#2-优点-1\" class=\"headerlink\" title=\"2.优点\"></a>2.优点</h3><blockquote>\n<ul>\n<li>并发与并行</li>\n</ul>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">G1能充分利用多CPU、多核环境下的硬件优势，使用多个CPU来缩短Stop-the-world停顿的时间，部分其他收集器原来需要停顿Java线程执行的GC操作，G1收集器仍然可以通过并发的方式让Java程序继续运行。</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>分代收集</li>\n<li>空间整合</li>\n</ul>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">与CMS的标记-清除算法不同，G1从整体来看是基于标记-整理算法实现的收集器，从局部（两个Region之间）上来看是基于“复制”算法实现的。但无论如何，这两种算法都意味着G1运作期间不会产生内存空间碎片，收集后能提供规整的可用内存。这种特性有利于程序长时间运行，分配大对象时不会因为无法找到连续内存空间而提前触发下一次GC。</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>可预测的停顿</li>\n</ul>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">这是G1相对于CMS的一个优势，降低停顿时间是G1和CMS共同的关注点。</span><br></pre></td></tr></table></figure>\n\n<p>在G1之前的其他收集器进行收集的范围都是整个新生代或者老年代，而G1不再是这样。在堆的结构设计时，G1打破了以往将收集范围固定在新生代或老年代的模式，G1将堆分成许多相同大小的区域单元，每个单元称为Region。Region是一块地址连续的内存空间，G1模块的组成如下图所示：</p>\n<p><img src=\"/2022/09/16/%E6%B5%85%E8%B0%88CMS%E5%92%8CG1%E6%94%B6%E9%9B%86%E5%99%A8/16ded186e15f5871tplv-t2oaga2asx-zoom-in-crop-mark4536000.webp\" alt=\"G1堆的Region布局.png\"></p>\n<p>G1收集器将整个Java堆划分为多个大小相等的独立区域（Region），虽然还保留有新生代和老年代的概念，但新生代和老年代不再是物理隔离的了，它们都是一部分Region（不需要连续）的集合。Region的大小是一致的，数值是在1M到32M字节之间的一个2的幂值数，JVM会尽量划分2048个左右、同等大小的Region，这一点可以参看如下<a href=\"https://link.juejin.cn/?target=http://hg.openjdk.java.net/jdk/jdk/file/fa2f93f99dbc/src/hotspot/share/gc/g1/heapRegionBounds.hpp\">源码</a>。其实这个数字既可以手动调整，G1也会根据堆大小自动进行调整。</p>\n<p><strong>G1收集器之所以能建立可预测的停顿时间模型，是因为它可以有计划地避免在整个Java堆中进行全区域的垃圾收集</strong>。G1会通过一个合理的计算模型，计算出每个Region的收集成本并量化，这样一来，收集器在给定了“停顿”时间限制的情况下，总是能选择一组恰当的Regions作为收集目标，让其收集开销满足这个限制条件，以此达到实时收集的目的。</p>\n<p>对于打算从CMS或者ParallelOld收集器迁移过来的应用，按照官方的建议，如果发现符合如下特征，可以考虑更换成G1收集器以追求更佳性能：</p>\n<ul>\n<li>实时数据占用了超过半数的堆空间；</li>\n<li>对象分配率或“晋升”的速度变化明显；</li>\n<li>期望消除耗时较长的GC或停顿（超过0.5——1秒）。</li>\n</ul>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">Applications running today with either the CMS or the ParallelOld garbage collector would benefit switching to G1 if the application has one or more of the following traits.</span><br><span class=\"line\"></span><br><span class=\"line\">More than 50% of the Java heap is occupied with live data.</span><br><span class=\"line\">The rate of object allocation rate or promotion varies significantly.</span><br><span class=\"line\">Undesired long garbage collection or compaction pauses (longer than 0.5 to 1 second)</span><br></pre></td></tr></table></figure>\n\n\n</blockquote>\n<h3 id=\"3-运行过程\"><a href=\"#3-运行过程\" class=\"headerlink\" title=\"3.运行过程\"></a>3.运行过程</h3><blockquote>\n<p><strong>G1收集的运作过程大致如下：</strong></p>\n<ul>\n<li><strong>初始标记（Initial Marking）</strong>：仅仅只是标记一下GC Roots能直接关联到的对象，并且修改TAMS（Next Top at Mark Start）的值，让下一阶段用户程序并发运行时，能在正确可用的Region中创建新对象，<strong>这阶段需要<code>停顿线程</code>，但耗时很短</strong>。</li>\n<li><strong>并发标记（Concurrent Marking）</strong>：是从GC Roots开始堆中对象进行可达性分析，找出存活的对象，<strong>这阶段耗时较长</strong>，但可与用户程序并发执行。</li>\n<li><strong>最终标记（Final Marking）</strong>：是为了修正并发标记期间因用户程序继续运作而导致标记产生变动的那一部分标记记录，虚拟机将这段时间对象变化记录在线程Remembered Set Logs里面，最终标记阶段需要把Remembered Set Logs的数据合并到Remembered Set中，<strong>这阶段需要<code>停顿线程</code>，但是可并行执行</strong>。</li>\n<li><strong>筛选回收（Live Data Counting and Evacuation）</strong>：首先对各个Region的回收价值和成本进行排序，根据用户所期望的GC停顿时间来制定回收计划。这个阶段也可以做到与用户程序一起并发执行，但是因为只回收一部分Region，时间是用户可控制的，而且停顿用户线程将大幅提高收集效率。</li>\n</ul>\n<p>全局变量和栈中引用的对象是可以列入根集合的，这样在寻找垃圾时，就可以从根集合出发扫描堆空间。在G1中，引入了一种新的能加入根集合的类型，就是<code>记忆集</code>（Remembered Set）。Remembered Sets（也叫RSets）用来跟踪对象引用。G1的很多开源都是源自Remembered Set，例如，它通常约占Heap大小的20%或更高。并且，我们进行对象复制的时候，因为需要扫描和更改Card Table的信息，这个速度影响了复制的速度，进而影响暂停时间。</p>\n<p><img src=\"/2022/09/16/%E6%B5%85%E8%B0%88CMS%E5%92%8CG1%E6%94%B6%E9%9B%86%E5%99%A8/16ded186e1757662tplv-t2oaga2asx-zoom-in-crop-mark4536000.webp\" alt=\"image.png\"></p>\n</blockquote>\n<h2 id=\"卡表\"><a href=\"#卡表\" class=\"headerlink\" title=\"卡表\"></a>卡表</h2><blockquote>\n<h3 id=\"卡表（Card-Table）\"><a href=\"#卡表（Card-Table）\" class=\"headerlink\" title=\"卡表（Card Table）\"></a>卡表（Card Table）</h3><p>有个场景，老年代的对象可能引用新生代的对象，那标记存活对象的时候，需要扫描老年代中的所有对象。因为该对象拥有对新生代对象的引用，那么这个引用也会被称为GC Roots。那不是得又做全堆扫描？成本太高了吧。</p>\n<p>HotSpot给出的解决方案是一项叫做<code>卡表</code>（Card Table）的技术。该技术将整个堆划分为一个个大小为512字节的卡，并且维护一个卡表，用来存储每张卡的一个标识位。这个标识位代表对应的卡是否可能存有指向新生代对象的引用。如果可能存在，那么我们就认为这张卡是脏的。</p>\n<p>在进行Minor GC的时候，我们便可以不用扫描整个老年代，而是在卡表中寻找脏卡，并将脏卡中的对象加入到Minor GC的GC Roots里。当完成所有脏卡的扫描之后，Java虚拟机便会将所有脏卡的标识位清零。</p>\n<p>想要保证每个可能有指向新生代对象引用的卡都被标记为脏卡，那么Java虚拟机需要截获每个引用型实例变量的写操作，并作出对应的写标识位操作。</p>\n<p><strong>卡表能用于减少老年代的全堆空间扫描，这能很大的提升GC效率</strong>。</p>\n</blockquote>\n<h2 id=\"记忆集\"><a href=\"#记忆集\" class=\"headerlink\" title=\"记忆集\"></a>记忆集</h2><blockquote>\n<p>记忆集是一种用于记录从非收集区域指向收集区域的指针集合的数据结构。</p>\n<p>如果我们不考虑效率和成本问题，我们可以用一个数组存储所有有指针指向新生代的老年代对象。但是如果这样的话我们维护成本就很好，打个比方，假如所有的老年代对象都有指针指向了新生代，那么我们需要维护整个老年代大小的记忆集，毫无疑问这种方法是不可取的。因此我们引入了卡表的数据结构</p>\n</blockquote>\n<h2 id=\"写屏障\"><a href=\"#写屏障\" class=\"headerlink\" title=\"写屏障\"></a>写屏障</h2><blockquote>\n<p>我们每次对引用进行改变时，我们在程序中并没有手动去维护卡表的信息，那么卡表信息的维护到底是如何进行的呢，这就依赖于我们的写屏障功能。</p>\n<p>写屏障可以理解为对于我们引用类型字段复制的AOP操作。在赋前的部分的写屏障叫作写前屏障（Pre-Write Barrier），在赋值后的部分的写屏障叫作写后屏障（PostWrite Barrier）。</p>\n</blockquote>\n<h2 id=\"伪共享问题\"><a href=\"#伪共享问题\" class=\"headerlink\" title=\"伪共享问题\"></a>伪共享问题</h2><blockquote>\n<p>由于CPU集成的多级缓存中是以缓存行来读取数据的，通过MESI协议保证多个CPU之间的缓存一致性。<br>伪共享问题是卡表元素更改时处于同一缓存行导致的，诱发的因素是不同卡页内的对象发生了跨代引用，从而使CPU并行执行变为串行执行，降低了并发性能。</p>\n<p>举例： 若a、b位于同一缓存行，当CPU1修改a后，若CPU2想修改b，必须先提交CPU1的缓存，然后CPU2再去主存中读取数据。</p>\n<p>伪共享问题解决方案：JAVA中的解决方案有填充法 和 Contended 注解。</p>\n<p>填充法：就是 扩大对象的大小，这样，就可以一个缓冲行中，<strong>只存在一个对象</strong>！这样，就不会导致结果是串行执行了！(JDK8之前)<br>Contended 注解法：Java1.8 中提供了Contended注解，使用这个注解，VM必须设置 -XX:-RestrictContended。<br>ConcurrentHashMap的内部类CounterCell有用到这个注解</p>\n</blockquote>\n","categories":["面试"],"tags":["Java","面试"]},{"title":"浅谈MySQL慢查询","url":"/2022/09/11/%E6%B5%85%E8%B0%88Mysql%E6%85%A2%E6%9F%A5%E8%AF%A2/","content":"<h3 id=\"慢查询是什么\"><a href=\"#慢查询是什么\" class=\"headerlink\" title=\"慢查询是什么\"></a>慢查询是什么</h3><blockquote>\n<p>MySQL的慢查询，全名是<strong>慢查询日志</strong>，是MySQL提供的一种日志记录，用来记录在MySQL中响应时间超过阀值的语句。</p>\n<p>具体环境中，运行时间超过long_query_time值的SQL语句，则会被记录到慢查询日志中。</p>\n<p>long_query_time的默认值为10，意思是记录运行10秒以上的语句。</p>\n<p>默认情况下，MySQL数据库并不启动慢查询日志，需要手动来设置这个参数。</p>\n<p>当然，如果不是调优需要的话，一般不建议启动该参数，因为开启慢查询日志会或多或少带来一定的性能影响。</p>\n<p>慢查询日志支持将日志记录写入文件和数据库表。</p>\n</blockquote>\n<h3 id=\"慢查询配置\"><a href=\"#慢查询配置\" class=\"headerlink\" title=\"慢查询配置\"></a>慢查询配置</h3><blockquote>\n<p><strong>mysql并不启动慢查询日志</strong>，需要我们手动开启</p>\n<ul>\n<li>1、输入命令开启慢查询（临时），在MySQL服务重启后会自动关闭；</li>\n<li>2、配置my.cnf（windows是my.ini）系统文件开启，修改配置文件是持久化开启慢查询的方式</li>\n</ul>\n</blockquote>\n<blockquote>\n<h3 id=\"命令开启\"><a href=\"#命令开启\" class=\"headerlink\" title=\"命令开启\"></a>命令开启</h3><p>查询慢查询是否开启</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> variables <span class=\"keyword\">like</span> <span class=\"string\">&#x27;%slow_query_log%&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>开启慢查询命令</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"keyword\">global</span> slow_query_log<span class=\"operator\">=</span><span class=\"string\">&#x27;ON&#x27;</span>; </span><br></pre></td></tr></table></figure>\n\n<p>指定记录慢查询日志SQL执行时间得阈值（long_query_time 单位：秒，默认10秒）</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"keyword\">global</span> long_query_time<span class=\"operator\">=</span><span class=\"number\">1</span>; </span><br></pre></td></tr></table></figure>\n\n<p>查询 “慢查询日志文件存放位置”</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> variables <span class=\"keyword\">like</span> <span class=\"string\">&#x27;%slow_query_log_file%&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"配置文件开启\"><a href=\"#配置文件开启\" class=\"headerlink\" title=\"配置文件开启\"></a>配置文件开启</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">开启慢查询功能</span></span><br><span class=\"line\">slow_query_log=ON</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">指定记录慢查询日志SQL执行时间得阈值</span></span><br><span class=\"line\">long_query_time=1</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">选填，默认数据文件路径</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">slow_query_log_file=/var/lib/mysql/localhost-slow.log</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n<h2 id=\"慢查询经验\"><a href=\"#慢查询经验\" class=\"headerlink\" title=\"慢查询经验\"></a>慢查询经验</h2><h3 id=\"LIMIT分页\"><a href=\"#LIMIT分页\" class=\"headerlink\" title=\"LIMIT分页\"></a>LIMIT分页</h3><blockquote>\n<h3 id=\"优化LIMIT分页\"><a href=\"#优化LIMIT分页\" class=\"headerlink\" title=\"优化LIMIT分页\"></a>优化LIMIT分页</h3><p>  在系统中需要分页的操作通常会使用limit加上偏移量的方法实现，同时加上合适的order by 子句。如果有对应的索引，通常效率会不错，否则MySQL需要做大量的文件排序操作。</p>\n<p>  一个非常令人头疼问题就是当偏移量非常大的时候，例如可能是limit 1000000,10这样的查询，这是mysql需要查询1000000条然后只返回最后10条，前面的1000000条记录都将被舍弃，这样的代价很高，会造成慢查询。</p>\n<p>  优化此类查询的一个最简单的方法是尽可能的使用索引覆盖扫描，而不是查询所有的列。然后根据需要做一次关联操作再返回所需的列。对于偏移量很大的时候这样做的效率会得到很大提升。</p>\n<p>对于下面的查询：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 执行耗时：1.379s</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> vio_basic_domain_info LIMIT <span class=\"number\">1000000</span>,<span class=\"number\">10</span>;</span><br></pre></td></tr></table></figure>\n\n<p> 该语句存在的最大问题在于limit M,N中偏移量M太大，导致每次查询都要先从整个表中找到满足条件 的前M条记录，之后舍弃这M条记录并从第M+1条记录开始再依次找到N条满足条件的记录。如果表非常大，且筛选字段没有合适的索引，且M特别大那么这样的代价是非常高的。</p>\n<p>  那么如果我们下一次的查询能从前一次查询结束后标记的位置开始查找，找到满足条件的10条记录，并记下下一次查询应该开始的位置，以便于下一次查询能直接从该位置 开始，这样就不必每次查询都先从整个表中先找到满足条件的前M条记录，舍弃掉，再从M+1开始再找到10条满足条件的记录了。</p>\n<h3 id=\"思路一：构造覆盖索引\"><a href=\"#思路一：构造覆盖索引\" class=\"headerlink\" title=\"思路一：构造覆盖索引\"></a>思路一：构造覆盖索引</h3><p>  通过修改SQL，使用上覆盖索引，比如我需要只查询表中的app_name、createTime等少量字段，那么我秩序在app_name、createTime字段设置联合索引，即可实现覆盖索引，无需全表扫描。适用于查询列较少的场景，查询列数过多的不推荐。</p>\n<p>耗时：<code>0.390s</code></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> app_name,createTime <span class=\"keyword\">from</span> vio_basic_domain_info LIMIT <span class=\"number\">1000000</span>,<span class=\"number\">10</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"思路二：优化offset\"><a href=\"#思路二：优化offset\" class=\"headerlink\" title=\"思路二：优化offset\"></a>思路二：优化offset</h3><p>  无法用上覆盖索引，那么重点是想办法快速过滤掉前100w条数据。我们可以利用自增主键有序的条件，先查询出第1000001条数据的id值，再往后查10行；适用于主键id自增的场景。<br>耗时：<code>0.471s</code></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> vio_basic_domain_info <span class=\"keyword\">where</span> </span><br><span class=\"line\">  id <span class=\"operator\">&gt;=</span>(<span class=\"keyword\">SELECT</span> id <span class=\"keyword\">from</span> vio_basic_domain_info <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> id limit <span class=\"number\">1000000</span>,<span class=\"number\">1</span>) limit <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"方法三：“延迟关联”\"><a href=\"#方法三：“延迟关联”\" class=\"headerlink\" title=\"方法三：“延迟关联”\"></a>方法三：“延迟关联”</h3><p>耗时：<code>0.439s</code><br>延迟关联适用于数量级较大的表，SQL如下；</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> vio_basic_domain_info <span class=\"keyword\">inner</span> <span class=\"keyword\">join</span> (<span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> vio_basic_domain_info <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> id limit <span class=\"number\">1000000</span>,<span class=\"number\">10</span>) <span class=\"keyword\">as</span> myNew <span class=\"keyword\">using</span>(id);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>这里我们利用到了<code>覆盖索引+延迟关联查询</code>，相当于先只查询id列，利用覆盖索引快速查到该页的10条数据id，然后再把返回的10条id拿到表中通过主键索引二次查询。（表数据增速快的情况对该方法影响较小。）</p>\n</blockquote>\n<h3 id=\"索引没起作用\"><a href=\"#索引没起作用\" class=\"headerlink\" title=\"索引没起作用\"></a>索引没起作用</h3><blockquote>\n<h3 id=\"1-模糊查询尽量避免用通配符’-’开头，会导致数据库引擎放弃索引进行全表扫描。如下：\"><a href=\"#1-模糊查询尽量避免用通配符’-’开头，会导致数据库引擎放弃索引进行全表扫描。如下：\" class=\"headerlink\" title=\"1.模糊查询尽量避免用通配符’%’开头，会导致数据库引擎放弃索引进行全表扫描。如下：\"></a>1.模糊查询尽量避免用通配符’%’开头，会导致数据库引擎放弃索引进行全表扫描。如下：</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> t <span class=\"keyword\">WHERE</span> username <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;%MIKE%&#x27;</span> #不推荐</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> t <span class=\"keyword\">WHERE</span> username <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;MIKE%&#x27;</span> #推荐</span><br></pre></td></tr></table></figure>\n\n<p>如果需求是要在前面使用模糊查询，</p>\n<p>使用MySQL内置函数INSTR(str,substr) 来匹配，作用类似于java中的indexOf()，查询字符串出现的角标位置。<br>使用FullText全文索引，用match against 检索<br>数据量较大的情况，建议引用ElasticSearch、solr，亿级数据量检索速度秒级<br>当表数据量较少（几千条儿那种），别整花里胡哨的，直接用like ‘%xx%’。<br>  但不得不说，MySQL模糊匹配大字段是硬伤，毕竟保证事务的ACID特性耗费了太多性能，因此，如果实际场景中有类似业务需求，建议果断更换大数据存储引擎如<strong>ElasticSearch</strong>、<strong>Hbase</strong>等。</p>\n<h3 id=\"2-尽量避免使用-not-in，会导致引擎走全表扫描。建议用-not-exists-代替，如下：\"><a href=\"#2-尽量避免使用-not-in，会导致引擎走全表扫描。建议用-not-exists-代替，如下：\" class=\"headerlink\" title=\"2.尽量避免使用 not in，会导致引擎走全表扫描。建议用 not exists 代替，如下：\"></a>2.尽量避免使用 not in，会导致引擎走全表扫描。建议用 not exists 代替，如下：</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 不走索引</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> t <span class=\"keyword\">WHERE</span> name <span class=\"keyword\">not</span> <span class=\"keyword\">IN</span> (<span class=\"string\">&#x27;提莫&#x27;</span>,<span class=\"string\">&#x27;队长&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 走索引</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> t <span class=\"keyword\">as</span> t1 <span class=\"keyword\">where</span> <span class=\"keyword\">not</span> <span class=\"keyword\">exists</span> (<span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> t <span class=\"keyword\">as</span> t2 <span class=\"keyword\">where</span> name <span class=\"keyword\">IN</span> (<span class=\"string\">&#x27;提莫&#x27;</span>,<span class=\"string\">&#x27;队长&#x27;</span>) <span class=\"keyword\">and</span> t1.id <span class=\"operator\">=</span> t2.id);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-尽量避免使用-or，会导致数据库引擎放弃索引进行全表扫描。如下：\"><a href=\"#3-尽量避免使用-or，会导致数据库引擎放弃索引进行全表扫描。如下：\" class=\"headerlink\" title=\"3.尽量避免使用 or，会导致数据库引擎放弃索引进行全表扫描。如下：\"></a>3.尽量避免使用 or，会导致数据库引擎放弃索引进行全表扫描。如下：</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> t <span class=\"keyword\">WHERE</span> id <span class=\"operator\">=</span> <span class=\"number\">1</span> <span class=\"keyword\">OR</span> id <span class=\"operator\">=</span> <span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">优化方式：可以用<span class=\"keyword\">union</span>代替<span class=\"keyword\">or</span>。如下：</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> t <span class=\"keyword\">WHERE</span> id <span class=\"operator\">=</span> <span class=\"number\">1</span></span><br><span class=\"line\">   <span class=\"keyword\">UNION</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> t <span class=\"keyword\">WHERE</span> id <span class=\"operator\">=</span> <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-尽量避免进行null值的判断，会导致数据库引擎放弃索引进行全表扫描。如下：\"><a href=\"#4-尽量避免进行null值的判断，会导致数据库引擎放弃索引进行全表扫描。如下：\" class=\"headerlink\" title=\"4.尽量避免进行null值的判断，会导致数据库引擎放弃索引进行全表扫描。如下：\"></a>4.尽量避免进行null值的判断，会导致数据库引擎放弃索引进行全表扫描。如下：</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> t <span class=\"keyword\">WHERE</span> score <span class=\"keyword\">IS</span> <span class=\"keyword\">NULL</span></span><br><span class=\"line\"></span><br><span class=\"line\">优化方式：可以给字段添加默认值<span class=\"number\">0</span>，对<span class=\"number\">0</span>值进行判断。如下：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> t <span class=\"keyword\">WHERE</span> score <span class=\"operator\">=</span> <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-尽量避免在where条件中等号的左侧进行表达式、函数操作，会导致数据库引擎放弃索引进行全表扫描。可以将表达式、函数操作移动到等号右侧。如下：\"><a href=\"#5-尽量避免在where条件中等号的左侧进行表达式、函数操作，会导致数据库引擎放弃索引进行全表扫描。可以将表达式、函数操作移动到等号右侧。如下：\" class=\"headerlink\" title=\"5.尽量避免在where条件中等号的左侧进行表达式、函数操作，会导致数据库引擎放弃索引进行全表扫描。可以将表达式、函数操作移动到等号右侧。如下：\"></a>5.尽量避免在where条件中等号的左侧进行表达式、函数操作，会导致数据库引擎放弃索引进行全表扫描。可以将表达式、函数操作移动到等号右侧。如下：</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 全表扫描</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> T <span class=\"keyword\">WHERE</span> score<span class=\"operator\">/</span><span class=\"number\">10</span> <span class=\"operator\">=</span> <span class=\"number\">9</span></span><br><span class=\"line\"><span class=\"comment\">-- 走索引</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> T <span class=\"keyword\">WHERE</span> score <span class=\"operator\">=</span> <span class=\"number\">10</span><span class=\"operator\">*</span><span class=\"number\">9</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-当数据量大时，避免使用where-1-1的条件。通常为了方便拼装查询条件，我们会默认使用该条件，数据库引擎会放弃索引进行全表扫描。如下：\"><a href=\"#6-当数据量大时，避免使用where-1-1的条件。通常为了方便拼装查询条件，我们会默认使用该条件，数据库引擎会放弃索引进行全表扫描。如下：\" class=\"headerlink\" title=\"6.当数据量大时，避免使用where 1=1的条件。通常为了方便拼装查询条件，我们会默认使用该条件，数据库引擎会放弃索引进行全表扫描。如下：\"></a>6.当数据量大时，避免使用where 1=1的条件。通常为了方便拼装查询条件，我们会默认使用该条件，数据库引擎会放弃索引进行全表扫描。如下：</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> username, age, sex <span class=\"keyword\">FROM</span> T <span class=\"keyword\">WHERE</span> <span class=\"number\">1</span><span class=\"operator\">=</span><span class=\"number\">1</span></span><br><span class=\"line\">优化方式：用代码拼装<span class=\"keyword\">sql</span>时进行判断，没 <span class=\"keyword\">where</span> 条件就去掉 <span class=\"keyword\">where</span>，有<span class=\"keyword\">where</span>条件就加 <span class=\"keyword\">and</span>。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-查询条件不要用-lt-gt-或者\"><a href=\"#7-查询条件不要用-lt-gt-或者\" class=\"headerlink\" title=\"7.查询条件不要用 &lt;&gt; 或者 !=\"></a>7.查询条件不要用 &lt;&gt; 或者 !=</h3><p>使用索引列作为条件进行查询时，需要避免使用&lt;&gt;或者!=等判断条件。如确实业务需要，使用到不等于符号，需要在重新评估索引建立，避免在此字段上建立索引，改由查询条件中其他索引字段代替。</p>\n<h3 id=\"8-where条件仅包含复合索引非前导列\"><a href=\"#8-where条件仅包含复合索引非前导列\" class=\"headerlink\" title=\"8.where条件仅包含复合索引非前导列\"></a>8.where条件仅包含复合索引非前导列</h3><p>如：复合（联合）索引包含key_part1，key_part2，key_part3三列，但SQL语句没有包含索引前置列”key_part1”，按照MySQL联合索引的最左匹配原则，不会走联合索引。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 不走索引</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> col1 <span class=\"keyword\">from</span> <span class=\"keyword\">table</span> <span class=\"keyword\">where</span> key_part2<span class=\"operator\">=</span><span class=\"number\">1</span> <span class=\"keyword\">and</span> key_part3<span class=\"operator\">=</span><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"comment\">-- 走索引</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> col1 <span class=\"keyword\">from</span> <span class=\"keyword\">table</span> <span class=\"keyword\">where</span> key_part1 <span class=\"operator\">=</span><span class=\"number\">1</span> <span class=\"keyword\">and</span> key_part2<span class=\"operator\">=</span><span class=\"number\">1</span> <span class=\"keyword\">and</span> key_part3<span class=\"operator\">=</span><span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9-隐式类型转换造成不使用索引\"><a href=\"#9-隐式类型转换造成不使用索引\" class=\"headerlink\" title=\"9.隐式类型转换造成不使用索引\"></a>9.隐式类型转换造成不使用索引</h3><p>如下SQL语句由于索引对列类型为varchar，但给定的值为数值，涉及隐式类型转换，造成不能正确走索引。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> col1 <span class=\"keyword\">from</span> <span class=\"keyword\">table</span> <span class=\"keyword\">where</span> col_varchar<span class=\"operator\">=</span><span class=\"number\">123</span>; </span><br></pre></td></tr></table></figure>\n</blockquote>\n<h2 id=\"面试题\"><a href=\"#面试题\" class=\"headerlink\" title=\"面试题\"></a>面试题</h2><p>你对MySQL的慢查询优化有了解吗 </p>\n<blockquote>\n<p><strong>标准回答</strong></p>\n<p>​    慢查询优化的前提是定位到响应慢的SQL，这可以通过启用慢查询日志来实现。默认情况下，MySQL并不启用慢查询日志，我们需要手动开启这个参数。通过日志定位到慢查询的SQL之后，我们可以使用EXPLAIN语句来分析这个SQL，进而发现问题所在。导致慢查询的原因有很多，下面列举几种常见的原因，以及对应的解决方案：</p>\n<ol>\n<li><p>向数据库请求了多余的数据：</p>\n<p>很多时候，我们的SQL返回的结果会超出我们的需要，例如实际上它返回了更多的行，而我们只要其中的一部分。又或者我们要求返回所有的列，实际上却只有其中少数的列。对于这类问题，我们可以通过LIMIT控制返回的行数，尽量不用<code>SELECT *</code>避免查询到过多的列。</p>\n</li>\n<li><p>SQL复杂导致无法利用缓存：</p>\n<p>处于业务的需要，我们经常会写出比较复杂的SQL，这自然包括复杂的关联查询。由于复杂SQL返回的结果涉及多张表、多个条件、甚至各种函数，这样的SQL每次返回的结果势必不同，所以很难利用到数据库的缓存。如果我们将复杂SQL进行拆分，变成若干简单的SQL，那么其中有些SQL由于条件不变，就可以利用到数据库的缓存了，从而让查询效率得以提升。</p>\n</li>\n<li><p>没有选择正确的索引：</p>\n<p>我们都知道，创建索引是提高查询效率的一个常用手段，事实上我们也经常会这样做。但是，很多时候我们创建了索引，通过EXPLAIN查看会发现并没有走这个索引，最终导致SQL执行变慢。所以，不是把索引创建出来就算完成任务，还要分析索引的选择性，根据业务条件不断的优化索引，从而增加索引的命中率。</p>\n<p><strong>加分回答</strong></p>\n<p>​    除上述优化的方向之外，SQL中还有很多地方都有优化的空间，例如COUNT()、关联查询、子查询、GROUP BY、LIMIT、UNION等。总体来说，不同的情况要区别对待，但所有优化的背后是基于慢查询日志的定位。另外，为了能够发现问题的本质，还需要对MySQL执行查询的过程有所了解：</p>\n<ol>\n<li>客户端发送一条查询SQL给服务器。 </li>\n<li>服务器先检查查询缓存，如果命中了缓存，则立刻返回存储在缓存中的结果。 </li>\n<li>服务器进行SQL解析和预处理，再由优化器生成对应的执行计划。 </li>\n<li>服务器根据优化器生成的执行计划，调用存储引擎的API来执行查询。 </li>\n<li>将结果返回给客户端。 </li>\n</ol>\n<h4 id=\"延伸阅读\"><a href=\"#延伸阅读\" class=\"headerlink\" title=\"延伸阅读\"></a>延伸阅读</h4><p>​    B+树索引是基于B+树构建出来的有序结构，只有利用上它的有序性才能提高查询的效率。若不满足有序性这个前提，则在这个索引中的查询是离散的，其效率反而更低。查询优化器对索引的选择性，被称为最左前缀原则。</p>\n<p>​    假设有如下一张表：</p>\n<p><a href=\"#\">复制代码</a></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> t (</span><br><span class=\"line\">  a <span class=\"type\">VARCHAR</span>(<span class=\"number\">100</span>),</span><br><span class=\"line\">  b <span class=\"type\">VARCHAR</span>(<span class=\"number\">100</span>),</span><br><span class=\"line\">  c <span class=\"type\">VARCHAR</span>(<span class=\"number\">100</span>),</span><br><span class=\"line\">  KEY idx_union(a,b,c)</span><br><span class=\"line\">) ENGINE<span class=\"operator\">=</span>INNODB;</span><br></pre></td></tr></table></figure>\n\n<p>​    假设idx_union的叶子节点数据如下：</p>\n<p><a href=\"#\">复制代码</a></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">(<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>), (<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">3</span>), (<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">9</span>), (<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">9</span>), (<span class=\"number\">1</span>,<span class=\"number\">7</span>,<span class=\"number\">4</span>), (<span class=\"number\">1</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>), (<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">5</span>), (<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">7</span>), (<span class=\"number\">2</span>,<span class=\"number\">5</span>,<span class=\"number\">1</span>), (<span class=\"number\">2</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>)</span><br></pre></td></tr></table></figure>\n\n<p>​    该索引的选择性示例如下：</p>\n<p><a href=\"#\">复制代码</a></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 匹配左前缀</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> T <span class=\"keyword\">where</span> a<span class=\"operator\">=</span><span class=\"string\">&#x27;&#x27;</span>;    <span class=\"comment\">-- Y</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> T <span class=\"keyword\">where</span> b<span class=\"operator\">=</span><span class=\"string\">&#x27;&#x27;</span>;    <span class=\"comment\">-- N</span></span><br><span class=\"line\"><span class=\"comment\">-- 匹配列前缀</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> T <span class=\"keyword\">where</span> a <span class=\"keyword\">like</span> <span class=\"string\">&#x27;x%&#x27;</span>;    <span class=\"comment\">-- Y</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> T <span class=\"keyword\">where</span> a <span class=\"keyword\">like</span> <span class=\"string\">&#x27;%x&#x27;</span>;    <span class=\"comment\">-- N</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> T <span class=\"keyword\">where</span> b <span class=\"keyword\">like</span> <span class=\"string\">&#x27;x%&#x27;</span>;    <span class=\"comment\">-- N</span></span><br><span class=\"line\"><span class=\"comment\">-- 全值匹配</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> T <span class=\"keyword\">where</span> a<span class=\"operator\">=</span><span class=\"string\">&#x27;&#x27;</span> <span class=\"keyword\">and</span> b<span class=\"operator\">=</span><span class=\"string\">&#x27;&#x27;</span> <span class=\"keyword\">and</span> c<span class=\"operator\">=</span><span class=\"string\">&#x27;&#x27;</span>;    <span class=\"comment\">-- Y</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> T <span class=\"keyword\">where</span> c<span class=\"operator\">=</span><span class=\"string\">&#x27;&#x27;</span> <span class=\"keyword\">and</span> b<span class=\"operator\">=</span><span class=\"string\">&#x27;&#x27;</span> <span class=\"keyword\">and</span> a<span class=\"operator\">=</span><span class=\"string\">&#x27;&#x27;</span>;    <span class=\"comment\">-- Y</span></span><br><span class=\"line\"><span class=\"comment\">-- 匹配范围值</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> T <span class=\"keyword\">where</span> a <span class=\"keyword\">between</span> <span class=\"string\">&#x27;&#x27;</span> <span class=\"keyword\">and</span> <span class=\"string\">&#x27;&#x27;</span>;    <span class=\"comment\">-- Y</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> T <span class=\"keyword\">where</span> b <span class=\"keyword\">between</span> <span class=\"string\">&#x27;&#x27;</span> <span class=\"keyword\">and</span> <span class=\"string\">&#x27;&#x27;</span>;    <span class=\"comment\">-- N</span></span><br><span class=\"line\"><span class=\"comment\">-- 全值匹配 + 范围匹配</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> T <span class=\"keyword\">where</span> a<span class=\"operator\">=</span><span class=\"string\">&#x27;&#x27;</span> <span class=\"keyword\">and</span> b <span class=\"keyword\">between</span> <span class=\"string\">&#x27;&#x27;</span> <span class=\"keyword\">and</span> <span class=\"string\">&#x27;&#x27;</span>;    <span class=\"comment\">-- Y</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> T <span class=\"keyword\">where</span> b<span class=\"operator\">=</span><span class=\"string\">&#x27;&#x27;</span> <span class=\"keyword\">and</span> c <span class=\"keyword\">between</span> <span class=\"string\">&#x27;&#x27;</span> <span class=\"keyword\">and</span> <span class=\"string\">&#x27;&#x27;</span>;    <span class=\"comment\">-- N</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> T <span class=\"keyword\">where</span> a <span class=\"keyword\">between</span> <span class=\"string\">&#x27;&#x27;</span> <span class=\"keyword\">and</span> <span class=\"string\">&#x27;&#x27;</span> <span class=\"keyword\">and</span> b<span class=\"operator\">=</span><span class=\"string\">&#x27;&#x27;</span>;    <span class=\"comment\">-- N</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n</blockquote>\n","categories":["面试"],"tags":["面试","SQL"]},{"title":"浅谈Stream流","url":"/2022/09/14/%E6%B5%85%E8%B0%88Stream%E6%B5%81/","content":"<h2 id=\"什么是Stream流\"><a href=\"#什么是Stream流\" class=\"headerlink\" title=\"什么是Stream流\"></a>什么是Stream流</h2><blockquote>\n<p><code>Stream</code>被翻译为流，它的工作过程像将一瓶水导入有很多过滤阀的管道一样，水每经过一个过滤阀，便被操作一次，比如过滤，转换等，最后管道的另外一头有一个容器负责接收剩下的水。</p>\n<p><code>Stream</code>作为Java 8的一大亮点，它专门针对集合的各种操作提供各种非常便利，简单，高效的API,<code>Stream API</code>主要是通过<code>Lambda</code>表达式完成，极大的提高了程序的效率和可读性，同时<code>Stram API</code>中自带的并行流使得并发处理集合的门槛再次降低，使用<code>Stream API</code>编程无需多写一行多线程的大门就可以非常方便的写出高性能的并发程序。使用<code>Stream API</code>能够使你的代码更加优雅。</p>\n<p>流的另一特点是可无限性，使用<code>Stream</code>，你的数据源可以是无限大的。</p>\n</blockquote>\n<h2 id=\"如何使用流\"><a href=\"#如何使用流\" class=\"headerlink\" title=\"如何使用流\"></a>如何使用流</h2><blockquote>\n<ul>\n<li>获取流</li>\n<li>对流操作</li>\n<li>结束对流操作</li>\n</ul>\n</blockquote>\n<h3 id=\"获取流\"><a href=\"#获取流\" class=\"headerlink\" title=\"-  获取流\"></a>-  获取流</h3><blockquote>\n<p>获取流的方式有多种，对于常见的容器(<code>Collection</code>)可以直接<code>.stream()</code>获取 例如：</p>\n<ul>\n<li><code>Collection.stream()</code></li>\n<li><code>Collection.parallelStream()</code></li>\n<li><code>Arrays.stream(T array) or Stream.of()</code></li>\n</ul>\n<p>对于<code>IO</code>，我们也可以通过<code>lines()</code>方法获取流：</p>\n<ul>\n<li><code>java.nio.file.Files.walk()</code></li>\n<li><code>java.io.BufferedReader.lines()</code></li>\n</ul>\n<p>最后，我们还可以从无限大的数据源中产生流：</p>\n<ul>\n<li><code>Random.ints()</code></li>\n</ul>\n<p>值得注意的是，<code>JDK</code>中针对基本数据类型的昂贵的装箱和拆箱操作，提供了基本数据类型的流：</p>\n<ul>\n<li><p><code>IntStream</code></p>\n</li>\n<li><p><code>LongStream</code></p>\n</li>\n<li><p><code>DoubleStream</code></p>\n<p>这三种基本数据类型和普通流差不多，不过他们流里面的数据都是指定的基本数据类型。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Intstream.of(new int[]&#123;1,2,3&#125;);</span><br><span class=\"line\">Intstream.range(1,3);</span><br></pre></td></tr></table></figure></li>\n</ul>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">这边有个parallelStream和stream的区别</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">因为parallelstream是并行流,所以执行效率比较高</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">并行流并不会按照原本的顺序轨迹执行, 而是 随机执行</span></span><br><span class=\"line\">可以从以下三点入手考虑是否使用parallelstream</span><br><span class=\"line\">是否需要并行？  </span><br><span class=\"line\">任务之间是否是独立的？是否会引起任何竞态条件？  </span><br><span class=\"line\">结果是否取决于任务的调用顺序？</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>获取流的方式有多种，对于常见的容器(<code>Collection</code>)可以直接<code>.stream()</code>获取 例如：</p>\n<ul>\n<li><code>Collection.stream()</code></li>\n<li><code>Collection.parallelStream()</code></li>\n<li><code>Arrays.stream(T array) or Stream.of()</code></li>\n</ul>\n<p>对于<code>IO</code>，我们也可以通过<code>lines()</code>方法获取流：</p>\n<ul>\n<li><code>java.nio.file.Files.walk()</code></li>\n<li><code>java.io.BufferedReader.lines()</code></li>\n</ul>\n<p>最后，我们还可以从无限大的数据源中产生流：</p>\n<ul>\n<li><code>Random.ints()</code></li>\n</ul>\n<p>值得注意的是，<code>JDK</code>中针对基本数据类型的昂贵的装箱和拆箱操作，提供了基本数据类型的流：</p>\n<ul>\n<li><p><code>IntStream</code></p>\n</li>\n<li><p><code>LongStream</code></p>\n</li>\n<li><p><code>DoubleStream</code></p>\n<p>这三种基本数据类型和普通流差不多，不过他们流里面的数据都是指定的基本数据类型。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Intstream.of(new int[]&#123;1,2,3&#125;);</span><br><span class=\"line\">Intstream.rang(1,3);</span><br></pre></td></tr></table></figure></li>\n</ul>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">这边有个parallelStream和stream的区别</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">因为parallelstream是并行流,所以执行效率比较高</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">并行流并不会按照原本的顺序轨迹执行, 而是 随机执行</span></span><br><span class=\"line\">可以从以下三点入手考虑是否使用parallelstream</span><br><span class=\"line\">是否需要并行？  </span><br><span class=\"line\">任务之间是否是独立的？是否会引起任何竞态条件？  </span><br><span class=\"line\">结果是否取决于任务的调用顺序？</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"对流操作\"><a href=\"#对流操作\" class=\"headerlink\" title=\"- 对流操作\"></a>- 对流操作</h3><blockquote>\n<p>对于中间操作，所有的<code>API</code>的返回值基本都是<code>Stream&lt;T&gt;</code>,因此以后看见一个陌生的<code>API</code>也能通过返回值判断它的所属类型。</p>\n<h6 id=\"map-flatMap\"><a href=\"#map-flatMap\" class=\"headerlink\" title=\"map/flatMap\"></a><strong>map/flatMap</strong></h6><p><code>map</code>顾名思义，就是映射，<code>map</code>操作能够将流中的每一个元素映射为另外的元素。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;R&gt; Stream&lt;R&gt; <span class=\"title function_\">map</span><span class=\"params\">(Function&lt;? <span class=\"built_in\">super</span> T, ? extends R&gt; mapper)</span>;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到<code>map</code>接受的是一个<code>Function</code>,也就是接收参数，并返回一个值。</p>\n<p>比如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//提取 List&lt;Student&gt;  所有student 的名字 </span></span><br><span class=\"line\">List&lt;String&gt; studentNames = students.stream().map(Student::getName)</span><br><span class=\"line\">                                             .collect(Collectors.toList());</span><br></pre></td></tr></table></figure>\n\n<p>上面的代码等同于以前的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; studentNames=<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\"><span class=\"keyword\">for</span>(Student student:students)&#123;</span><br><span class=\"line\">    studentNames.add(student.getName());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>再比如：将List中所有字母转换为大写：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; words=Arrays.asList(<span class=\"string\">&quot;a&quot;</span>,<span class=\"string\">&quot;b&quot;</span>,<span class=\"string\">&quot;c&quot;</span>);</span><br><span class=\"line\">List&lt;String&gt; upperWords=words.stream().map(String::toUpperCase)</span><br><span class=\"line\">                                      .collect(Collectors.toList());</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p><code>flatMap</code>顾名思义就是扁平化映射，它具体的操作是将多个<code>stream</code>连接成一个<code>stream</code>，这个操作是针对类似多维数组的，比如容器里面包含容器等。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">List&lt;List&lt;Integer&gt;&gt; ints=<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(Arrays.asList(Arrays.asList(<span class=\"number\">1</span>,<span class=\"number\">2</span>),</span><br><span class=\"line\">                                          Arrays.asList(<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>)));</span><br><span class=\"line\">List&lt;Integer&gt; flatInts=ints.stream().flatMap(Collection::stream).</span><br><span class=\"line\">                                       collect(Collectors.toList());</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，相当于降维。</p>\n<hr>\n<h6 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter\"></a><strong>filter</strong></h6><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">filter`顾名思义，就是过滤，通过测试的元素会被留下来并生成一个新的`Stream</span><br><span class=\"line\">Stream&lt;T&gt; <span class=\"title function_\">filter</span><span class=\"params\">(Predicate&lt;? <span class=\"built_in\">super</span> T&gt; predicate)</span>;</span><br></pre></td></tr></table></figure>\n\n<p>同理，我们可以<code>filter</code>接收的参数是<code>Predicate</code>，也就是推断型函数式接口，接收参数，并返回<code>boolean</code>值。</p>\n<p>比如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取所有大于18岁的学生</span></span><br><span class=\"line\">List&lt;Student&gt; studentNames = students.stream().filter(s-&gt;s.getAge()&gt;<span class=\"number\">18</span>)</span><br><span class=\"line\">                                              .collect(Collectors.toList());</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h6 id=\"distinct\"><a href=\"#distinct\" class=\"headerlink\" title=\"distinct\"></a><strong>distinct</strong></h6><p><code>distinct</code>是去重操作,它没有参数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Stream&lt;T&gt; <span class=\"title function_\">distinct</span><span class=\"params\">()</span>;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h6 id=\"sorted\"><a href=\"#sorted\" class=\"headerlink\" title=\"sorted\"></a><strong>sorted</strong></h6><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">sorted`排序操作，默认是从小到大排列，sorted方法包含一个重载，使用sorted方法，如果没有传递参数，那么流中的元素就需要实现Comparable&lt;T&gt;方法，也可以在使sorted方法的时候传入一个`Comparator&lt;T&gt;</span><br><span class=\"line\">Stream&lt;T&gt; <span class=\"title function_\">sorted</span><span class=\"params\">(Comparator&lt;? <span class=\"built_in\">super</span> T&gt; comparator)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">Stream&lt;T&gt; <span class=\"title function_\">sorted</span><span class=\"params\">()</span>;</span><br></pre></td></tr></table></figure>\n\n<p>值得一说的是这个<code>Comparator</code>在<code>Java 8</code>之后被打上了<code>@FunctionalInterface</code>,其他方法都提供了<code>default</code>实现，因此我们可以在<code>sort</code>中使用<code>Lambda</code>表达式</p>\n<p>例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//以年龄排序</span></span><br><span class=\"line\">students.stream().sorted((s,o)-&gt;Integer.compare(s.getAge(),o.getAge()))</span><br><span class=\"line\">                                  .forEach(System.out::println);;</span><br></pre></td></tr></table></figure>\n\n<p>然而还有更方便的，<code>Comparator</code>默认也提供了实现好的方法引用，使得我们更加方便的使用：</p>\n<p>例如上面的代码可以改成如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//以年龄排序 </span></span><br><span class=\"line\">students.stream().sorted(Comparator.comparingInt(Student::getAge))</span><br><span class=\"line\">                            .forEach(System.out::println);;</span><br></pre></td></tr></table></figure>\n\n<p>或者：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//以姓名排序</span></span><br><span class=\"line\">students.stream().sorted(Comparator.comparing(Student::getName)).</span><br><span class=\"line\">                          forEach(System.out::println);</span><br></pre></td></tr></table></figure>\n\n<p>是不是更加简洁。</p>\n<hr>\n<h6 id=\"peek\"><a href=\"#peek\" class=\"headerlink\" title=\"peek\"></a><strong>peek</strong></h6><p><code>peek</code>有遍历的意思，和<code>forEach</code>一样，但是它是一个中间操作。</p>\n<p><code>peek</code>接受一个消费型的函数式接口。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Stream&lt;T&gt; <span class=\"title function_\">peek</span><span class=\"params\">(Consumer&lt;? <span class=\"built_in\">super</span> T&gt; action)</span>;</span><br></pre></td></tr></table></figure>\n\n<p>例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//去重以后打印出来，然后再归并为List</span></span><br><span class=\"line\">List&lt;Student&gt; sortedStudents= students.stream().distinct().peek(System.out::println).</span><br><span class=\"line\">                                                collect(Collectors.toList());</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h6 id=\"limit\"><a href=\"#limit\" class=\"headerlink\" title=\"limit\"></a><strong>limit</strong></h6><p><code>limit</code>裁剪操作，和<code>String::subString(0,x)</code>有点先沟通，<code>limit</code>接受一个<code>long</code>类型参数，通过<code>limit</code>之后的元素只会剩下<code>min(n,size)</code>个元素，<code>n</code>表示参数，<code>size</code>表示流中元素个数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Stream&lt;T&gt; <span class=\"title function_\">limit</span><span class=\"params\">(<span class=\"type\">long</span> maxSize)</span>;</span><br></pre></td></tr></table></figure>\n\n<p>例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//只留下前6个元素并打印</span></span><br><span class=\"line\">students.stream().limit(<span class=\"number\">6</span>).forEach(System.out::println);</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h6 id=\"skip\"><a href=\"#skip\" class=\"headerlink\" title=\"skip\"></a><strong>skip</strong></h6><p><code>skip</code>表示跳过多少个元素，和<code>limit</code>比较像，不过<code>limit</code>是保留前面的元素，<code>skip</code>是保留后面的元素</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Stream&lt;T&gt; skip(long n);</span><br></pre></td></tr></table></figure>\n\n<p>例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//跳过前3个元素并打印 </span></span><br><span class=\"line\">students.stream().skip(<span class=\"number\">3</span>).forEach(System.out::println);</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h3 id=\"终结操作\"><a href=\"#终结操作\" class=\"headerlink\" title=\"- 终结操作\"></a>- 终结操作</h3><blockquote>\n<p>一个流处理中，有且只能有一个终结操作，通过终结操作之后，流才真正被处理，终结操作一般都返回其他的类型而不再是一个流,一般来说，终结操作都是将其转换为一个容器。</p>\n<h6 id=\"forEach\"><a href=\"#forEach\" class=\"headerlink\" title=\"forEach\"></a><strong>forEach</strong></h6><p><code>forEach</code>是终结操作的遍历，操作和<code>peek</code>一样，但是<code>forEach</code>之后就不会再返回流</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">forEach</span><span class=\"params\">(Consumer&lt;? <span class=\"built_in\">super</span> T&gt; action)</span>;</span><br></pre></td></tr></table></figure>\n\n<p>例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//遍历打印</span></span><br><span class=\"line\">students.stream().forEach(System.out::println);</span><br></pre></td></tr></table></figure>\n\n<p>上面的代码和一下代码效果相同：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(Student student:students)&#123;</span><br><span class=\"line\">    System.out.println(sudents);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h6 id=\"toArray\"><a href=\"#toArray\" class=\"headerlink\" title=\"toArray\"></a><strong>toArray</strong></h6><p><code>toArray</code>和<code>List##toArray()</code>用法差不多，包含一个重载。</p>\n<p>默认的<code>toArray()</code>返回一个<code>Object[]</code>，</p>\n<p>也可以传入一个<code>IntFunction&lt;A[]&gt; generator</code>指定数据类型</p>\n<p>一般建议第二种方式。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Object[] toArray();</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;A&gt; A[] toArray(IntFunction&lt;A[]&gt; generator);</span><br></pre></td></tr></table></figure>\n\n<p>例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Student[] studentArray = students.stream().skip(<span class=\"number\">3</span>).toArray(Student[]::<span class=\"keyword\">new</span>);</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h6 id=\"max-min\"><a href=\"#max-min\" class=\"headerlink\" title=\"max/min\"></a><strong>max/min</strong></h6><p><code>max/min</code>即使找出最大或者最小的元素。<code>max/min</code>必须传入一个<code>Comparator</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Optional&lt;T&gt; <span class=\"title function_\">min</span><span class=\"params\">(Comparator&lt;? <span class=\"built_in\">super</span> T&gt; comparator)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">Optional&lt;T&gt; <span class=\"title function_\">max</span><span class=\"params\">(Comparator&lt;? <span class=\"built_in\">super</span> T&gt; comparator)</span>;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h6 id=\"count\"><a href=\"#count\" class=\"headerlink\" title=\"count\"></a><strong>count</strong></h6><p><code>count</code>返回流中的元素数量</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">long</span> <span class=\"title function_\">count</span><span class=\"params\">()</span>;</span><br></pre></td></tr></table></figure>\n\n<p>例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">long</span>  <span class=\"variable\">count</span> <span class=\"operator\">=</span> students.stream().skip(<span class=\"number\">3</span>).count();</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h6 id=\"reduce\"><a href=\"#reduce\" class=\"headerlink\" title=\"reduce\"></a><strong>reduce</strong></h6><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">reduce为归纳操作，主要是将流中各个元素结合起来，它需要提供一个起始值，然后按一定规则进行运算，比如相加等，它接收一个二元操作 <span class=\"code\">`BinaryOperator`</span>函数式接口。从某种意义上来说，<span class=\"code\">`sum,min,max,average`</span>都是特殊的reduce</span><br></pre></td></tr></table></figure>\n\n<p><code>reduce</code>包含三个重载：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">T <span class=\"title function_\">reduce</span><span class=\"params\">(T identity, BinaryOperator&lt;T&gt; accumulator)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">Optional&lt;T&gt; <span class=\"title function_\">reduce</span><span class=\"params\">(BinaryOperator&lt;T&gt; accumulator)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"> &lt;U&gt; U <span class=\"title function_\">reduce</span><span class=\"params\">(U identity,</span></span><br><span class=\"line\"><span class=\"params\">                 BiFunction&lt;U, ? <span class=\"built_in\">super</span> T, U&gt; accumulator,</span></span><br><span class=\"line\"><span class=\"params\">                 BinaryOperator&lt;U&gt; combiner)</span>;</span><br></pre></td></tr></table></figure>\n\n<p>例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">List&lt;Integer&gt; integers = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(Arrays.asList(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>));</span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"variable\">count</span> <span class=\"operator\">=</span> integers.stream().reduce(<span class=\"number\">0</span>,(x,y)-&gt;x+y);</span><br></pre></td></tr></table></figure>\n\n<p>以上代码等同于：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">long</span> <span class=\"variable\">count</span> <span class=\"operator\">=</span> integers.stream().reduce(Integer::sum).get();</span><br></pre></td></tr></table></figure>\n\n<p><code>reduce</code>两个参数和一个参数的区别在于有没有提供一个起始值，</p>\n<p>如果提供了起始值，则可以返回一个确定的值，如果没有提供起始值，则返回<code>Opeational</code>防止流中没有足够的元素。</p>\n<hr>\n<h6 id=\"anyMatch-allMatch-noneMatch\"><a href=\"#anyMatch-allMatch-noneMatch\" class=\"headerlink\" title=\"anyMatch\\ allMatch\\ noneMatch\"></a><strong>anyMatch\\ allMatch\\ noneMatch</strong></h6><p>测试是否有任意元素\\所有元素\\没有元素匹配表达式</p>\n<p>他们都接收一个推断类型的函数式接口：<code>Predicate</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"title function_\">anyMatch</span><span class=\"params\">(Predicate&lt;? <span class=\"built_in\">super</span> T&gt; predicate)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"title function_\">allMatch</span><span class=\"params\">(Predicate&lt;? <span class=\"built_in\">super</span> T&gt; predicate)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"title function_\">noneMatch</span><span class=\"params\">(Predicate&lt;? <span class=\"built_in\">super</span> T&gt; predicate)</span></span><br></pre></td></tr></table></figure>\n\n<p>例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"variable\">test</span> <span class=\"operator\">=</span> integers.stream().anyMatch(x-&gt;x&gt;<span class=\"number\">3</span>);</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h6 id=\"findFirst、-findAny\"><a href=\"#findFirst、-findAny\" class=\"headerlink\" title=\"findFirst、 findAny\"></a><strong>findFirst、 findAny</strong></h6><p>获取元素，这两个<code>API</code>都不接受任何参数，<code>findFirt</code>返回流中第一个元素，<code>findAny</code>返回流中任意一个元素。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Optional&lt;T&gt; <span class=\"title function_\">findFirst</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">Optional&lt;T&gt; <span class=\"title function_\">findAny</span><span class=\"params\">()</span>;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>也有有人会问<code>findAny()</code>这么奇怪的操作谁会用？这个<code>API</code>主要是为了在并行条件下想要获取任意元素，以最大性能获取任意元素</p>\n</blockquote>\n<p>例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">foo</span> <span class=\"operator\">=</span> integers.stream().findAny().get();</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h6 id=\"collect\"><a href=\"#collect\" class=\"headerlink\" title=\"collect\"></a><strong>collect</strong></h6><p><code>collect</code>收集操作，这个<code>API</code>放在后面将是因为它太重要了，基本上所有的流操作最后都会使用它。</p>\n<p>我们先看<code>collect</code>的定义：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"> &lt;R&gt; R <span class=\"title function_\">collect</span><span class=\"params\">(Supplier&lt;R&gt; supplier,</span></span><br><span class=\"line\"><span class=\"params\">                  BiConsumer&lt;R, ? <span class=\"built_in\">super</span> T&gt; accumulator,</span></span><br><span class=\"line\"><span class=\"params\">                  BiConsumer&lt;R, R&gt; combiner)</span>;</span><br><span class=\"line\">&lt;R, A&gt; R <span class=\"title function_\">collect</span><span class=\"params\">(Collector&lt;? <span class=\"built_in\">super</span> T, A, R&gt; collector)</span>;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，<code>collect</code>包含两个重载：</p>\n<p>一个参数和三个参数，</p>\n<p>三个参数我们很少使用，因为<code>JDK</code>提供了足够我们使用的<code>Collector</code>供我们直接使用,我们可以简单了解下这三个参数什么意思：</p>\n<ul>\n<li><code>Supplier</code>:用于产生最后存放元素的容器的生产者</li>\n<li><code>accumulator</code>:将元素添加到容器中的方法</li>\n<li><code>combiner</code>：将分段元素全部添加到容器中的方法</li>\n</ul>\n<p>前两个元素我们都很好理解，第三个元素是干嘛的呢？因为流提供了并行操作，因此有可能一个流被多个线程分别添加，然后再将各个子列表依次添加到最终的容器中。</p>\n<p>↓ - - - - - - - - -</p>\n<p>↓ — — —</p>\n<p>↓ ———</p>\n<p>如上图，分而治之。</p>\n<p>例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; result = stream.collect(ArrayList::<span class=\"keyword\">new</span>, List::add, List::addAll);</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>接下来看只有一个参数的<code>collect</code></p>\n<p>一般来说，只有一个参数的<code>collect</code>，我们都直接传入<code>Collectors</code>中的方法引用即可：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">List&lt;Integer&gt; = integers.stream().collect(Collectors.toList());</span><br></pre></td></tr></table></figure>\n\n<p><code>Collectors</code>中包含很多常用的转换器。<code>toList()</code>,<code>toSet()</code>等。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Collectors`中还包括一个`groupBy()`，他和`Sql`中的`groupBy`一样都是分组，返回一个`Map</span><br></pre></td></tr></table></figure>\n\n<p>例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//按学生年龄分组</span></span><br><span class=\"line\">Map&lt;Integer,List&lt;Student&gt;&gt; map= students.stream().</span><br><span class=\"line\">                                collect(Collectors.groupingBy(Student::getAge));</span><br></pre></td></tr></table></figure>\n\n<p><code>groupingBy</code>可以接受3个参数，分别是</p>\n<ol>\n<li>第一个参数：分组按照什么分类</li>\n<li>第二个参数：分组最后用什么容器保存返回（当只有两个参数是，此参数默认为<code>HashMap</code>）</li>\n<li>第三个参数：按照第一个参数分类后，对应的分类的结果如何收集</li>\n</ol>\n<p>有时候单参数的<code>groupingBy</code>不满足我们需求的时候，我们可以使用多个参数的<code>groupingBy</code></p>\n<p>例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//将学生以年龄分组，每组中只存学生的名字而不是对象</span></span><br><span class=\"line\">Map&lt;Integer,List&lt;String&gt;&gt; map =  students.stream().</span><br><span class=\"line\">  collect(Collectors.groupingBy(Student::getAge,Collectors.mapping(Student::getName,Collectors.toList())));</span><br></pre></td></tr></table></figure>\n\n<p><code>toList</code>默认生成的是<code>ArrayList</code>,<code>toSet</code>默认生成的是<code>HashSet</code>，如果想要指定其他容器，可以如下操作：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"> students.stream().collect(Collectors.toCollection(TreeSet::<span class=\"keyword\">new</span>));</span><br><span class=\"line\">Collectors`还包含一个`toMap`，利用这个`API`我们可以将`List`转换为`Map</span><br><span class=\"line\">  Map&lt;Integer,Student&gt; map=students.stream().</span><br><span class=\"line\">                           collect(Collectors.toMap(Student::getAge,s-&gt;s));</span><br></pre></td></tr></table></figure>\n\n<p>值得注意的一点是，<code>IntStream</code>，<code>LongStream</code>,<code>DoubleStream</code>是没有<code>collect()</code>方法的，因为对于基本数据类型，要进行装箱，拆箱操作，SDK并没有将它放入流中，对于基本数据类型流，我们只能将其<code>toArray()</code></p>\n</blockquote>\n","categories":["面试"],"tags":["Java","面试"]},{"title":"浅谈垃圾回收器","url":"/2022/08/23/%E6%B5%85%E8%B0%88%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/","content":"<h1 id=\"CMS垃圾回收器\"><a href=\"#CMS垃圾回收器\" class=\"headerlink\" title=\"CMS垃圾回收器\"></a>CMS垃圾回收器</h1><p>如果用Seria和Parallel系列的垃圾收集器：在垃圾回收的时，用户线程都会完全停止，直至垃圾回收结束！</p>\n<p><img src=\"/2022/08/23/%E6%B5%85%E8%B0%88%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/202207251706505-16612506422341.jpeg\" alt=\"img\"></p>\n<p>CMS的全称：Concurrent Mark Sweep，翻译过来是<strong>并发标记清除</strong></p>\n<p>用CMS对比上面的垃圾收集器(Seria和Parallel和parNew)：它最大的不同点就是<strong>并发</strong>：在GC线程工作的时候，用户线程<strong>不会完全停止</strong>，用户线程在<strong>部分场景下</strong>与GC线程一起并发执行。</p>\n<p>但是，要理解的是，无论是什么垃圾收集器，Stop The World是一定无法避免的！</p>\n<p>CMS只是在<strong>部分</strong>的GC场景下可以让GC线程与用户线程并发执行</p>\n<p>CMS的设计目标是为了避免<strong>老年代 GC</strong>出现<strong>长时间</strong>的卡顿（Stop The World）</p>\n<h2 id=\"CMS的工作流程\"><a href=\"#CMS的工作流程\" class=\"headerlink\" title=\"CMS的工作流程\"></a>CMS的工作流程</h2><p>CMS可以简单分为5个步骤：初始标记、并发标记、（并发预清理）、重新标记以及并发清除</p>\n<p>从步骤就不难看出，CMS主要是实现了<strong>标记清除</strong>垃圾回收算法</p>\n<h2 id=\"初始标记的过程\"><a href=\"#初始标记的过程\" class=\"headerlink\" title=\"初始标记的过程\"></a>初始标记的过程</h2><p><strong>初始标记</strong>会标记GCRoots<strong>直接关联</strong>的对象以及<strong>年轻代</strong>指向<strong>老年代</strong>的对象</p>\n<p><strong>初始标记</strong>这个过程是会发生Stop The World的。但这个阶段的速度算是很快的，因为没有<strong>向下追溯</strong>（只标记一层）</p>\n<p><a href=\"https://test1.jsdelivr.net/gh/Faetbwac/img/202207251706562.jpeg\"><img src=\"/2022/08/23/%E6%B5%85%E8%B0%88%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/202207251706562.jpeg\" alt=\"img\"></a></p>\n<h2 id=\"并发标记的过程\"><a href=\"#并发标记的过程\" class=\"headerlink\" title=\"并发标记的过程\"></a>并发标记的过程</h2><p>在<strong>初始标记</strong>完了之后，就进入了<strong>并发标记</strong>阶段啦</p>\n<p><strong>并发标记</strong>这个过程是不会停止用户线程的（不会发生 Stop The World）。这一阶段主要是从GC Roots向下<strong>追溯</strong>，标记所有可达的对象。</p>\n<p><strong>并发标记</strong>在GC的角度而言，是比较耗费时间的（需要追溯）</p>\n<p><a href=\"https://test1.jsdelivr.net/gh/Faetbwac/img/202207251707207.jpeg\"><img src=\"/2022/08/23/%E6%B5%85%E8%B0%88%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/202207251707207.jpeg\" alt=\"img\"></a></p>\n<p><strong>并发标记</strong>这个阶段完成之后，就到了<strong>并发预处理</strong>阶段啦</p>\n<p><strong>并发预处理</strong>这个阶段主要想干的事情：希望能减少下一个阶段<strong>重新标记</strong>所消耗的时间</p>\n<p>因为下一个阶段<strong>重新标记</strong>是需要Stop The World的</p>\n<p><strong>并发标记</strong>这个阶段由于用户线程是没有被挂起的，所以对象是有可能发生变化的</p>\n<p>可能有些对象，从新生代晋升到了老年代。可能有些对象，直接分配到了老年代（大对象）。可能老年代或者新生代的对象引用发生了变化…</p>\n<h2 id=\"跨代引用的问题\"><a href=\"#跨代引用的问题\" class=\"headerlink\" title=\"跨代引用的问题\"></a>跨代引用的问题</h2><p>针对老年代的对象，其实还是可以借助类card table的存储（将老年代对象发生变化所对应的卡页标记为dirty）</p>\n<p>所以<strong>并发预处理</strong>这个阶段会扫描可能由于<strong>并发标记</strong>时导致老年代发生变化的对象，会再扫描一遍标记为dirty的卡页</p>\n<p>对于新生代的对象，我们还是得遍历新生代来看看在<strong>并发标记</strong>过程中有没有对象引用了老年代..</p>\n<p>不过JVM里给我们提供了很多<strong>参数</strong>，有可能在这个过程中会触发一次 minor GC（触发了minor GC 是意味着就可以更少地遍历新生代的对象）</p>\n<p><a href=\"https://test1.jsdelivr.net/gh/Faetbwac/img/202207251707070.jpeg\"><img src=\"/2022/08/23/%E6%B5%85%E8%B0%88%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/202207251707070.jpeg\" alt=\"img\"></a></p>\n<h2 id=\"重新标记的过程\"><a href=\"#重新标记的过程\" class=\"headerlink\" title=\"重新标记的过程\"></a>重新标记的过程</h2><p><strong>并发预处理</strong>这个阶段阶段结束后，就到了<strong>重新标记</strong>阶段</p>\n<p><strong>重新标记</strong>阶段会Stop The World，这个过程的停顿时间其实很大程度上取决于上面<strong>并发预处理</strong>阶段（可以发现，这是一个追赶的过程：一边在标记存活对象，一边用户线程在执行产生垃圾）</p>\n<p><a href=\"https://test1.jsdelivr.net/gh/Faetbwac/img/202207251707172.jpeg\"><img src=\"/2022/08/23/%E6%B5%85%E8%B0%88%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/202207251707172.jpeg\" alt=\"img\"></a></p>\n<h2 id=\"并发清除的过程\"><a href=\"#并发清除的过程\" class=\"headerlink\" title=\"并发清除的过程\"></a>并发清除的过程</h2><p>最后就是<strong>并发清除</strong>阶段，不会Stop The World</p>\n<p>一边用户线程在执行，一边GC线程在回收不可达的对象</p>\n<p>这个过程，还是有可能用户线程在不断产生垃圾，但只能留到下一次GC 进行处理了，产生的这些垃圾被叫做“浮动垃圾”</p>\n<p>完了以后会重置 CMS 算法相关的内部数据，为下一次 GC 循环做准备</p>\n<p><a href=\"https://test1.jsdelivr.net/gh/Faetbwac/img/202207252308270.jpeg\"><img src=\"/2022/08/23/%E6%B5%85%E8%B0%88%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/202207252308270.jpeg\" alt=\"img\"></a></p>\n<h2 id=\"CMS的缺点\"><a href=\"#CMS的缺点\" class=\"headerlink\" title=\"CMS的缺点\"></a>CMS的缺点</h2><ol>\n<li>空间需要预留：CMS垃圾收集器可以一边回收垃圾，一边处理用户线程，那需要在这个过程中保证有充足的内存空间供用户使用。如果CMS运行过程中预留的空间不够用了，会报错（Concurrent Mode Failure），这时会启动 Serial Old垃圾收集器进行老年代的垃圾回收，会导致停顿的时间很长。显然啦，空间预留多少，肯定是有参数配置的。</li>\n<li><strong>浮动垃圾</strong>：由于垃圾回收和用户线程是同时进行的，在进行标记或者清除的同时，用户的线程还会去改变对象的引用，使得原来某些对象不是垃圾，但是当 CMS 进行清理的时候变成了垃圾，CMS 收集器无法收集，只能等到下一次 GC。CMS 收集器无法处理<strong>浮动垃圾</strong>（Floating Garbage），可能出现 “Concurrent Mode Failure” 失败而导致另一次 Full GC 的产生。如果在应用中老年代增长不是太快，可以适当调高参数 - XX:CMSInitiatingOccupancyFraction 的值来提高触发百分比，以便降低内存回收次数从而获取更好的性能。</li>\n<li>内存碎片问题：CMS本质上是实现了<strong>标记清除算法</strong>的收集器（从过程就可以看得出），这会意味着会产生内存碎片。由于碎片太多，又可能会导致内存空间不足所触发full GC，CMS一般会在触发full GC这个过程对碎片进行整理。整理涉及到<strong>移动</strong>/<strong>标记</strong>，那这个过程肯定会Stop The World的，如果内存足够大（意味着可能装载的对象足够多），那这个过程卡顿也是需要一定的时间的。</li>\n</ol>\n<h2 id=\"补充面试题\"><a href=\"#补充面试题\" class=\"headerlink\" title=\"补充面试题:\"></a>补充面试题:</h2><h3 id=\"1-CMS的过程？\"><a href=\"#1-CMS的过程？\" class=\"headerlink\" title=\"1.CMS的过程？\"></a>1.CMS的过程？</h3><blockquote>\n<p>初始标记、并发标记、（并发预清理）、重新标记以及并发清除</p>\n</blockquote>\n<h3 id=\"2-怎么标记垃圾的？\"><a href=\"#2-怎么标记垃圾的？\" class=\"headerlink\" title=\"2,怎么标记垃圾的？\"></a>2,怎么标记垃圾的？</h3><blockquote>\n<p>使用三色标记法</p>\n</blockquote>\n<h3 id=\"3-什么是三色标记法\"><a href=\"#3-什么是三色标记法\" class=\"headerlink\" title=\"3.什么是三色标记法\"></a>3.什么是三色标记法</h3><blockquote>\n<p><img src=\"/2022/08/23/%E6%B5%85%E8%B0%88%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1Nzk4NTU2,size_16,color_FFFFFF,t_70.png\" alt=\"在这里插入图片描述\"></p>\n<p>　三色标记法，是把内存中的对象，标记为3种颜色，分布是：黑、灰、白。(<strong>上文图中的红色仅供参考</strong>)</p>\n<ul>\n<li><p>黑：表示该对象已经扫描到，并且它可触达的对象也已经扫描到；</p>\n</li>\n<li><p>灰：表示该对象已经扫描到，但是它能触发的对象至少还有一个没有扫描到；</p>\n</li>\n<li><p>白：表示该节点没有被扫描到；</p>\n</li>\n</ul>\n</blockquote>\n<h3 id=\"4-CMS和G1的区别\"><a href=\"#4-CMS和G1的区别\" class=\"headerlink\" title=\"4.CMS和G1的区别\"></a>4.CMS和G1的区别</h3><blockquote>\n<ul>\n<li>G1和CMS都分为4个阶段,前三个阶段基本相同都为初始标记,并发标记,再次标记,区别在于最后清除阶段CMS是并发的,G1不是并发的,因此CMS最终会产生浮动垃圾,只能等待下次gc才能清除</li>\n<li>G1可以管理整个堆,而CMS只能作用于老年代,并且CMS在老年代使用的是标记清除算法,会产生内存碎片,而G1使用标记整理算法,不会产生内存碎片</li>\n<li>G1相比于CMS最大的区别是G1将内存划分为大小相等的Region,可以选择垃圾对象多的Region而不是整个堆从而减少STW,同时使用Region可以更精确控制收集,我们可以手动明确一个垃圾回收的最大时间</li>\n</ul>\n</blockquote>\n<h3 id=\"5-CMS什么时候会STW？为什么要STW（咋瓦鲁多）\"><a href=\"#5-CMS什么时候会STW？为什么要STW（咋瓦鲁多）\" class=\"headerlink\" title=\"5.CMS什么时候会STW？为什么要STW（咋瓦鲁多）?\"></a>5.CMS什么时候会STW？为什么要STW（咋瓦鲁多）?</h3><blockquote>\n<p><strong>初始标记和重新标记的时候</strong></p>\n<p>因为初始标记标记的是GC Root，而GC Root容易变动，比如栈帧中的本地变量表。所以需要STW。</p>\n<p>因为在重新标记之前是并发标记，在并发标记的期间会出现漏标和多标的对象，所以为了修正这部分对象，需要在重新标记期间STW。</p>\n</blockquote>\n","categories":["面试"],"tags":["面试","Jvm"]},{"title":"浅谈股票dp问题","url":"/2022/08/23/%E6%B5%85%E8%B0%88%E8%82%A1%E7%A5%A8dp%E9%97%AE%E9%A2%98/","content":"<p>笔者在力扣算题时，遇到股票题，觉得很有意思，于是写下自己的总结</p>\n<h3 id=\"1-第一个股票问题（一次买卖）\"><a href=\"#1-第一个股票问题（一次买卖）\" class=\"headerlink\" title=\"1.第一个股票问题（一次买卖）\"></a>1.第一个股票问题（一次买卖）</h3><p><img src=\"/2022/08/23/%E6%B5%85%E8%B0%88%E8%82%A1%E7%A5%A8dp%E9%97%AE%E9%A2%98/image-20220823215745512.png\" alt=\"image-20220823215745512\"></p>\n<blockquote>\n<p> 首先是最简单的题目，只有一次购买，一次卖出</p>\n<p>思路还是挺清晰的，还是DP思想：</p>\n<ol>\n<li>记录【今天之前买入的最小值】</li>\n<li>计算【今天之前最小值买入，今天卖出的获利】，也即【今天卖出的最大获利】</li>\n<li>比较【每天的最大获利】，取最大值即可</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">maxProfit</span><span class=\"params\">(<span class=\"type\">int</span>[] prices)</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(prices.length &lt;= <span class=\"number\">1</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"comment\">//初始化</span></span><br><span class=\"line\">            <span class=\"type\">int</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[prices.length][<span class=\"number\">2</span>];</span><br><span class=\"line\">            <span class=\"comment\">//两个状态：手里没股票，手里有股票</span></span><br><span class=\"line\">            dp[<span class=\"number\">0</span>][<span class=\"number\">1</span>] = -prices[<span class=\"number\">0</span>];</span><br><span class=\"line\">            dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;i &lt; prices.length; i ++)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//手里没股票</span></span><br><span class=\"line\">                dp[i][<span class=\"number\">0</span>] = Math.max(dp[i - <span class=\"number\">1</span>][<span class=\"number\">0</span>],dp[i - <span class=\"number\">1</span>][<span class=\"number\">1</span>] + prices[i]);</span><br><span class=\"line\">                <span class=\"comment\">//手里有股票</span></span><br><span class=\"line\">                dp[i][<span class=\"number\">1</span>] = Math.max(dp[i - <span class=\"number\">1</span>][<span class=\"number\">1</span>],-prices[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> dp[prices.length - <span class=\"number\">1</span>][<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">当然因为我们只是用二维数组保存了两个状态，有股票和没股票，所以可以简化一下</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">maxProfit</span><span class=\"params\">(<span class=\"type\">int</span>[] prices)</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">length</span> <span class=\"operator\">=</span> prices.length;</span><br><span class=\"line\">            <span class=\"comment\">//两个状态：手里没股票，手里有股票</span></span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">dp0</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>,dp1 = Integer.MIN_VALUE;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;i &lt; length; i ++)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//手里没股票</span></span><br><span class=\"line\">                dp0 = Math.max(dp0,dp1 + prices[i]);</span><br><span class=\"line\">                <span class=\"comment\">//手里有股票</span></span><br><span class=\"line\">                dp1 = Math.max(dp1,-prices[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//返回没股票的时候</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> dp0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>总之，没股票可以从昨天的有股票卖出，或者昨天的没股票得出（当然我们要尽量去获取最大值，毕竟利润最大），有股票可以是<strong>买今天的，或者昨天的有股票得到。</strong></p>\n</blockquote>\n<h3 id=\"2-第二个股票问题（多次买卖）\"><a href=\"#2-第二个股票问题（多次买卖）\" class=\"headerlink\" title=\"2.第二个股票问题（多次买卖）\"></a>2.第二个股票问题（多次买卖）</h3><p><img src=\"/2022/08/23/%E6%B5%85%E8%B0%88%E8%82%A1%E7%A5%A8dp%E9%97%AE%E9%A2%98/image-20220823222025568.png\" alt=\"image-20220823222025568\"></p>\n<blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">maxProfit</span><span class=\"params\">(<span class=\"type\">int</span>[] prices)</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(prices.length &lt;= <span class=\"number\">1</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"comment\">//初始化</span></span><br><span class=\"line\">            <span class=\"type\">int</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[prices.length][<span class=\"number\">2</span>];</span><br><span class=\"line\">            <span class=\"comment\">//两个状态：手里没股票，手里有股票</span></span><br><span class=\"line\">            dp[<span class=\"number\">0</span>][<span class=\"number\">1</span>] = -prices[<span class=\"number\">0</span>];</span><br><span class=\"line\">            dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;i &lt; prices.length; i ++)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//手里没股票</span></span><br><span class=\"line\">                dp[i][<span class=\"number\">0</span>] = Math.max(dp[i - <span class=\"number\">1</span>][<span class=\"number\">0</span>],dp[i - <span class=\"number\">1</span>][<span class=\"number\">1</span>] + prices[i]);</span><br><span class=\"line\">                <span class=\"comment\">//手里有股票</span></span><br><span class=\"line\">                dp[i][<span class=\"number\">1</span>] = Math.max(dp[i - <span class=\"number\">1</span>][<span class=\"number\">1</span>],dp[i - <span class=\"number\">1</span>][<span class=\"number\">0</span>] - prices[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> dp[prices.length - <span class=\"number\">1</span>][<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">注意到上面的状态转移方程中，每一天的状态只与前一天的状态有关，而与更早的状态都无关，因此我们不必存储这些无关的状态，只需要将dp[i-<span class=\"number\">1</span>][<span class=\"number\">0</span>] 和dp[i-<span class=\"number\">1</span>][<span class=\"number\">1</span>] 存放在两个变量中，通过它们计算出 dp[i][<span class=\"number\">0</span>] 和 dp[i][<span class=\"number\">1</span>] 并存回对应的变量，以便于第 i+<span class=\"number\">1</span> 天的状态转移即可。</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">maxProfit</span><span class=\"params\">(<span class=\"type\">int</span>[] prices)</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(prices.length &lt;= <span class=\"number\">1</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"comment\">//两个状态：手里没股票，手里有股票</span></span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">dp0</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>,dp1 = -prices[<span class=\"number\">0</span>];</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;i &lt; prices.length; i ++)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//手里没股票</span></span><br><span class=\"line\">                dp0 = Math.max(dp0,dp1 + prices[i]);</span><br><span class=\"line\">                <span class=\"comment\">//手里有股票</span></span><br><span class=\"line\">                dp1 = Math.max(dp1,dp0 - prices[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//返回没股票的时候</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> dp0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>相比第一题，<strong>这题多了一个条件，可以多次买卖。</strong></p>\n<p>总之，没股票可以从昨天的有股票卖出，或者昨天的没股票得出（当然我们要尽量去获取最大值，毕竟利润最大），有股票可以是<strong>从之前没股票的状态买今天的（之前的是不能的，只能是买一次），或者昨天的有股票得到。</strong></p>\n</blockquote>\n<h3 id=\"3-第三个股票问题（两次买卖）\"><a href=\"#3-第三个股票问题（两次买卖）\" class=\"headerlink\" title=\"3.第三个股票问题（两次买卖）\"></a>3.第三个股票问题（两次买卖）</h3><p><img src=\"/2022/08/23/%E6%B5%85%E8%B0%88%E8%82%A1%E7%A5%A8dp%E9%97%AE%E9%A2%98/image-20220823230742789.png\" alt=\"image-20220823230742789\"></p>\n<blockquote>\n<p>相比第二问，加了条只能买卖两次的设定，这使得我们必须要记录下数次交易中的两次最大值，所以我们必须新加状态进行购买次数的限制</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">一天结束时，可能有持股、可能未持股、可能卖出过<span class=\"number\">1</span>次、可能卖出过<span class=\"number\">2</span>次、也可能未卖出过</span><br><span class=\"line\"></span><br><span class=\"line\">所以定义状态转移数组dp[天数][当前是否持股][卖出的次数]</span><br><span class=\"line\"></span><br><span class=\"line\">具体一天结束时的<span class=\"number\">6</span>种状态：</span><br><span class=\"line\"></span><br><span class=\"line\">未持股，未卖出过股票：说明从未进行过买卖，利润为<span class=\"number\">0</span></span><br><span class=\"line\">dp[i][<span class=\"number\">0</span>][<span class=\"number\">0</span>]=<span class=\"number\">0</span></span><br><span class=\"line\">未持股，卖出过<span class=\"number\">1</span>次股票：可能是今天卖出，也可能是之前卖的（昨天也未持股且卖出过）</span><br><span class=\"line\">dp[i][<span class=\"number\">0</span>][<span class=\"number\">1</span>]=max(dp[i-<span class=\"number\">1</span>][<span class=\"number\">1</span>][<span class=\"number\">0</span>]+prices[i],dp[i-<span class=\"number\">1</span>][<span class=\"number\">0</span>][<span class=\"number\">1</span>])</span><br><span class=\"line\">未持股，卖出过<span class=\"number\">2</span>次股票:可能是今天卖出，也可能是之前卖的（昨天也未持股且卖出过）</span><br><span class=\"line\">dp[i][<span class=\"number\">0</span>][<span class=\"number\">2</span>]=max(dp[i-<span class=\"number\">1</span>][<span class=\"number\">1</span>][<span class=\"number\">1</span>]+prices[i],dp[i-<span class=\"number\">1</span>][<span class=\"number\">0</span>][<span class=\"number\">2</span>])</span><br><span class=\"line\">持股，未卖出过股票：可能是今天买的，也可能是之前买的（昨天也持股）</span><br><span class=\"line\">dp[i][<span class=\"number\">1</span>][<span class=\"number\">0</span>]=max(dp[i-<span class=\"number\">1</span>][<span class=\"number\">0</span>][<span class=\"number\">0</span>]-prices[i],dp[i-<span class=\"number\">1</span>][<span class=\"number\">1</span>][<span class=\"number\">0</span>])</span><br><span class=\"line\">持股，卖出过<span class=\"number\">1</span>次股票：可能是今天买的，也可能是之前买的（昨天也持股）</span><br><span class=\"line\">dp[i][<span class=\"number\">1</span>][<span class=\"number\">1</span>]=max(dp[i-<span class=\"number\">1</span>][<span class=\"number\">0</span>][<span class=\"number\">1</span>]-prices[i],dp[i-<span class=\"number\">1</span>][<span class=\"number\">1</span>][<span class=\"number\">1</span>])</span><br><span class=\"line\">持股，卖出过<span class=\"number\">2</span>次股票：最多交易<span class=\"number\">2</span>次，这种情况不存在</span><br><span class=\"line\">dp[i][<span class=\"number\">1</span>][<span class=\"number\">2</span>]=<span class=\"type\">float</span>(<span class=\"string\">&#x27;-inf&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">maxProfitDP</span><span class=\"params\">(<span class=\"type\">int</span>[] prices)</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (prices == <span class=\"literal\">null</span> || prices.length &lt;= <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"type\">int</span>[][][] dp = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[prices.length][<span class=\"number\">2</span>][<span class=\"number\">3</span>];</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">MIN_VALUE</span> <span class=\"operator\">=</span> Integer.MIN_VALUE / <span class=\"number\">2</span>;<span class=\"comment\">//因为最小值再减去1就是最大值Integer.MIN_VALUE-1=Integer.MAX_VALUE</span></span><br><span class=\"line\">            <span class=\"comment\">//初始化</span></span><br><span class=\"line\">            dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"number\">0</span>;<span class=\"comment\">//第一天休息</span></span><br><span class=\"line\">            dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>][<span class=\"number\">1</span>] = dp[<span class=\"number\">0</span>][<span class=\"number\">1</span>][<span class=\"number\">1</span>] = MIN_VALUE;<span class=\"comment\">//不可能</span></span><br><span class=\"line\">            dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>][<span class=\"number\">2</span>] = dp[<span class=\"number\">0</span>][<span class=\"number\">1</span>][<span class=\"number\">2</span>] = MIN_VALUE;<span class=\"comment\">//不可能</span></span><br><span class=\"line\">            dp[<span class=\"number\">0</span>][<span class=\"number\">1</span>][<span class=\"number\">0</span>] = -prices[<span class=\"number\">0</span>];<span class=\"comment\">//买股票</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; prices.length; i++) &#123;</span><br><span class=\"line\">                dp[i][<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">                dp[i][<span class=\"number\">0</span>][<span class=\"number\">1</span>] = Math.max(dp[i - <span class=\"number\">1</span>][<span class=\"number\">1</span>][<span class=\"number\">0</span>] + prices[i], dp[i - <span class=\"number\">1</span>][<span class=\"number\">0</span>][<span class=\"number\">1</span>]);</span><br><span class=\"line\">                dp[i][<span class=\"number\">0</span>][<span class=\"number\">2</span>] = Math.max(dp[i - <span class=\"number\">1</span>][<span class=\"number\">1</span>][<span class=\"number\">1</span>] + prices[i], dp[i - <span class=\"number\">1</span>][<span class=\"number\">0</span>][<span class=\"number\">2</span>]);</span><br><span class=\"line\">                dp[i][<span class=\"number\">1</span>][<span class=\"number\">0</span>] = Math.max(dp[i - <span class=\"number\">1</span>][<span class=\"number\">0</span>][<span class=\"number\">0</span>] - prices[i], dp[i - <span class=\"number\">1</span>][<span class=\"number\">1</span>][<span class=\"number\">0</span>]);<span class=\"comment\">//持有昨天的股票，或者昨天没买，今天买了</span></span><br><span class=\"line\">                dp[i][<span class=\"number\">1</span>][<span class=\"number\">1</span>] = Math.max(dp[i - <span class=\"number\">1</span>][<span class=\"number\">0</span>][<span class=\"number\">1</span>] - prices[i], dp[i - <span class=\"number\">1</span>][<span class=\"number\">1</span>][<span class=\"number\">1</span>]);</span><br><span class=\"line\">                dp[i][<span class=\"number\">1</span>][<span class=\"number\">2</span>] = MIN_VALUE;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Math.max(<span class=\"number\">0</span>, Math.max(dp[prices.length - <span class=\"number\">1</span>][<span class=\"number\">0</span>][<span class=\"number\">1</span>], dp[prices.length - <span class=\"number\">1</span>][<span class=\"number\">0</span>][<span class=\"number\">2</span>]));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">大神版</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">maxProfit</span><span class=\"params\">(<span class=\"type\">int</span>[] prices)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">        对于任意一天考虑四个变量:</span></span><br><span class=\"line\"><span class=\"comment\">        fstBuy: 在该天第一次买入股票可获得的最大收益 </span></span><br><span class=\"line\"><span class=\"comment\">        fstSell: 在该天第一次卖出股票可获得的最大收益</span></span><br><span class=\"line\"><span class=\"comment\">        secBuy: 在该天第二次买入股票可获得的最大收益</span></span><br><span class=\"line\"><span class=\"comment\">        secSell: 在该天第二次卖出股票可获得的最大收益</span></span><br><span class=\"line\"><span class=\"comment\">        分别对四个变量进行相应的更新, 最后secSell就是最大</span></span><br><span class=\"line\"><span class=\"comment\">        收益值(secSell &gt;= fstSell)</span></span><br><span class=\"line\"><span class=\"comment\">        **/</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">fstBuy</span> <span class=\"operator\">=</span> Integer.MIN_VALUE, fstSell = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">secBuy</span> <span class=\"operator\">=</span> Integer.MIN_VALUE, secSell = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> p : prices) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//状态转移</span></span><br><span class=\"line\">            fstBuy = Math.max(fstBuy, -p);</span><br><span class=\"line\">            fstSell = Math.max(fstSell, fstBuy + p);</span><br><span class=\"line\">            secBuy = Math.max(secBuy, fstSell - p);</span><br><span class=\"line\">            secSell = Math.max(secSell, secBuy + p); </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> secSell;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>本质上也是考察的是对于状态的分析变化，需要我们理清昨天和今天的状态关系</p>\n</blockquote>\n<h3 id=\"4-第四个股票问题（k次买卖）\"><a href=\"#4-第四个股票问题（k次买卖）\" class=\"headerlink\" title=\"4.第四个股票问题（k次买卖）\"></a>4.第四个股票问题（k次买卖）</h3><p><img src=\"/2022/08/23/%E6%B5%85%E8%B0%88%E8%82%A1%E7%A5%A8dp%E9%97%AE%E9%A2%98/image-20220823233637735.png\" alt=\"image-20220823233637735\"></p>\n<blockquote>\n<p>其实套路跟第三题一模一样，只是要求我们发现创建dp数组的规律</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">maxProfit</span><span class=\"params\">(<span class=\"type\">int</span> k, <span class=\"type\">int</span>[] prices)</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (prices == <span class=\"literal\">null</span> || prices.length &lt;= <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"type\">int</span>[][][] dp = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[prices.length][<span class=\"number\">2</span>][k+<span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">MIN_VALUE</span> <span class=\"operator\">=</span> Integer.MIN_VALUE / <span class=\"number\">2</span>;<span class=\"comment\">//因为最小值再减去1就是最大值,防止数据溢出</span></span><br><span class=\"line\">            dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"number\">0</span>;<span class=\"comment\">//第一天休息</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;i&lt;=k;i++)&#123;</span><br><span class=\"line\">                dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>][i] = dp[<span class=\"number\">0</span>][<span class=\"number\">1</span>][i] = MIN_VALUE;<span class=\"comment\">//不可能</span></span><br><span class=\"line\">                dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>][i] = dp[<span class=\"number\">0</span>][<span class=\"number\">1</span>][i] = MIN_VALUE;<span class=\"comment\">//不可能</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            dp[<span class=\"number\">0</span>][<span class=\"number\">1</span>][<span class=\"number\">0</span>] = -prices[<span class=\"number\">0</span>];<span class=\"comment\">//买股票</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; prices.length; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;j&lt;<span class=\"number\">2</span>;j++)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">l</span> <span class=\"operator\">=</span><span class=\"number\">0</span>;l&lt;=k;l++)&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(j==<span class=\"number\">0</span>&amp;&amp;l==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                            dp[i][j][l]=<span class=\"number\">0</span>;</span><br><span class=\"line\">                        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(j==<span class=\"number\">1</span>&amp;&amp;l==k)&#123;</span><br><span class=\"line\">                            dp[i][j][l]=MIN_VALUE;</span><br><span class=\"line\">                        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(j==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                            dp[i][j][l]=Math.max(dp[i-<span class=\"number\">1</span>][<span class=\"number\">1</span>][l-<span class=\"number\">1</span>]+prices[i],dp[i-<span class=\"number\">1</span>][<span class=\"number\">0</span>][l]);</span><br><span class=\"line\">                        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(j==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                            dp[i][j][l]=Math.max(dp[i-<span class=\"number\">1</span>][<span class=\"number\">0</span>][l]-prices[i],dp[i-<span class=\"number\">1</span>][<span class=\"number\">1</span>][l]);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">max</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;i&lt;=k;i++)&#123;</span><br><span class=\"line\">                max=Math.max(max,dp[prices.length-<span class=\"number\">1</span>][<span class=\"number\">0</span>][i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h3 id=\"5-第二个股票问题加上冷冻期\"><a href=\"#5-第二个股票问题加上冷冻期\" class=\"headerlink\" title=\"5.第二个股票问题加上冷冻期\"></a>5.第二个股票问题加上冷冻期</h3><p><img src=\"/2022/08/23/%E6%B5%85%E8%B0%88%E8%82%A1%E7%A5%A8dp%E9%97%AE%E9%A2%98/image-20220823234119843.png\" alt=\"image-20220823234119843\"></p>\n<blockquote>\n<p>题目中定义的“冷冻期”=卖出的那一天的后一天，题目设置冷冻期的意思是，<strong>如果昨天卖出了，今天不可买入</strong>，那么关键在于哪一天卖出，只要在今天想买入的时候判断一下前一天是不是刚卖出，即可，所以关键的一天其实是卖出的那一天，而不是卖出的后一天</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">maxProfit</span><span class=\"params\">(<span class=\"type\">int</span>[] prices)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> n=prices.length;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n&lt;=<span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">//0代表不持股且当天没卖出</span></span><br><span class=\"line\">        <span class=\"comment\">//1代表持股</span></span><br><span class=\"line\">        <span class=\"comment\">//2代表不持股且当天卖出</span></span><br><span class=\"line\">        <span class=\"type\">int</span> [][] dp=<span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[n][<span class=\"number\">3</span>];</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>][<span class=\"number\">1</span>]=-prices[<span class=\"number\">0</span>];</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>][<span class=\"number\">2</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;n;i++)&#123;<span class=\"comment\">//从[1]...[n-1]</span></span><br><span class=\"line\">            dp[i][<span class=\"number\">0</span>]=Math.max(dp[i-<span class=\"number\">1</span>][<span class=\"number\">0</span>],dp[i-<span class=\"number\">1</span>][<span class=\"number\">2</span>]);</span><br><span class=\"line\">            dp[i][<span class=\"number\">1</span>]=Math.max(dp[i-<span class=\"number\">1</span>][<span class=\"number\">1</span>],dp[i-<span class=\"number\">1</span>][<span class=\"number\">0</span>]-prices[i]);</span><br><span class=\"line\">            dp[i][<span class=\"number\">2</span>]=dp[i-<span class=\"number\">1</span>][<span class=\"number\">1</span>]+prices[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Math.max(dp[n-<span class=\"number\">1</span>][<span class=\"number\">0</span>],dp[n-<span class=\"number\">1</span>][<span class=\"number\">2</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</blockquote>\n","categories":["算法"],"tags":["Java","面试， 动态规划"]},{"title":"消息队列面试","url":"/2022/06/12/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E9%9D%A2%E8%AF%95/","content":"<h2 id=\"消息队列\"><a href=\"#消息队列\" class=\"headerlink\" title=\"消息队列\"></a>消息队列</h2><h3 id=\"1-消息队列有哪些作用\"><a href=\"#1-消息队列有哪些作用\" class=\"headerlink\" title=\"1.消息队列有哪些作用\"></a>1.消息队列有哪些作用</h3><blockquote>\n<p>1．解耦:使用消息队列来作为两个系统直接的通讯方式，两个系统不需要相互依赖了</p>\n<p>2．异步:系统A给消费队列发送完消息之后，就可以继续做其他事情了</p>\n<p>3．流量削峰:如果使用消息队列的方式来调用某个系统，那么消息将在队列中排队，有消费者自己控制消费速度</p>\n</blockquote>\n<h3 id=\"2-死信队列和延迟队列是什么\"><a href=\"#2-死信队列和延迟队列是什么\" class=\"headerlink\" title=\"2.死信队列和延迟队列是什么\"></a>2.死信队列和延迟队列是什么</h3><blockquote>\n<p>1．死信队列也是一个消息队列，它是用来存放那些没有成功消费的消息的，通常可以用来作为消息重试<br>2．延时队列就是用来存放需要在指定时间被处理的元素的队列，通常可以用来处理一些具有过期性操作的业务，比如十分钟内未支付则取消订单</p>\n</blockquote>\n<h4 id=\"3-Kafka的Pull和Push分别有什么优缺点\"><a href=\"#3-Kafka的Pull和Push分别有什么优缺点\" class=\"headerlink\" title=\"3.Kafka的Pull和Push分别有什么优缺点\"></a>3.Kafka的Pull和Push分别有什么优缺点</h4><blockquote>\n<ol>\n<li>pull表示消费者主动拉取，可以批量拉取，也可以单条拉取，所以pull可以由消费者自己控制，根据自己的消息处理能力来进行控制，但是消费者不能及时知道是否有消息，可能会拉到的消息为空</li>\n<li>push表示Broker主动给消费者推送消息，所以肯定是有消息时才会推送，但是消费者不能按自己的能力来消费消息，推过来多少消息，消费者就得消费多少消息，所以可能会造成网络堵塞，消费者压力大等问题</li>\n</ol>\n</blockquote>\n<h3 id=\"4-Kafka为什么比RocketMQ的吞吐量要高\"><a href=\"#4-Kafka为什么比RocketMQ的吞吐量要高\" class=\"headerlink\" title=\"4.Kafka为什么比RocketMQ的吞吐量要高\"></a>4.Kafka为什么比RocketMQ的吞吐量要高</h3><blockquote>\n<p>Kafka的生产者采用的是异步发送消息机制，当发送一条消息时，消息并没有发送到Broker而是缓存起来，然后直接向业务返回成功，当缓存的消息达到一定数量时再批量发送给Broker。这种做法减少了网络io，从而提高了消息发送的吞吐量，但是如果消息生产者宕机，会导致消息丢失，业务出错，所以理论上kafka利用此机制提高了性能却降低了可靠性。</p>\n</blockquote>\n<h3 id=\"5-RocketMQ的底层实现原理\"><a href=\"#5-RocketMQ的底层实现原理\" class=\"headerlink\" title=\"5.RocketMQ的底层实现原理\"></a>5.RocketMQ的底层实现原理</h3><blockquote>\n<p>RocketMQ由NameServer集群、Producer集群、Consumer集群、Broker集群组成，消息生产和消费的大致原理如下:</p>\n<ul>\n<li>Broker在启动的时候向所有的NameServer注册，并保持长连接，每30s发送一次心跳</li>\n<li>Producer在发送消息的时候从NameServer获取Broker服务器地址，根据负载均衡算法选择一台服务器来发送消息</li>\n<li>Conusmer消费消息的时候同样从NameServer获取Broker地址，然后主动拉取消息来消费</li>\n</ul>\n</blockquote>\n<h3 id=\"6-消息队列如何保证消息可靠传输\"><a href=\"#6-消息队列如何保证消息可靠传输\" class=\"headerlink\" title=\"6.消息队列如何保证消息可靠传输\"></a>6.消息队列如何保证消息可靠传输</h3><blockquote>\n<ol>\n<li>为了保证消息不多，也就是消息不能重复，也就是生产者不能重复生产消息，或者消费者不能重复消费消息</li>\n<li>首先要确保消息不多发，这个不常出现，也比较难控制，因为如果出现了多发，很大的原因是生产者自己的原因，如果要避免出现问题，就需要在消费端做控制</li>\n<li>要避免不重复消费，最保险的机制就是消费者实现幂等性，保证就算重复消费，也不会有问题，通过幂等性，也能解决生产者重复发送消息的问题</li>\n<li>消息不能少，意思就是消息不能丢失，生产者发送的消息，消费者一定要能消费到，对于这个问题，就要考虑两个方面</li>\n<li>生产者发送消息时，要确认broker确实收到并持久化了这条消息，比如RabbitMQ的confirm机制，Kafka的ack机制都可以保证生产者能正确的将消息发送给broker</li>\n<li>broker要等待消费者真正确认消费到了消息时才删除掉消息，这里通常就 是消费端ack机制，消费者接收到一条消息后，如果确认没问题了，就可以给broker发送一个ack，broker接收到ack后才会删除消息</li>\n</ol>\n</blockquote>\n<h3 id=\"7-消息丢失怎么办\"><a href=\"#7-消息丢失怎么办\" class=\"headerlink\" title=\"7.消息丢失怎么办\"></a>7.消息丢失怎么办</h3><blockquote>\n<p>丢失我们从三个角度出发(以下是RabbitMQ案例 )</p>\n<h4 id=\"消费者丢数据\"><a href=\"#消费者丢数据\" class=\"headerlink\" title=\"消费者丢数据\"></a>消费者丢数据</h4><blockquote>\n<p>此时可以选择用 RabbitMQ 提供的事务功能，就是生产者发送数据之前开启 RabbitMQ <strong>事务channel.txSelect</strong>，然后发送消息，如果消息没有成功被 RabbitMQ 接收到，那么生产者会收到异常报错，此时就可以回滚事务 channel.txRollback，然后重试发送消息；如果收到了消息，那么可以提交事务channel.txCommit。</p>\n<p><strong>缺点:吞吐量减少</strong></p>\n<p>所以一般来说，如果你要确保说写 RabbitMQ 的消息别丢，可以开启 <strong>confirm</strong> 模式，在生产者那里设置开启 confirm 模式之后，你每次写的消息都会分配一个唯一的 id，然后如果写入了 RabbitMQ 中，RabbitMQ会给你回传一个 ack 消息，告诉你说这个消息 ok 了。如果 RabbitMQ 没能处理这个消息，会回调你的一个 nack 接口，告诉你这个消息接收失败，你可以重试。而且你可以结合这个机制自己在内存里维护每个消息 id 的状态，如果超过一定时间还没接收到这个消息的回调，那么你可以重发。</p>\n<p>事务机制和 confirm 机制最大的不同在于，事务机制是同步的，你提交一个事务之后会阻塞在那儿，但是confirm 机制是异步的，你发送个消息之后就可以发送下一个消息，然后那个消息 RabbitMQ 接收了之后会异步回调你的一个接口通知你这个消息接收到了。</p>\n<p><strong>所以一般在生产者这块避免数据丢失，都是用 confirm 机制的。</strong></p>\n</blockquote>\n<h4 id=\"消息队列丢数据\"><a href=\"#消息队列丢数据\" class=\"headerlink\" title=\"消息队列丢数据\"></a>消息队列丢数据</h4><blockquote>\n<p>就是 RabbitMQ 自己弄丢了数据，这个你必须开启 RabbitMQ 的持久化，就是消息写入之后会持久化到磁盘，哪怕是 RabbitMQ 自己挂了，恢复之后会自动读取之前存储的数据，一般数据不会丢。除非极其罕见的是，RabbitMQ 还没持久化，自己就挂了，可能导致少量数据丢失，但是这个概率较小。</p>\n</blockquote>\n<h4 id=\"消费端丢数据\"><a href=\"#消费端丢数据\" class=\"headerlink\" title=\"消费端丢数据\"></a>消费端丢数据</h4><blockquote>\n<p>RabbitMQ 如果丢失了数据，主要是因为你消费的时候，刚消费到，还没处理，结果进程挂了，比如重启了，那么就尴尬了，RabbitMQ 认为你都消费了，这数据就丢了。</p>\n<p>这个时候得用 RabbitMQ 提供的 ack 机制，简单来说，就是你必须关闭 RabbitMQ 的自动 ack，可以通过一个 api 来调用就行，然后每次你自己代码里确保处理完的时候，再在程序里 ack 一把。这样的话，如果你还没处理完，不就没有 ack 了？那 RabbitMQ 就认为你还没处理完，这个时候 RabbitMQ 会把这个消费分配给别的 consumer 去处理，消息是不会丢的。</p>\n</blockquote>\n<p><img src=\"https://pics3.baidu.com/feed/e1fe9925bc315c60668cdd22d3e7a31b48547744.jpeg?token=9ca5384b80f2f3bc315a49b06168b6d9\" alt=\"img\"></p>\n</blockquote>\n<h3 id=\"8-消息重复消费怎么办\"><a href=\"#8-消息重复消费怎么办\" class=\"headerlink\" title=\"8.消息重复消费怎么办?\"></a>8.消息重复消费怎么办?</h3><blockquote>\n<h4 id=\"重复消费出现场景（消费完后没有返回状态然后重启重新消费）\"><a href=\"#重复消费出现场景（消费完后没有返回状态然后重启重新消费）\" class=\"headerlink\" title=\"重复消费出现场景（消费完后没有返回状态然后重启重新消费）:\"></a>重复消费出现场景（消费完后没有返回状态然后重启重新消费）:</h4><blockquote>\n<p>Kafka 实际上有个 offset 的概念，就是每个消息写进去，都有一个 offset，代表消息的序号，然后consumer 消费了数据之后，每隔一段时间（定时定期），会把自己消费过的消息的 offset 提交一下，表示“我已经消费过了，下次我要是重启啥的，你就让我继续从上次消费到的 offset 来继续消费吧”。</p>\n<p>但是凡事总有意外，比如我们之前生产经常遇到的，就是你有时候重启系统，看你怎么重启了，如果碰到点着急的，直接 kill 进程了，再重启。这会导致 consumer 有些消息处理了，但是没来得及提交 offset，尴尬了。重启之后，少数消息会再次消费一次。</p>\n<p>如果消费者干的事儿是拿一条数据就往数据库里写一条，会导致说，你可能就把数据 1/2 在数据库里插入了 2 次，那么数据就错啦。</p>\n<p>其实重复消费不可怕，可怕的是你没考虑到重复消费之后，怎么保证幂等性。</p>\n<p>举个例子吧。假设你有个系统，消费一条消息就往数据库里插入一条数据，要是你一个消息重复两次，你不就插入了两条，这数据不就错了？但是你要是消费到第二次的时候，自己判断一下是否已经消费过了，若是就直接扔了，这样不就保留了一条数据，从而保证了数据的正确性。</p>\n<p>一条数据重复出现两次，数据库里就只有一条数据，这就保证了系统的幂等性。</p>\n<p><strong>幂等性，通俗点说，就一个数据，或者一个请求，给你重复来多次，你得确保对应的数据是不会改变的，不能出错。</strong></p>\n</blockquote>\n<h4 id=\"如何保证幂等性\"><a href=\"#如何保证幂等性\" class=\"headerlink\" title=\"如何保证幂等性\"></a>如何保证幂等性</h4><blockquote>\n<ul>\n<li>数据库实现主键唯一</li>\n<li>redis天然幂等性</li>\n<li>唯一键和redis结合</li>\n</ul>\n</blockquote>\n</blockquote>\n","categories":["面试"],"tags":["面试","消息队列"]},{"title":"聚集索引和非聚集索引","url":"/2022/08/29/%E8%81%9A%E7%B0%87%E7%B4%A2%E5%BC%95%E5%92%8C%E9%9D%9E%E8%81%9A%E7%B0%87%E7%B4%A2%E5%BC%95/","content":"<h2 id=\"聚集索引和非聚集索引\"><a href=\"#聚集索引和非聚集索引\" class=\"headerlink\" title=\"聚集索引和非聚集索引\"></a>聚集索引和非聚集索引</h2><h3 id=\"什么是聚集索引\"><a href=\"#什么是聚集索引\" class=\"headerlink\" title=\"什么是聚集索引\"></a>什么是聚集索引</h3><blockquote>\n<p>聚集索引是将<strong>索引列字段</strong>和<strong>行记录数据</strong>维护在了一起,它的叶子节点存储的是 <strong>索引列字段 + 完整的行记录数据</strong>,通过聚集索引能直接获取到整行数据</p>\n<p>Innodb 的主键索引就是基于聚集索引实现的</p>\n<p>通俗点讲:利用聚集索引可以<strong>直接</strong>获取对应的元素数据</p>\n<p><img src=\"https://img2022.cnblogs.com/blog/1636535/202204/1636535-20220427020132699-1363305095.png\" alt=\"img\"></p>\n</blockquote>\n<h3 id=\"什么是非聚集索引\"><a href=\"#什么是非聚集索引\" class=\"headerlink\" title=\"什么是非聚集索引\"></a>什么是非聚集索引</h3><blockquote>\n<p>非聚集索引是相比较于聚集索引来说,它是把<strong>索引和行数据分开维护</strong>,叶子节点并没有包含完整的数据记录(叶子节点的数据区存储的是聚集索引的 id 或 数据的磁盘地址)Mysql 非聚集索引底层的数据结构也是 b+ 树,例如 Myisam 的索引、Innodb 的辅助索引</p>\n<p><img src=\"https://img2022.cnblogs.com/blog/1636535/202204/1636535-20220428224329312-1207567303.png\" alt=\"img\"></p>\n<p>比如在搜索年龄为41的数据时，会找到13，然后再去找利用聚集索引找主键为13的数据</p>\n</blockquote>\n<h3 id=\"回表（尽量去减少回表的产生）\"><a href=\"#回表（尽量去减少回表的产生）\" class=\"headerlink\" title=\"回表（尽量去减少回表的产生）\"></a>回表（尽量去减少回表的产生）</h3><blockquote>\n<p>当通过非聚集索引来查询数据时,存储引擎会根据索引字段定位到最底层的叶子节点,并通过叶子节点获得指向主键索引的主键 id,然后通过主键 id 去主键索引(聚集索引)上找到一个完整的行记录.这个过程被称为 <strong>回表</strong></p>\n</blockquote>\n","categories":["数据库"],"tags":["面试","Mysql","索引"]},{"title":"计算机网络面试","url":"/2022/06/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95(1)/","content":"<h2 id=\"计算机网络相关-1\"><a href=\"#计算机网络相关-1\" class=\"headerlink\" title=\"计算机网络相关(1)\"></a>计算机网络相关(1)</h2><h3 id=\"1-get和post的区别\"><a href=\"#1-get和post的区别\" class=\"headerlink\" title=\"1.get和post的区别\"></a>1.get和post的区别</h3><blockquote>\n<table>\n<thead>\n<tr>\n<th align=\"left\"></th>\n<th align=\"left\">GET</th>\n<th>POST</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">后退按钮/刷新</td>\n<td align=\"left\">无害</td>\n<td>数据会被重新提交（浏览器应该告知用户数据会被重新提交）。</td>\n</tr>\n<tr>\n<td align=\"left\">书签</td>\n<td align=\"left\">可收藏为书签</td>\n<td>不可收藏为书签</td>\n</tr>\n<tr>\n<td align=\"left\">缓存</td>\n<td align=\"left\">能被缓存</td>\n<td>不能缓存</td>\n</tr>\n<tr>\n<td align=\"left\">编码类型</td>\n<td align=\"left\">application/x-www-form-urlencoded</td>\n<td>application/x-www-form-urlencoded 或 multipart/form-data。为二进制数据使用多重编码。</td>\n</tr>\n<tr>\n<td align=\"left\">历史</td>\n<td align=\"left\">参数保留在浏览器历史中。</td>\n<td>参数不会保存在浏览器历史中。</td>\n</tr>\n<tr>\n<td align=\"left\">对数据长度的限制</td>\n<td align=\"left\">是的。当发送数据时，GET 方法向 URL 添加数据；URL 的长度是受限制的（URL 的最大长度是 2048 个字符）。</td>\n<td>无限制。</td>\n</tr>\n<tr>\n<td align=\"left\">对数据类型的限制</td>\n<td align=\"left\">只允许 ASCII 字符。</td>\n<td>没有限制。也允许二进制数据。</td>\n</tr>\n<tr>\n<td align=\"left\">安全性</td>\n<td align=\"left\">与 POST 相比，GET 的安全性较差，因为所发送的数据是 URL 的一部分。在发送密码或其他敏感信息时绝不要使用 GET ！</td>\n<td>POST 比 GET 更安全，因为参数不会被保存在浏览器历史或 web 服务器日志中。</td>\n</tr>\n<tr>\n<td align=\"left\">可见性</td>\n<td align=\"left\">数据在 URL 中对所有人都是可见的。</td>\n<td>数据不会显示在 URL 中。</td>\n</tr>\n</tbody></table>\n<p>从标准上来看，GET 和 POST 的区别如下：</p>\n<p>GET 用于获取信息，是无副作用的，是幂等的，且可缓存 POST 用于修改服务器上的数据，有副作用，非幂等，不可缓存</p>\n</blockquote>\n<h3 id=\"2-http和https的区别\"><a href=\"#2-http和https的区别\" class=\"headerlink\" title=\"2.http和https的区别\"></a>2.http和https的区别</h3><blockquote>\n<p>HTTP协议传输的数据都是未加密的，也就是明文的，因此使用HTTP协议传输隐私信息非常不安全，为了保证这些隐私数据能加密传输，于是网景公司设计了SSL（Secure Sockets Layer）协议用于对HTTP协议传输的数据进行加密，从而就诞生了HTTPS。</p>\n<p>简单来说，HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，要比http协议安全。</p>\n<p>HTTPS和HTTP的区别主要如下：</p>\n<p>1、https协议需要到ca申请证书，一般免费证书较少，因而需要一定费用。</p>\n<p>2、http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl加密传输协议。</p>\n<p>3、http和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。</p>\n<p>4、http的连接很简单，是无状态的；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。</p>\n</blockquote>\n<h3 id=\"3-TCP和udp的区别\"><a href=\"#3-TCP和udp的区别\" class=\"headerlink\" title=\"3.TCP和udp的区别\"></a>3.TCP和udp的区别</h3><blockquote>\n<ul>\n<li>TCP面向连接（如打电话要先拨号建立连接）；UDP是无连接的，即发送数据之前不需要建立连接</li>\n<li>TCP要求的系统资源较多，UDP较少</li>\n<li>TCP提供可靠的服务。也就是说，通过TCP连接传送的数据，无差错，不丢失，不重复，且按序到达；UDP尽最大努力交付，即不保证可靠交付</li>\n<li>TCP面向字节流，实际上是TCP把数据看成一连串无结构的字节流；UDP是面向报文的</li>\n<li>UDP没有拥塞控制，因此网络出现拥塞不会使源主机的发送速率降低（对实时应用很有用，如IP电话，实时视频会议等）</li>\n<li>每一条TCP连接只能是点到点的；UDP支持一对一，一对多，多对一和多对多的交互通信</li>\n<li>TCP首部开销20字节；UDP的首部开销小，只有8个字节</li>\n<li>TCP的逻辑通信信道是全双工的可靠信道；UDP则是不可靠信道</li>\n</ul>\n</blockquote>\n<h3 id=\"4-说说浏览器输入网址到返回页面的过程？\"><a href=\"#4-说说浏览器输入网址到返回页面的过程？\" class=\"headerlink\" title=\"4.说说浏览器输入网址到返回页面的过程？\"></a>4.说说浏览器输入网址到返回页面的过程？</h3><blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">基础版本：</span><br><span class=\"line\">浏览器根据请求的 URL 交给 DNS 域名解析，找到真实 IP ，向服务器发起请求；</span><br><span class=\"line\">服务器交给后台处理完成后返回数据，浏览器接收⽂件（ HTML、JS、CSS 、图象等）；</span><br><span class=\"line\">浏览器对加载到的资源（ HTML、JS、CSS 等）进⾏语法解析，建立相应的内部数据结构 （如 HTML 的 DOM）；</span><br><span class=\"line\">载⼊解析到的资源⽂件，渲染页面，完成。</span><br></pre></td></tr></table></figure>\n\n<p>1、用户在输入栏输入地址</p>\n<p>　　(1) 如果有 beforeunload 事件会先执行判断继续还是跳出操作</p>\n<p>　　(2) 浏览器进程识别是 地址还是关键字检索</p>\n<p>　　(3) 将正确的 url 地址发送给网络进程</p>\n<p>2、网络进程查看有没有缓存</p>\n<p>　　(1) 有缓存直接返回数据</p>\n<p>　　(2) 没有缓存直接进入网络进程请求流程</p>\n<p>3、浏览器进程查询 DNS 获取服务器 ip 地址</p>\n<p>　　(1) 如果请求协议是 https 那么还需要建立TLS连接</p>\n<p>　　(2) 利用ip地址和服务器建立 tcp 连接</p>\n<p>　　(3) 如果浏览器的 tcp 连接请求有超过浏览器设定限额，则需要排队等待</p>\n<p>4、tcp 连接协议通过与服务器进行3次握手确立连接</p>\n<p>　　(1) 浏览器即用户端发起第一次握手</p>\n<p>　　(2) 服务器接收到用户端的消息发起接收到信息</p>\n<p>　　(3) 用户端接收到信息后向服务器发起第三次握手表示已经接收到信息可以连接 </p>\n<p>　　(4) 如果第二次握手发送数据包丢失或者用户端发起第三次握手数据包丢失，服务器在长时间未接收到信息会再次发起，总共会尝试6次</p>\n<p>5、tcp 接受信息</p>\n<p>6、网络进程接收到数据后将返回头和返回体发送给浏览器</p>\n<p>7、浏览器进程读取返回头查看返回信息，是否重定向或者响应数据类型处理</p>\n<p>　　(1) 重定向即回到第3步</p>\n<p>　　(2) 会根据 Content-Type 的值来决定如何显示响应体的内容。</p>\n<p>　　(3) Content-Type 为下载类型就会把请求交给浏览器的下载管理器，导航结束</p>\n<p>　　(4) 如果是 HTML，那么浏览器则会继续进行导航流程</p>\n<p>8、准备渲染进程</p>\n<p>9、浏览器进程接收到网络进程的响应头数据之后，便向渲染进程发起“提交文档”的消息</p>\n<p>10、渲染进程就和网络进程直接建立连接进行管道数据传输</p>\n<p>11、数据传输完成后tcp发起4次挥手断开连接并且渲染进程同时向浏览器进程发起确认提交</p>\n<p>12、浏览器进程收到确认提交后会更新浏览器界面状态，包括了安全状态、地址栏的 URL、前进后退的历史状态。</p>\n<p>13、渲染进程开始页面解析和子资源加载</p>\n<h3 id=\"相关的题目\"><a href=\"#相关的题目\" class=\"headerlink\" title=\"相关的题目\"></a>相关的题目</h3><h3 id=\"浏览器发出一个请求到收到响应经历了哪些步骤\"><a href=\"#浏览器发出一个请求到收到响应经历了哪些步骤\" class=\"headerlink\" title=\"浏览器发出一个请求到收到响应经历了哪些步骤?\"></a>浏览器发出一个请求到收到响应经历了哪些步骤?</h3><figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">1.浏览器解析用户输入的URL，生成一个HTTP格式的请求</span><br><span class=\"line\">⒉先根据URL域名从本地hosts文件查找是否有映射IP，如果没有就将域名发送给电脑所配置的DNS进行域名解析，得到IP地址                               3.浏览器通过操作系统将请求通过四层网络协议发送出去</span><br><span class=\"line\">4.途中可能会经过各种路由器、交换机，最终到达服务器</span><br><span class=\"line\">5.服务器搜到请求后，根据请求所指定的端口，将请求传递给绑定了该端口的应用程序，比如8080被tomcat占用了                                         6.tomcat接收到请求数据后，按照http协议的格式进行解析，解析得到所要访问的servlet</span><br><span class=\"line\">7.然后servlet来处理这个请求，如果是SpringMVC中的DispatcherSservlet，那么则会找到对应的Controller中的方法，并执行该方法得到结果             8.Tomcat得到响应结果后封装成HTTP响应的格式，并再次通过网络发送给浏览器所在的服务器</span><br><span class=\"line\">9.浏览器所在的服务器拿到结果后再传递给浏览器，浏览器则负责解析并渲染</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h3 id=\"5-cookie做什么的？session又是什么？它们直接的关系？\"><a href=\"#5-cookie做什么的？session又是什么？它们直接的关系？\" class=\"headerlink\" title=\"5.cookie做什么的？session又是什么？它们直接的关系？\"></a>5.cookie做什么的？session又是什么？它们直接的关系？</h3><blockquote>\n<p>什么是Cookie？<br>Cookie实际上是一小段的文本信息。客户端请求服务器，如果服务器需要记录该用户状态，就使用response向客户端浏览器颁发一个Cookie。客户端会把Cookie保存起来。</p>\n<p>当浏览器再请求该网站时，浏览器把请求的网址连同该Cookie一同提交给服务器。服务器检查该Cookie，以此来辨认用户状态。服务器还可以根据需要修改Cookie的内容。<br>信息保存的时间可以根据需要设置.</p>\n<p><strong>如果没有设置Cookie失效日期,它们仅保存到关闭浏览器程序为止.<br>如果将Cookie对象的Expires属性设置为Minvalue,则表示Cookie永远不会过期.</strong></p>\n<p><strong>Cookie存储的数据量很受限制,大多数浏览器支持最大容量为4K,因此不要用来保存数据集及其他大量数据.</strong></p>\n<p><strong>由于并非所有的浏览器都支持Cookie,并且数据信息是以明文文本的形式保存在客户端的计算机中,</strong><br><strong>因此最好不要保存敏感的,未加密的数据,否则会影响网站的安全性</strong></p>\n<p>什么是Session？<br>Session是另一种记录客户状态的机制，不同的是Cookie保存在客户端浏览器中，而Session保存在服务器上。客户端浏览器访问服务器的时候，服务器把客户端信息以某种形式记录在服务器上。这就是Session。客户端浏览器再次访问时只需要从该Session中查找该客户的状态就可以了。</p>\n<p>每个用户访问服务器都会建立一个session，那服务器是怎么标识用户的唯一身份呢？事实上，用户与服务器建立连接的同时，服务器会自动为其分配一个SessionId。</p>\n<p>Session和Cookie的区别？</p>\n<p>1、数据存储位置：cookie数据存放在客户的浏览器上，session数据放在服务器上。</p>\n<p>2、安全性：cookie不是很安全，别人可以分析存放在本地的cookie并进行cookie欺骗，考虑到安全应当使用session。</p>\n<p>3、服务器性能：session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能，考虑到减轻服务器性能方面，应当使用cookie。</p>\n<p>4、数据大小：单个cookie保存的数据不能超过4K，很多浏览器都限制一个站点最多保存20个cookie。</p>\n<p>5、信息重要程度：可以考虑将登陆信息等重要信息存放为session，其他信息如果需要保留，可以放在cookie中。</p>\n</blockquote>\n<h3 id=\"6-跨域请求是什么-有什么问题-怎么解决\"><a href=\"#6-跨域请求是什么-有什么问题-怎么解决\" class=\"headerlink\" title=\"6.跨域请求是什么?有什么问题?怎么解决?\"></a>6.跨域请求是什么?有什么问题?怎么解决?</h3><blockquote>\n<p>跨域是指浏览器在发起网络请求时，会检查该请求所对应的协议、域名、端口和当前网页是否一致，如果不一致则浏览器会进行限制，比如在<br><a href=\"http://www.baidu.com的某个网页中,如果使用ajax去访问www.jd.com是不行的,但是如果是img、iframe、scipt等标签的sc属性去访问则是可以的,之所以浏览器要做这层限制,是为了用户信息安全.但是如果开发者想要绕过这层限制也是可以的/\">www.baidu.com的某个网页中，如果使用ajax去访问www.jd.com是不行的，但是如果是img、iframe、scipt等标签的sc属性去访问则是可以的，之所以浏览器要做这层限制，是为了用户信息安全。但是如果开发者想要绕过这层限制也是可以的</a>:</p>\n<p>1.response添加header，比如resp.setHeader(“Access-Control-Allow-Origin”*);表示可以访问所有网站，不受是否同源的限制                                            </p>\n<p>2.jsonp的方式，该技术底层就是基于script标签来实现的，因为script标签是可以跨域的</p>\n<p>3.后台自己控制，先访问同域名下的接口，然后在接口中再去使用HTTPClient等工具去调用目标接口                                                                                  </p>\n<p>4.网关，和第三种方式类似，都是交给后台服务来进行跨域访问</p>\n</blockquote>\n<h3 id=\"7-Netty是什么？和Tomcat有什么区别？特点是什么？\"><a href=\"#7-Netty是什么？和Tomcat有什么区别？特点是什么？\" class=\"headerlink\" title=\"7.Netty是什么？和Tomcat有什么区别？特点是什么？\"></a>7.Netty是什么？和Tomcat有什么区别？特点是什么？</h3><blockquote>\n<p>Netty是一个基于NIO的异步网络通信框架，性能高，封装了原生NIO编码的复杂度，开发者可以直接使用Netty来开发高效率的各种网络服务器，并且编码简单。<br>Tomcat是一个Web服务器，是一个Servlet容器，基本上Tomcat内部只会运行Servlet程序，并处理HTTP请求，而Netty封装的是底层IO模型，关注的是网络数据的传输，而不关心具体的协议，可定制性更高。</p>\n<p>Netty的特点:</p>\n<ul>\n<li>异步、NIO的网络通信框架</li>\n<li>高性能</li>\n<li>高扩展，高定制性</li>\n<li>易用性</li>\n</ul>\n</blockquote>\n<h3 id=\"8-TCP的三次握手和四次挥手过程\"><a href=\"#8-TCP的三次握手和四次挥手过程\" class=\"headerlink\" title=\"8.TCP的三次握手和四次挥手过程\"></a>8.TCP的三次握手和四次挥手过程</h3><blockquote>\n<p>TCP协议是7层网络协议中的传输层协议，负责数据的可靠传输。在建立TCP连接时，需要通过三次握手来建立，过程是:</p>\n<ol>\n<li>客户端向服务端发送一个SYN</li>\n<li>服务端接收到SYN后，给客户端发送一个SYN_ACK</li>\n<li>客户端接收到SYN_ACK后，再给服务端发送一个ACK</li>\n</ol>\n<p>在断开TCP连接时，需要通过四次挥手来断开，过程是:</p>\n<ol>\n<li>客户端向服务端发送FIN</li>\n<li>服务端接收FIN后，向客户端发送ACK，表示我接收到了断开连接的请求，客户端你可以不发数据了，不过服务端这边可能还<br>有数据正在处理</li>\n<li>服务端处理完所有数据后，向客户端发送FIN，表示服务端现在可以断开连接</li>\n<li>客户端收到服务端的FIN，向服务端发送ACK，表示客户端也会断开连接了</li>\n</ol>\n<p><code>SYN表示建立连接，FIN表示关闭连接，ACK表示响应，PSH表示有 DATA数据传输，RST表示连接重置。</code></p>\n<p>额外问题: 为什么要三次握手？两次握手不行吗？</p>\n<blockquote>\n<p>三次握手的目的是为了确认客户端和服务端的接收能力和发送能力。</p>\n<p>第一次握手成功时，服务端确认客户端的发送能力和服务端的接收能力；</p>\n<p>第二次握手成功时，客户端确认服务端的发送能力和接收能力和客户端的发送能力和接收能力，但此时服务端不能确认客户端的接收能力和服务端的发送能力；</p>\n<p>第三次握手成功时，服务端和客户端都确认了双方的发送能力和接收能力。</p>\n<p>如果是两次握手还会出现一个问题，客户端的第一次SYN请求在网络中阻塞时，客户端重新发送第二次SYN请求，服务器收到第二次SYN请求后，成功与客户端两次握手，双方建立连接，在数据传输结束后，双方断开链接，这时，第一次的SYN请求在服务端到来，服务端会认为客户端想要重新建立链接，给客户端发出确认建立连接，会一直等待客户端发送数据，而客户端已经完成了自己的数据传输任务，不会再给服务端发信息，于是服务端就一直等待，造成了资源的浪费。</p>\n</blockquote>\n</blockquote>\n<h3 id=\"9-大文件上传如何做断点续传？\"><a href=\"#9-大文件上传如何做断点续传？\" class=\"headerlink\" title=\"9.大文件上传如何做断点续传？\"></a>9.大文件上传如何做断点续传？</h3><blockquote>\n<p>不管怎样简单的需求，在量级达到一定层次时，都会变得异常复杂</p>\n<p>文件上传简单，文件变大就复杂</p>\n<p>上传大文件时，以下几个变量会影响我们的用户体验</p>\n<ul>\n<li><p>服务器处理数据的能力</p>\n</li>\n<li><p>请求超时</p>\n</li>\n<li><p>网络波动</p>\n</li>\n<li><p>上传时间会变长，高频次文件上传失败，失败后又需要重新上传等等</p>\n</li>\n</ul>\n<p>为了解决上述问题，我们需要对大文件上传单独处理</p>\n<p>这里涉及到<strong>分片上传</strong>及<strong>断点续传</strong>两个概念分片上传</p>\n<h3 id=\"分片上传\"><a href=\"#分片上传\" class=\"headerlink\" title=\"分片上传\"></a>分片上传</h3><p>分片上传，就是将所要上传的文件，按照一定的大小，将整个文件分隔成多个数据块（Part）来进行分片上传</p>\n<p>如下图</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/e3e06808eb489dd3e6fb737f968196ef.png\" alt=\"img\"></p>\n<p>上传完之后再由服务端对所有上传的文件进行汇总整合成原始的文件</p>\n<p>大致流程如下：</p>\n<p>将需要上传的文件按照一定的分割规则，分割成相同大小的数据块；</p>\n<p>初始化一个分片上传任务，返回本次分片上传唯一标识；</p>\n<p>按照一定的策略（串行或并行）发送各个分片数据块；</p>\n<p>发送完成后，服务端根据判断数据上传是否完整，如果完整，则进行数据块合成得到原始文件</p>\n<h3 id=\"断点续传\"><a href=\"#断点续传\" class=\"headerlink\" title=\"断点续传\"></a>断点续传</h3><p>断点续传指的是在下载或上传时，将下载或上传任务人为的划分为几个部分</p>\n<p>每一个部分采用一个线程进行上传或下载，如果碰到网络故障，可以从已经上传或下载的部分开始继续上传或下载未完成的部分，而没有必要从头开始上传下载。用户可以节省时间，提高速度</p>\n<p><strong>一般实现方式有两种：</strong></p>\n<p><strong>服务器端返回，告知从哪开始</strong></p>\n<p><strong>浏览器端自行处理</strong></p>\n<p>上传过程中将文件在服务器写为临时文件，等全部写完了（文件上传完），将此临时文件重命名为正式文件即可</p>\n<p>如果中途上传中断过，下次上传的时候根据当前临时文件大小，作为在客户端读取文件的偏移量，从此位置继续读取文件数据块，上传到服务器从此偏移量继续写入文件即可<br><img src=\"https://img-blog.csdnimg.cn/img_convert/2fca1391b4a9ae80c164ab5d88492c86.png\" alt=\"img\"></p>\n</blockquote>\n<h3 id=\"10-为什么Https用两种加密算法？\"><a href=\"#10-为什么Https用两种加密算法？\" class=\"headerlink\" title=\"10.为什么Https用两种加密算法？\"></a>10.为什么Https用两种加密算法？</h3><blockquote>\n<p>HTTPS 在内容传输的加密上使用的是对称加密，非对称加密只作用在证书验证阶段。</p>\n<p>HTTPS的整体过程分为证书验证和数据传输阶段，具体的交互过程如下： </p>\n<p>① 证书验证阶段：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">1）浏览器发起 HTTPS 请求；</span><br><span class=\"line\"></span><br><span class=\"line\">2）服务端返回 HTTPS 证书；</span><br><span class=\"line\"></span><br><span class=\"line\">3）客户端验证证书是否合法，如果不合法则提示告警。\t</span><br></pre></td></tr></table></figure>\n\n<p>② 数据传输阶段：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>）当证书验证合法后，在本地生成随机数；</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2</span>）通过公钥加密随机数，并把加密后的随机数传输到服务端；</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">3</span>）服务端通过私钥对随机数进行解密；</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4</span>）服务端通过客户端传入的随机数构造对称加密算法，对返回结果内容进行加密后传输。</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"number\">5</span>) 客户端再用生成的随机值对返回内容进行对应的对称解密，获取内容</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"为什么数据传输是用对称加密？\"><a href=\"#为什么数据传输是用对称加密？\" class=\"headerlink\" title=\"为什么数据传输是用对称加密？\"></a>为什么数据传输是用对称加密？</h4><p>首先：非对称加密的加解密效率是非常低的，而 http 的应用场景中通常端与端之间存在大量的交互，非对称加密的效率是无法接受的。</p>\n<p>另外：在 HTTPS 的场景中只有服务端保存了私钥，一对公私钥只能实现单向的加解密，所以 HTTPS 中内容传输加密采取的是对称加密，而不是非对称加密</p>\n<p><strong>内容使用对称加密是为了传输效率</strong></p>\n<p><strong>非对称加密是为了验证证书合法性</strong></p>\n</blockquote>\n","categories":["面试"],"tags":["面试","计算机网络"]},{"title":"自动拆箱和装箱原理","url":"/2022/08/08/%E8%87%AA%E5%8A%A8%E6%8B%86%E7%AE%B1%E5%92%8C%E8%A3%85%E7%AE%B1%E5%8E%9F%E7%90%86/","content":"<p>自动装箱和自动拆箱是两个相反的过程，自动装箱即将基本数据类型转换为对应的封装类，自动拆箱即将封装类转换为对应的基本数据类型。此外，<strong>装箱的过程会增加内存的消耗，影响性能，因为这个过程会创建对应的对象。</strong></p>\n<p><img src=\"https://img-blog.csdnimg.cn/20210112100512319.png?x-oss-process=image#pic_center/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTQyNzEyOQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Integer</span> <span class=\"variable\">integerNum</span> <span class=\"operator\">=</span> <span class=\"number\">100</span>; <span class=\"comment\">// 进行自动装箱，得到的是封装类</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">intNum</span> <span class=\"operator\">=</span> integerNum; <span class=\"comment\">// 进行自动拆箱，得到基本数据类型</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>通过 <code>javap -c Main.class</code> 查看生成的字节码文件。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Compiled from <span class=\"string\">&quot;Main.java&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">club</span>.wadreamer.test.Main &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> club.wadreamer.test.Main();</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">       <span class=\"number\">0</span>: aload_0</span><br><span class=\"line\">       <span class=\"number\">1</span>: invokespecial #<span class=\"number\">1</span>                  <span class=\"comment\">// Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class=\"line\">       <span class=\"number\">4</span>: <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(java.lang.String[])</span>;</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">       <span class=\"number\">0</span>: bipush        <span class=\"number\">100</span></span><br><span class=\"line\">       <span class=\"number\">2</span>: invokestatic  #<span class=\"number\">2</span>                  <span class=\"comment\">// Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;</span></span><br><span class=\"line\">       <span class=\"number\">5</span>: astore_1</span><br><span class=\"line\">       <span class=\"number\">6</span>: aload_1</span><br><span class=\"line\">       <span class=\"number\">7</span>: invokevirtual #<span class=\"number\">3</span>                  <span class=\"comment\">// Method java/lang/Integer.intValue:()I</span></span><br><span class=\"line\">      <span class=\"number\">10</span>: istore_2</span><br><span class=\"line\">      <span class=\"number\">11</span>: <span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><code>Integer#valueOf()</code> 和 <code>Integer#intValue()</code> 的源码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 自动装箱</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Integer <span class=\"title function_\">valueOf</span><span class=\"params\">(<span class=\"type\">int</span> i)</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Integer</span>(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 自动拆箱</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">intValue</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> value;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>从上述字节码可以得出如下结论：</p>\n<ul>\n<li>在进行自动装箱时，Java 虚拟机会自动调用 Integer#valueOf()。</li>\n<li>在进行自动拆箱时，Java 虚拟机会自动调用 Integer#intValue()。</li>\n<li>其他数据类型的自动装箱和自动拆箱的过程和 Integer 类似，都是调用类似 xxxValue()、valueOf() 等方法。</li>\n</ul>\n<h4 id=\"其他案例分析\"><a href=\"#其他案例分析\" class=\"headerlink\" title=\"其他案例分析\"></a>其他案例分析</h4><h5 id=\"1-空指针异常\"><a href=\"#1-空指针异常\" class=\"headerlink\" title=\"1.空指针异常\"></a>1.空指针异常</h5><blockquote>\n<p>包装类为空，拆箱时异常</p>\n</blockquote>\n<h5 id=\"2-equals和-问题\"><a href=\"#2-equals和-问题\" class=\"headerlink\" title=\"2.equals和==问题\"></a>2.equals和==问题</h5><blockquote>\n<p>两个包装类用==，比较的是地址</p>\n<p>两个包装类用equals，比较的是值</p>\n<p>一个包装类和一个基本数据类型用equals，比较的是值</p>\n<p>一个包装类和一个基本数据类型用==，比较的是值（会自动拆包）</p>\n<p>两个基本数据类型用==比较的是值</p>\n</blockquote>\n<h5 id=\"3-拆箱的缓存机制\"><a href=\"#3-拆箱的缓存机制\" class=\"headerlink\" title=\"3.拆箱的缓存机制\"></a>3.拆箱的缓存机制</h5><blockquote>\n<p><strong>对于 Integer</strong>，在 [-128, 127] 之间只有固定的 256 个值，所以为了避免多次创建对象，事先创建好一个大小为 256 的 Integer 数组 cache，所以如果值在这个范围内，就可以直接返回我们事先创建好的对象即可。</p>\n<p><strong>对于 Double 类型来说</strong>，我们就不能这样做，因为它在这个范围内个数是无限的。 总结一句就是：在某个范围内的整型数值的个数是有限的，而浮点数却不是。所以在 Double 里面的做法很直接，就是直接创建一个对象，所以每次创建的对象都不一样。</p>\n<p>对于 Boolean 类型来说，在内部已经提前创建好两个对象，因为它只有两种情况，这样也是为了避免重复创建太多的对象。因此，每次执行 Boolean#valueOf() 返回的都是相同的对象。</p>\n</blockquote>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结:\"></a>总结:</h4><ul>\n<li>存在拆箱操作时一定要特别注意封装类对象是否为 null。</li>\n<li>包装类和基本数据类型在进行== 运算和算数运算时，会进行自动拆箱。</li>\n<li>equals() 会进行<strong>自动装箱操作</strong>，且需要先判断封装类的类型是否相同，再进一步判断内容是否相同。（==是优先比较基本数据类型，是<strong>拆箱操作</strong>）</li>\n<li>Integer、Short、Byte、Character、Long 这几个类的 valueOf() 的实现是类似的，均在存在 [-128, 127] 的缓存。</li>\n<li>Double、Float 的 valueOf() 的实现是类似的，每次都返回不同的对象。</li>\n<li>Boolean 预先创建了两个对象，Boolean#valueOf() 每次返回的都是相同的对象。</li>\n</ul>\n","categories":["java知识"],"tags":["Java","面试"]},{"title":"限流算法","url":"/2022/08/18/%E9%99%90%E6%B5%81%E7%AE%97%E6%B3%95/","content":"<h1 id=\"限流\"><a href=\"#限流\" class=\"headerlink\" title=\"限流\"></a>限流</h1><p>限流顾名思义就是限制流量，在软件系统中就是限制流量进入软件系统。</p>\n<h1 id=\"为什么要限流？\"><a href=\"#为什么要限流？\" class=\"headerlink\" title=\"为什么要限流？\"></a>为什么要限流？</h1><p>在实际的生活场景中，当一个 web 服务部署到生产环境，也就是我们所说的公网。这个时候就会受到互联网上所有人的访问请求，比如像百度。每天都会有很多人访问 <code>www.baidu.com</code> ，如果有些人不怀好意的拼命的访问这个网站，那么整个系统就会因为这个人的恶作剧，从而浪费了很多不必要的带宽和系统资源。</p>\n<h1 id=\"限流实现\"><a href=\"#限流实现\" class=\"headerlink\" title=\"限流实现\"></a>限流实现</h1><p>因为我们现在的软件系统都是微服务形式的，一个 HTTP 请求可能要经过后端十几个软件服务，最后才能得到结果返回给用户。如果我们对一些请求进行限制，比如只允许某一个 IP 在 10 秒钟内访问 20 次，如果超出了这 20 次，直接最前端就返回 429 状态码。这样就保护了后端十几个服务，避免为这些恶意请求消耗系统资源。</p>\n<h2 id=\"常见的几种限流算法。\"><a href=\"#常见的几种限流算法。\" class=\"headerlink\" title=\"常见的几种限流算法。\"></a>常见的几种限流算法。</h2><p>有想法就会有实现，当前最常见的几种限流算法有<br><strong>固定窗口计数器算法</strong> 、<strong>滑动窗口计数器算法</strong>、<strong>漏桶算法</strong>、令牌桶算法。<br>其中固定窗口计数器算法和滑动窗口计数器算法比较相似，漏桶算法和令牌桶算法比较类似。<br>以下我们用只允许一个 ip 在 10 秒钟内只能访问 20 次这个限流需求来解释这些限流算法</p>\n<h2 id=\"固定窗口算法\"><a href=\"#固定窗口算法\" class=\"headerlink\" title=\"固定窗口算法\"></a>固定窗口算法</h2><p>固定窗口算法就是设置一个固定的时间期限，当第一条请求到来的时候就开始计时同时计数，当接下来的 10 秒中内每来一条请求计数器就＋1。当计数器值到 20 后，接下来的所有请求都拒绝。十秒钟过后重置计数器。<br>但是此算法存在一个缺陷：<br>假设以下一种场景，攻击者在知道限流窗口是 10s 的情况下，先发送一条消息，让限流算法开启计数，此时计数器为 1，然后等到第 9.5 秒的时候持续发送请求攻击，这样 9.5-10 这个时间窗口里面会被允许经过 19 条消息，过了 10 秒后计数器归零，又马上接收了 20 条请求，这样，在 9.5-10.5 这个时间窗口总共接收了 39 条消息，限流值直接放大了一倍(原本是希望最大一秒钟只有 10 条的并发量)</p>\n<p><img src=\"/2022/08/18/%E9%99%90%E6%B5%81%E7%AE%97%E6%B3%95/2754881-20220318110617103-964302552.png\" alt=\"img\"></p>\n<h2 id=\"滑动窗口算法\"><a href=\"#滑动窗口算法\" class=\"headerlink\" title=\"滑动窗口算法\"></a>滑动窗口算法</h2><p>滑动窗口算法就解决了上面固定窗口算法的缺陷。所谓的滑动窗口就是在原有的固定窗口上新增了一个和固定窗口大小一样的窗口，此窗口可以滑动如下图。<br><img src=\"/2022/08/18/%E9%99%90%E6%B5%81%E7%AE%97%E6%B3%95/2754881-20220318111108896-294281716.png\" alt=\"img\"></p>\n<p>当第1条消息来到的时候，10秒的窗口期就生成，此时滑动窗口和第1个窗口重叠。接下来在第9.5秒的时候开始发动请求攻击，在第10秒的那一刻，滑动窗口。所含钙的窗口里面的计数器的值已经达到20，接下来我们假设又过了0.5秒，此时滑动窗口来到10.5秒。这时候滑动窗口涵盖了两个窗口。此时如何计算滑动窗口中计数器的值呢？我们可以假设前面的窗口所过来的流量是按照时间均匀分布的（虽然实际上并不是）。那么这个时候我们就可以计算出一个权重。就是滑动窗口涵盖第1个窗口时间的百分比：9.5/10=0.95。那么我们就假设当前这个窗口中所占有的数据为20*0.95=19。因此接下来我们只能允许通过一条数据。同时我们也可以计算出，10-10.5秒这个区间内算出来的值肯定小于1，因此这个区间内过来的请求全部会拒绝。</p>\n<h2 id=\"漏桶算法\"><a href=\"#漏桶算法\" class=\"headerlink\" title=\"漏桶算法\"></a>漏桶算法</h2><p>漏桶算法的思想类似于小时候的那道数学题，一个水缸一个水龙头放水，一个出水口出水，进水口就是攻击者的请求，放水口就是限流算法允许通过的请求的速率，当水缸满出来了，则将请求拒绝，水缸里的水就是攻击者的请求被缓存起来。<br><img src=\"/2022/08/18/%E9%99%90%E6%B5%81%E7%AE%97%E6%B3%95/2754881-20220318111636851-1034925225.png\" alt=\"img\"></p>\n<p>接下来还是拿上面的例子：假设水缸容量是20，放水速率是每秒2个，当攻击者突然一秒钟打过来30个请求，如果是窗口计数器算法(不管是固定还是滑动窗口)会直接一下子允许20个请求通过剩下10个拒绝，但是接下来剩余窗口时间内不允许有新的请求进来。而漏桶算法则是会缓存这20个请求剩下10个拒绝，然后以每秒2个请求的速率往下游传递。此算法不允许突发流量，永远保证下游的速率一致。</p>\n<h2 id=\"令牌桶算法\"><a href=\"#令牌桶算法\" class=\"headerlink\" title=\"令牌桶算法\"></a>令牌桶算法</h2><p>令牌桶算法则是在漏桶算法上进行了修改。它的思想是假设桶内有很多令牌，同时以固定速率生成令牌放到桶内，如果桶内令牌满则丢弃。当请求过来的时候只要能拿到令牌就能通行。<br>以上面例子为例：桶内存在20个令牌，当同时以每秒2个的速度生成令牌。当一次来30条请求，则由于桶内存在20个令牌，因此前20个请求都会被放行，剩下的10个请求都会被拒绝，接下来如果继续有请求过来的话，就会以每秒2个请求的速率放行，当一段时间没有请求后，桶内令牌又会存满。<br><img src=\"/2022/08/18/%E9%99%90%E6%B5%81%E7%AE%97%E6%B3%95/2754881-20220318111459982-1036389654.png\" alt=\"img\"></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>总共介绍了四种常见的算到，</p>\n<ul>\n<li>固定窗口算法实现简单，但是有缺点就是会超出限流阈值两倍的请求</li>\n<li>滑动窗口可以解决固定窗口超出限流阈值的问题，到时他的计算权重并不是准确的，而是按照时间线将请求平均在时间线上</li>\n<li>漏桶算法不允许一定的突发流量，这有时候可能在特定场景造成请求超时。</li>\n<li>令牌桶允许突发流量</li>\n</ul>\n<p>代码演示实现可以查看:<a href=\"https://blog.csdn.net/yangbindxj/article/details/124396314\">(39条消息) 5种限流算法，7种限流方式，挡住突发流量_文晓武的博客-CSDN博客_限流算法</a></p>\n<p>转自:<a href=\"https://www.cnblogs.com/geeko/p/16020359.html\">几种常见的限流算法 - zhqqqy - 博客园 (cnblogs.com)</a></p>\n","categories":["面试"],"tags":["面试","计算机网络"]},{"title":"Mysql行锁","url":"/2022/09/22/Mysql%E8%A1%8C%E9%94%81/","content":"<h2 id=\"记录锁-Record-Locks\"><a href=\"#记录锁-Record-Locks\" class=\"headerlink\" title=\"记录锁(Record Locks)\"></a><strong>记录锁(Record Locks)</strong></h2><blockquote>\n<p>记录锁是 <strong>封锁记录，记录锁也叫行锁</strong>，例如：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> `test` <span class=\"keyword\">WHERE</span> `id`<span class=\"operator\">=</span><span class=\"number\">1</span> <span class=\"keyword\">FOR</span> <span class=\"keyword\">UPDATE</span>;</span><br></pre></td></tr></table></figure>\n\n<p>它会在 id=1 的记录上加上记录锁，以阻止其他事务插入，更新，删除 id=1 这一行。</p>\n</blockquote>\n<h2 id=\"间隙锁-Gap-Locks-（重点）\"><a href=\"#间隙锁-Gap-Locks-（重点）\" class=\"headerlink\" title=\"间隙锁(Gap Locks)（重点）\"></a><strong>间隙锁(Gap Locks)（重点）</strong></h2><p><strong>间隙锁是封锁索引记录中的间隔</strong>，或者第一条索引记录之前的范围，又或者最后一条索引记录之后的范围。</p>\n<p><strong>产生间隙锁的条件（RR事务隔离级别下；）：</strong></p>\n<ol>\n<li>使用普通索引锁定；</li>\n<li>使用多列唯一索引；</li>\n<li>使用唯一索引锁定多行记录。</li>\n</ol>\n<p>以上情况，都会产生间隙锁：</p>\n<blockquote>\n<p>对于使用唯一索引来搜索并给某一行记录加锁的语句，不会产生间隙锁。（这不包括搜索条件仅包括多列唯一索引的一些列的情况；在这种情况下，会产生间隙锁。）例如，如果id列具有唯一索引，则下面的语句仅对具有id值100的行使用记录锁，并不会产生间隙锁：</p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> child <span class=\"keyword\">WHERE</span> id <span class=\"operator\">=</span> <span class=\"number\">100</span> <span class=\"keyword\">FOR</span> <span class=\"keyword\">UPDATE</span>;</span><br></pre></td></tr></table></figure>\n\n<p>这条语句，就只会产生记录锁，不会产生间隙锁。</p>\n<h2 id=\"唯一索引的间隙锁\"><a href=\"#唯一索引的间隙锁\" class=\"headerlink\" title=\"唯一索引的间隙锁\"></a><strong>唯一索引的间隙锁</strong></h2><p><strong>测试环境：</strong></p>\n<p>环境：MySQL，InnoDB，默认的隔离级别（RR）</p>\n<p>数据表：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> `test` (</span><br><span class=\"line\">  `id` <span class=\"type\">int</span>(<span class=\"number\">1</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> AUTO_INCREMENT,</span><br><span class=\"line\">  `name` <span class=\"type\">varchar</span>(<span class=\"number\">8</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  <span class=\"keyword\">PRIMARY</span> KEY (`id`)</span><br><span class=\"line\">) ENGINE<span class=\"operator\">=</span>InnoDB <span class=\"keyword\">DEFAULT</span> CHARSET<span class=\"operator\">=</span>utf8;</span><br></pre></td></tr></table></figure>\n\n<p>数据：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> `test` <span class=\"keyword\">VALUES</span> (<span class=\"string\">&#x27;1&#x27;</span>, <span class=\"string\">&#x27;小罗&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> `test` <span class=\"keyword\">VALUES</span> (<span class=\"string\">&#x27;5&#x27;</span>, <span class=\"string\">&#x27;小黄&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> `test` <span class=\"keyword\">VALUES</span> (<span class=\"string\">&#x27;7&#x27;</span>, <span class=\"string\">&#x27;小明&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> `test` <span class=\"keyword\">VALUES</span> (<span class=\"string\">&#x27;11&#x27;</span>, <span class=\"string\">&#x27;小红&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>在进行测试之前，我们先来看看test表中存在的隐藏间隙：</p>\n<ol>\n<li>(-infinity, 1]</li>\n<li>(1, 5]</li>\n<li>(5, 7]</li>\n<li>(7, 11]</li>\n<li>(11, +infinity]</li>\n</ol>\n<p><strong>只使用记录锁，不会产生间隙锁</strong></p>\n<p>我们现在进行以下几个事务的测试：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 开启事务1 */</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span>;</span><br><span class=\"line\"><span class=\"comment\">/* 查询 id = 5 的数据并加记录锁 */</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> `test` <span class=\"keyword\">WHERE</span> `id` <span class=\"operator\">=</span> <span class=\"number\">5</span> <span class=\"keyword\">FOR</span> <span class=\"keyword\">UPDATE</span>;</span><br><span class=\"line\"><span class=\"comment\">/* 延迟30秒执行，防止锁释放 */</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> SLEEP(<span class=\"number\">30</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"># 注意：以下的语句不是放在一个事务中执行，而是分开多次执行，每次事务中只有一条添加语句</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 事务2插入一条 name = &#x27;小张&#x27; 的数据 */</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> `test` (`id`, `name`) <span class=\"keyword\">VALUES</span> (<span class=\"number\">4</span>, <span class=\"string\">&#x27;小张&#x27;</span>); # 正常执行</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 事务3插入一条 name = &#x27;小张&#x27; 的数据 */</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> `test` (`id`, `name`) <span class=\"keyword\">VALUES</span> (<span class=\"number\">8</span>, <span class=\"string\">&#x27;小东&#x27;</span>); # 正常执行</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 提交事务1，释放事务1的锁 */</span></span><br><span class=\"line\"><span class=\"keyword\">COMMIT</span>;</span><br></pre></td></tr></table></figure>\n\n<p>上诉的案例，由于主键是唯一索引，而且是只使用一个索引查询，并且只锁定一条记录，所以以上的例子，只会对 id = 5 的数据加上记录锁，而不会产生间隙锁。</p>\n<p><strong>产生间隙锁</strong></p>\n<p>然后回滚事务测试，我们继续在 id 唯一索引列上做以下的测试：</p>\n<p><img src=\"/2022/09/22/Mysql%E8%A1%8C%E9%94%81/image-20220922223922184.png\" alt=\"image-20220922223922184\"></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 开启事务1 */</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span>;</span><br><span class=\"line\"><span class=\"comment\">/* 查询 id 在 5 - 7 范围的数据并加记录锁 */</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> `test` <span class=\"keyword\">WHERE</span> `id` <span class=\"keyword\">BETWEEN</span> <span class=\"number\">5</span> <span class=\"keyword\">AND</span> <span class=\"number\">7</span> <span class=\"keyword\">FOR</span> <span class=\"keyword\">UPDATE</span>;</span><br><span class=\"line\"><span class=\"comment\">/* 延迟30秒执行，防止锁释放 */</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> SLEEP(<span class=\"number\">30</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"># 注意：以下的语句不是放在一个事务中执行，而是分开多次执行，每次事务中只有一条添加语句</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 事务2插入一条 id = 3，name = &#x27;小张1&#x27; 的数据 */</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> `test` (`id`, `name`) <span class=\"keyword\">VALUES</span> (<span class=\"number\">3</span>, <span class=\"string\">&#x27;小张1&#x27;</span>); # 正常执行</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 事务3插入一条 id = 4，name = &#x27;小白&#x27; 的数据 */</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> `test` (`id`, `name`) <span class=\"keyword\">VALUES</span> (<span class=\"number\">4</span>, <span class=\"string\">&#x27;小白&#x27;</span>); # 正常执行</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 事务4插入一条 id = 6，name = &#x27;小东&#x27; 的数据 */</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> `test` (`id`, `name`) <span class=\"keyword\">VALUES</span> (<span class=\"number\">6</span>, <span class=\"string\">&#x27;小东&#x27;</span>); # 阻塞</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 事务5插入一条 id = 8， name = &#x27;大罗&#x27; 的数据 */</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> `test` (`id`, `name`) <span class=\"keyword\">VALUES</span> (<span class=\"number\">8</span>, <span class=\"string\">&#x27;大罗&#x27;</span>); # 正常执行</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 事务6插入一条 id = 9， name = &#x27;大东&#x27; 的数据 */</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> `test` (`id`, `name`) <span class=\"keyword\">VALUES</span> (<span class=\"number\">9</span>, <span class=\"string\">&#x27;大东&#x27;</span>); # 正常执行</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 事务7插入一条 id = 11， name = &#x27;李西&#x27; 的数据 */</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> `test` (`id`, `name`) <span class=\"keyword\">VALUES</span> (<span class=\"number\">11</span>, <span class=\"string\">&#x27;李西&#x27;</span>); # 正常执行</span><br><span class=\"line\"><span class=\"comment\">/* 事务8插入一条 id = 12， name = &#x27;张三&#x27; 的数据 */</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> `test` (`id`, `name`) <span class=\"keyword\">VALUES</span> (<span class=\"number\">12</span>, <span class=\"string\">&#x27;张三&#x27;</span>); # 正常执行</span><br><span class=\"line\"><span class=\"comment\">/* 提交事务1，释放事务1的锁 */</span></span><br><span class=\"line\"><span class=\"keyword\">COMMIT</span>;</span><br></pre></td></tr></table></figure>\n\n<p>从上面我们可以看到[5,7]这一个区间，都不可插入数据，其它区间，都可以正常插入数据。所以我们可以得出结论：<strong>当我们给 [5,7]这个区间加锁的时候，会锁住 [5,7]这一个区间。</strong></p>\n<p>我们再来测试如果我们锁住不存在的数据时，会怎样：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 开启事务1 */</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span>;</span><br><span class=\"line\"><span class=\"comment\">/* 查询 id = 3 这一条不存在的数据并加记录锁 */</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> `test` <span class=\"keyword\">WHERE</span> `id` <span class=\"operator\">=</span> <span class=\"number\">3</span> <span class=\"keyword\">FOR</span> <span class=\"keyword\">UPDATE</span>;</span><br><span class=\"line\"><span class=\"comment\">/* 延迟30秒执行，防止锁释放 */</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> SLEEP(<span class=\"number\">30</span>);</span><br><span class=\"line\"># 注意：以下的语句不是放在一个事务中执行，而是分开多次执行，每次事务中只有一条添加语句</span><br><span class=\"line\"><span class=\"comment\">/* 事务2插入一条 id = 3，name = &#x27;小张1&#x27; 的数据 */</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> `test` (`id`, `name`) <span class=\"keyword\">VALUES</span> (<span class=\"number\">2</span>, <span class=\"string\">&#x27;小张1&#x27;</span>); # 阻塞</span><br><span class=\"line\"><span class=\"comment\">/* 事务3插入一条 id = 4，name = &#x27;小白&#x27; 的数据 */</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> `test` (`id`, `name`) <span class=\"keyword\">VALUES</span> (<span class=\"number\">4</span>, <span class=\"string\">&#x27;小白&#x27;</span>); # 阻塞</span><br><span class=\"line\"><span class=\"comment\">/* 事务4插入一条 id = 6，name = &#x27;小东&#x27; 的数据 */</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> `test` (`id`, `name`) <span class=\"keyword\">VALUES</span> (<span class=\"number\">6</span>, <span class=\"string\">&#x27;小东&#x27;</span>); # 正常执行</span><br><span class=\"line\"><span class=\"comment\">/* 事务5插入一条 id = 8， name = &#x27;大罗&#x27; 的数据 */</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> `test` (`id`, `name`) <span class=\"keyword\">VALUES</span> (<span class=\"number\">8</span>, <span class=\"string\">&#x27;大罗&#x27;</span>); # 正常执行</span><br><span class=\"line\"><span class=\"comment\">/* 提交事务1，释放事务1的锁 */</span></span><br><span class=\"line\"><span class=\"keyword\">COMMIT</span>;</span><br></pre></td></tr></table></figure>\n\n<p>我们可以看出，指定查询某一条记录时，如果这条记录不存在，会产生间隙锁。</p>\n<p><strong>结论</strong></p>\n<ol>\n<li>对于指定查询某一条记录的加锁语句，<strong>如果该记录不存在，会产生记录锁和间隙锁，如果记录存在，则只会产生记录锁</strong>，如：WHERE <code>id</code> = 5 FOR UPDATE;</li>\n<li>对于查找某一范围内的查询语句，会产生间隙锁，如：WHERE <code>id</code> BETWEEN 5 AND 7 FOR UPDATE;</li>\n</ol>\n<h2 id=\"普通索引的间隙锁\"><a href=\"#普通索引的间隙锁\" class=\"headerlink\" title=\"普通索引的间隙锁\"></a><strong>普通索引的间隙锁</strong></h2><p><strong>数据准备</strong></p>\n<p>创建 test1 表：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 注意：number 不是唯一值</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> `test1` (</span><br><span class=\"line\">  `id` <span class=\"type\">int</span>(<span class=\"number\">1</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> AUTO_INCREMENT,</span><br><span class=\"line\">  `number` <span class=\"type\">int</span>(<span class=\"number\">1</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;数字&#x27;</span>,</span><br><span class=\"line\">  <span class=\"keyword\">PRIMARY</span> KEY (`id`),</span><br><span class=\"line\">  KEY `number` (`number`) <span class=\"keyword\">USING</span> BTREE</span><br><span class=\"line\">) ENGINE<span class=\"operator\">=</span>InnoDB AUTO_INCREMENT<span class=\"operator\">=</span><span class=\"number\">1</span> <span class=\"keyword\">DEFAULT</span> CHARSET<span class=\"operator\">=</span>utf8;</span><br></pre></td></tr></table></figure>\n\n<p>在这张表上，我们有 id number 这两个字段，id 是我们的主键，我们在 number 上，建立了一个普通索引，为了方便我们后面的测试。现在我们要先加一些数据：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> `test1` <span class=\"keyword\">VALUES</span> (<span class=\"number\">1</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> `test1` <span class=\"keyword\">VALUES</span> (<span class=\"number\">5</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> `test1` <span class=\"keyword\">VALUES</span> (<span class=\"number\">7</span>, <span class=\"number\">8</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> `test1` <span class=\"keyword\">VALUES</span> (<span class=\"number\">11</span>, <span class=\"number\">12</span>);</span><br></pre></td></tr></table></figure>\n\n<p>在进行测试之前，我们先来看看test1表中 number 索引存在的隐藏间隙：</p>\n<ol>\n<li>(-infinity, 1]</li>\n<li>(1, 3]</li>\n<li>(3, 8]</li>\n<li>(8, 12]</li>\n<li>(12, +infinity]</li>\n</ol>\n<p><strong>案例说明</strong></p>\n<p>我们执行以下的事务（事务1最后提交），分别执行下面的语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 开启事务1 */</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span>;</span><br><span class=\"line\"><span class=\"comment\">/* 查询 number = 3 的数据并加记录锁 */</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> `test1` <span class=\"keyword\">WHERE</span> `number` <span class=\"operator\">=</span> <span class=\"number\">3</span> <span class=\"keyword\">FOR</span> <span class=\"keyword\">UPDATE</span>;</span><br><span class=\"line\"><span class=\"comment\">/* 延迟30秒执行，防止锁释放 */</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> SLEEP(<span class=\"number\">30</span>);</span><br><span class=\"line\"># 注意：以下的语句不是放在一个事务中执行，而是分开多次执行，每次事务中只有一条添加语句</span><br><span class=\"line\"><span class=\"comment\">/* 事务2插入一条 number = 0 的数据 */</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> `test1` (`number`) <span class=\"keyword\">VALUES</span> (<span class=\"number\">0</span>); # 正常执行</span><br><span class=\"line\"><span class=\"comment\">/* 事务3插入一条 number = 1 的数据 */</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> `test1` (`number`) <span class=\"keyword\">VALUES</span> (<span class=\"number\">1</span>); # 被阻塞</span><br><span class=\"line\"><span class=\"comment\">/* 事务4插入一条 number = 2 的数据 */</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> `test1` (`number`) <span class=\"keyword\">VALUES</span> (<span class=\"number\">2</span>); # 被阻塞</span><br><span class=\"line\"><span class=\"comment\">/* 事务5插入一条 number = 4 的数据 */</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> `test1` (`number`) <span class=\"keyword\">VALUES</span> (<span class=\"number\">4</span>); # 被阻塞</span><br><span class=\"line\"><span class=\"comment\">/* 事务6插入一条 number = 8 的数据 */</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> `test1` (`number`) <span class=\"keyword\">VALUES</span> (<span class=\"number\">8</span>); # 正常执行</span><br><span class=\"line\"><span class=\"comment\">/* 事务7插入一条 number = 9 的数据 */</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> `test1` (`number`) <span class=\"keyword\">VALUES</span> (<span class=\"number\">9</span>); # 正常执行</span><br><span class=\"line\"><span class=\"comment\">/* 事务8插入一条 number = 10 的数据 */</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> `test1` (`number`) <span class=\"keyword\">VALUES</span> (<span class=\"number\">10</span>); # 正常执行</span><br><span class=\"line\"><span class=\"comment\">/* 提交事务1 */</span></span><br><span class=\"line\"><span class=\"keyword\">COMMIT</span>;</span><br></pre></td></tr></table></figure>\n\n<p>我们会发现有些语句可以正常执行，有些语句被阻塞了。我们再来看看我们表中的数据：</p>\n<p><img src=\"/2022/09/22/Mysql%E8%A1%8C%E9%94%81/v2-bd416a32e5f1740be516a61665ba285b_720w.jpg\" alt=\"img\">执行之后的数据</p>\n<p>这里可以看到，number (1 - 8) 的间隙中，插入语句都被阻塞了，而不在这个范围内的语句，正常执行，这就是因为有间隙锁的原因。我们再进行以下的测试，方便我们更好的理解间隙锁的区域（我们要将数据还原成原来的那样）：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 开启事务1 */</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span>;</span><br><span class=\"line\"><span class=\"comment\">/* 查询 number = 3 的数据并加记录锁 */</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> `test1` <span class=\"keyword\">WHERE</span> `number` <span class=\"operator\">=</span> <span class=\"number\">3</span> <span class=\"keyword\">FOR</span> <span class=\"keyword\">UPDATE</span>;</span><br><span class=\"line\"><span class=\"comment\">/* 延迟30秒执行，防止锁释放 */</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> SLEEP(<span class=\"number\">30</span>);</span><br><span class=\"line\"><span class=\"comment\">/* 事务1插入一条 id = 2， number = 1 的数据 */</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> `test1` (`id`, `number`) <span class=\"keyword\">VALUES</span> (<span class=\"number\">2</span>, <span class=\"number\">1</span>); # 阻塞</span><br><span class=\"line\"><span class=\"comment\">/* 事务2插入一条 id = 3， number = 2 的数据 */</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> `test1` (`id`, `number`) <span class=\"keyword\">VALUES</span> (<span class=\"number\">3</span>, <span class=\"number\">2</span>); # 阻塞</span><br><span class=\"line\"><span class=\"comment\">/* 事务3插入一条 id = 6， number = 8 的数据 */</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> `test1` (`id`, `number`) <span class=\"keyword\">VALUES</span> (<span class=\"number\">6</span>, <span class=\"number\">8</span>); # 阻塞</span><br><span class=\"line\"><span class=\"comment\">/* 事务4插入一条 id = 8， number = 8 的数据 */</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> `test1` (`id`, `number`) <span class=\"keyword\">VALUES</span> (<span class=\"number\">8</span>, <span class=\"number\">8</span>); # 正常执行</span><br><span class=\"line\"><span class=\"comment\">/* 事务5插入一条 id = 9， number = 9 的数据 */</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> `test1` (`id`, `number`) <span class=\"keyword\">VALUES</span> (<span class=\"number\">9</span>, <span class=\"number\">9</span>); # 正常执行</span><br><span class=\"line\"><span class=\"comment\">/* 事务6插入一条 id = 10， number = 12 的数据 */</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> `test1` (`id`, `number`) <span class=\"keyword\">VALUES</span> (<span class=\"number\">10</span>, <span class=\"number\">12</span>); # 正常执行</span><br><span class=\"line\"><span class=\"comment\">/* 事务7修改 id = 11， number = 12 的数据 */</span></span><br><span class=\"line\"><span class=\"keyword\">UPDATE</span> `test1` <span class=\"keyword\">SET</span> `number` <span class=\"operator\">=</span> <span class=\"number\">5</span> <span class=\"keyword\">WHERE</span> `id` <span class=\"operator\">=</span> <span class=\"number\">11</span> <span class=\"keyword\">AND</span> `number` <span class=\"operator\">=</span> <span class=\"number\">12</span>; # 阻塞</span><br><span class=\"line\"><span class=\"comment\">/* 提交事务1 */</span></span><br><span class=\"line\"><span class=\"keyword\">COMMIT</span>;</span><br></pre></td></tr></table></figure>\n\n<p>我们来看看结果：</p>\n<p><img src=\"/2022/09/22/Mysql%E8%A1%8C%E9%94%81/v2-60d83dfa236fb4a25ab4c3a5df45b0d0_720w.jpg\" alt=\"img\">执行后的数据</p>\n<p>这里有一个奇怪的现象：</p>\n<ul>\n<li>事务3添加 id = 6，number = 8 的数据，给阻塞了；</li>\n<li>事务4添加 id = 8，number = 8 的数据，正常执行了。</li>\n<li>事务7将 id = 11，number = 12 的数据修改为 id = 11， number = 5的操作，给阻塞了；</li>\n</ul>\n<p>这是为什么呢？我们来看看下边的图，大家就明白了。</p>\n<p><img src=\"/2022/09/22/Mysql%E8%A1%8C%E9%94%81/v2-e5fe73d5f7fda8c298ce60fd35915885_720w.jpg\" alt=\"img\">隐藏的间隙锁图</p>\n<p>从图中可以看出，当 number 相同时，会根据主键 id 来排序，所以：</p>\n<ol>\n<li>事务3添加的 id = 6，number = 8，根据id排序,这条数据是在 （3, 8） 的区间里边，所以会被阻塞；</li>\n<li>事务4添加的 id = 8，number = 8，根据id排序,这条数据则是在（8, 12）区间里边，所以不会被阻塞；</li>\n<li>事务7的修改语句相当于在 （3, 8） 的区间里边插入一条数据，所以也被阻塞了。</li>\n</ol>\n<p><strong>结论</strong></p>\n<ol>\n<li>在普通索引列上，<strong>不管是何种查询，只要加锁，都会产生间隙锁，这跟唯一索引不一样；</strong></li>\n<li>在普通索引跟唯一索引中，数据间隙的分析，数据行是优先根据普通索引排序，再根据唯一索引排序。</li>\n</ol>\n<h2 id=\"临键锁-Next-key-Locks\"><a href=\"#临键锁-Next-key-Locks\" class=\"headerlink\" title=\"临键锁(Next-key Locks)\"></a><strong>临键锁(Next-key Locks)</strong></h2><p><strong>临键锁</strong>，是<strong>记录锁与间隙锁的组合</strong>，它的封锁范围，既包含索引记录，又包含索引区间。</p>\n<p><strong>注：</strong>临键锁的主要目的，也是为了避免<strong>幻读</strong>(Phantom Read)。如果把事务的隔离级别降级为RC，临键锁则也会失效。</p>\n<p><strong>只使用记录锁，不会产生间隙锁</strong></p>\n<p>我们现在进行以下几个事务的测试：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 开启事务1 */</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span>;</span><br><span class=\"line\"><span class=\"comment\">/* 查询 id = 5 的数据并加记录锁 */</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> `test` <span class=\"keyword\">WHERE</span> `id` <span class=\"operator\">=</span> <span class=\"number\">5</span> <span class=\"keyword\">FOR</span> <span class=\"keyword\">UPDATE</span>;</span><br><span class=\"line\"><span class=\"comment\">/* 延迟30秒执行，防止锁释放 */</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> SLEEP(<span class=\"number\">30</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"># 注意：以下的语句不是放在一个事务中执行，而是分开多次执行，每次事务中只有一条添加语句</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 事务2插入一条 name = &#x27;小张&#x27; 的数据 */</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> `test` (`id`, `name`) <span class=\"keyword\">VALUES</span> (<span class=\"number\">4</span>, <span class=\"string\">&#x27;小张&#x27;</span>); # 正常执行</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 事务3插入一条 name = &#x27;小张&#x27; 的数据 */</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> `test` (`id`, `name`) <span class=\"keyword\">VALUES</span> (<span class=\"number\">8</span>, <span class=\"string\">&#x27;小东&#x27;</span>); # 正常执行</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 提交事务1，释放事务1的锁 */</span></span><br><span class=\"line\"><span class=\"keyword\">COMMIT</span>;</span><br></pre></td></tr></table></figure>\n\n<p>上诉的案例，由于主键是唯一索引，而且是只使用一个索引查询，并且只锁定一条记录，所以以上的例子，只会对 id = 5 的数据加上记录锁，而不会产生间隙锁。</p>\n<ol>\n<li>记录锁、间隙锁、临键锁，都属于排它锁；</li>\n<li>记录锁就是锁住一行记录；</li>\n<li>间隙锁只有在事务隔离级别 RR 中才会产生；</li>\n<li>唯一索引只有锁住多条记录或者一条不存在的记录的时候，才会产生间隙锁，指定给某条存在的记录加锁的时候，只会加记录锁，不会产生间隙锁；</li>\n<li>普通索引不管是锁住单条，还是多条记录，都会产生间隙锁；</li>\n<li>间隙锁会封锁该条记录相邻两个键之间的空白区域，防止其它事务在这个区域内插入、修改、删除数据，这是为了防止出现 幻读 现象；</li>\n<li>普通索引的间隙，优先以普通索引排序，然后再根据主键索引排序（多普通索引情况还未研究）；</li>\n<li>事务级别是RC（读已提交）级别的话，间隙锁将会失效。</li>\n</ol>\n","categories":["面试"],"tags":["面试","Mysql"]},{"title":"Redis客户端","url":"/2022/09/24/Redis%E5%AE%A2%E6%88%B7%E7%AB%AF/","content":"<p>下面介绍一下在Java程序中如何使用Redis客户端</p>\n<h2 id=\"Jedis\"><a href=\"#Jedis\" class=\"headerlink\" title=\"Jedis\"></a>Jedis</h2><blockquote>\n<p>Maven依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>redis.clients<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jedis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.6.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"简单使用\"><a href=\"#简单使用\" class=\"headerlink\" title=\"简单使用\"></a>简单使用</h3><h4 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;<span class=\"comment\">//输出结果: OK</span></span><br><span class=\"line\">jedis.set(<span class=\"string\">&quot;hello&quot;</span>, <span class=\"string\">&quot;world&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">//输出结果: world</span></span><br><span class=\"line\">jedis.get(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">//输出结果:1</span></span><br><span class=\"line\">jedis.incr(<span class=\"string\">&quot;counter&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"哈希\"><a href=\"#哈希\" class=\"headerlink\" title=\"哈希\"></a>哈希</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;jedis.hset(<span class=\"string\">&quot;myhash&quot;</span>, <span class=\"string\">&quot;f1&quot;</span>, <span class=\"string\">&quot;v1&quot;</span>);</span><br><span class=\"line\">jedis.hset(<span class=\"string\">&quot;myhash&quot;</span>, <span class=\"string\">&quot;f2&quot;</span>, <span class=\"string\">&quot;v2&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">//输出结果 : &#123;f1=v1, f2=v2&#125;</span></span><br><span class=\"line\">jedis.hgetAll(<span class=\"string\">&quot;myhash&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;jedis.rpush(<span class=\"string\">&quot;mylist&quot;</span>, <span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">jedis.rpush(<span class=\"string\">&quot;mylist&quot;</span>, <span class=\"string\">&quot;2&quot;</span>);</span><br><span class=\"line\">jedis.rpush(<span class=\"string\">&quot;mylist&quot;</span>, <span class=\"string\">&quot;3&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">//输出结果 : [1, 2, 3]</span></span><br><span class=\"line\">jedis.lrange(<span class=\"string\">&quot;mylist&quot;</span>, <span class=\"number\">0</span>, -<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"集合\"><a href=\"#集合\" class=\"headerlink\" title=\"集合\"></a>集合</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;jedis.sadd(<span class=\"string\">&quot; myset&quot;</span>, <span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\">jedis.sadd(<span class=\"string\">&quot; myset&quot;</span>, <span class=\"string\">&quot;b&quot;</span>);</span><br><span class=\"line\">jedis.sadd(<span class=\"string\">&quot; myset&quot;</span>, <span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">//输出结果 : [b, a]</span></span><br><span class=\"line\">jedis.smembers(<span class=\"string\">&quot;myset&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"有序集合\"><a href=\"#有序集合\" class=\"headerlink\" title=\"有序集合\"></a>有序集合</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;jedis.zadd(<span class=\"string\">&quot;myzset&quot;</span>, <span class=\"number\">99</span>, <span class=\"string\">&quot;tom&quot;</span>);</span><br><span class=\"line\">jedis.zadd(<span class=\"string\">&quot;myzset&quot;</span>, <span class=\"number\">66</span>, <span class=\"string\">&quot;peter&quot;</span>);</span><br><span class=\"line\">jedis.zadd(<span class=\"string\">&quot;myzset&quot;</span>, <span class=\"number\">33</span>, <span class=\"string\">&quot;james&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">//输出结果 : [[[&quot;james&quot;],33.0], [[&quot;peter&quot;],66.0], [[&quot;tom&quot;],99.0]]</span></span><br><span class=\"line\">jedis.zrangeWithScores(<span class=\"string\">&quot;myzset&quot;</span>, <span class=\"number\">0</span>, -<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Jedis连接池\"><a href=\"#Jedis连接池\" class=\"headerlink\" title=\"Jedis连接池\"></a>Jedis连接池</h3><h4 id=\"jedis直连\"><a href=\"#jedis直连\" class=\"headerlink\" title=\"jedis直连\"></a>jedis直连</h4><p>每次操作创建一个jedis对象，执行完毕后关闭连接，对应的就是一次Tcp连接。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//生成一个jedis对象，这个对象负责和指定Redis节点进行通信</span></span><br><span class=\"line\"> <span class=\"type\">Jedis</span> <span class=\"variable\">jedis</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Jedis</span>(<span class=\"string\">&quot;119.23.226.29&quot;</span>, <span class=\"number\">6379</span>);</span><br><span class=\"line\">    <span class=\"comment\">//带密码需要执行认证方法</span></span><br><span class=\"line\">    <span class=\"comment\">//jedis.auth(&quot;123456&quot;);</span></span><br><span class=\"line\">    jedis.set(<span class=\"string\">&quot;hello&quot;</span>, <span class=\"string\">&quot;world&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">value</span> <span class=\"operator\">=</span> jedis.get(<span class=\"string\">&quot;hello&quot;</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"jedis连接池\"><a href=\"#jedis连接池\" class=\"headerlink\" title=\"jedis连接池\"></a>jedis连接池</h4><p>预先生成一批jedis连接对象放入连接池中，当需要对redis进行操作时从连接池中借用jedis对象，操作完成后归还。这样jedis对象可以重复使用，避免了频繁创建socket连接，节省了连接开销。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;<span class=\"type\">JedisPool</span> <span class=\"variable\">pool</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">JedisPool</span>(<span class=\"string\">&quot;127.0.0.1&quot;</span>, <span class=\"number\">6379</span>);</span><br><span class=\"line\"><span class=\"type\">Jedis</span> <span class=\"variable\">jedis</span> <span class=\"operator\">=</span> pool.getResource();</span><br><span class=\"line\">jedis.set(<span class=\"string\">&quot;hello&quot;</span>, <span class=\"string\">&quot;world&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">value</span> <span class=\"operator\">=</span> jedis.get(<span class=\"string\">&quot;hello&quot;</span>);</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h2 id=\"lettuce\"><a href=\"#lettuce\" class=\"headerlink\" title=\"lettuce\"></a>lettuce</h2><blockquote>\n<p>Lettuce 是一个可伸缩线程安全的 Redis 客户端。多个线程可以共享同一个 RedisConnection。它利用优秀 netty NIO 框架来高效地管理多个连接。</p>\n<p>RedisURI是redis连接的一些标准信息，比如需要提供数据库名称，密码，url，超时时间等。有三种方式可以创建：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">RedisURI.create(<span class=\"string\">&quot;redis://localhost/&quot;</span>);</span><br><span class=\"line\">RedisURI.Builder.redis(<span class=\"string\">&quot;localhost&quot;</span>, <span class=\"number\">6379</span>).auth(<span class=\"string\">&quot;password&quot;</span>).database(<span class=\"number\">1</span>).build();</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">RedisURI</span>(<span class=\"string\">&quot;localhost&quot;</span>, <span class=\"number\">6379</span>, <span class=\"number\">60</span>, TimeUnit.SECONDS);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">事务命令</span><br><span class=\"line\">multi：用于标记事务块的开始,Redis会将后续的命令逐个放入队列中，然后使用exec原子化地执行这个命令队列</span><br><span class=\"line\">exec：执行命令队列</span><br><span class=\"line\">discard：清除命令队列</span><br><span class=\"line\">watch：监视key</span><br><span class=\"line\">unwatch：清除监视key</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">RedisURI</span> <span class=\"variable\">redisUri</span> <span class=\"operator\">=</span> RedisURI.builder()<span class=\"comment\">// &lt;1&gt; 创建单机连接的连接信息</span></span><br><span class=\"line\">        .withHost(<span class=\"string\">&quot;127.0.0.1&quot;</span>)</span><br><span class=\"line\">        .withPort(<span class=\"number\">6379</span>)</span><br><span class=\"line\">        .withTimeout(Duration.of(<span class=\"number\">10</span>, ChronoUnit.SECONDS))</span><br><span class=\"line\">        .build();</span><br><span class=\"line\"><span class=\"type\">RedisClient</span> <span class=\"variable\">redisClient</span> <span class=\"operator\">=</span> RedisClient.create(redisUri);<span class=\"comment\">// &lt;2&gt; 创建客户端</span></span><br><span class=\"line\">GenericObjectPool&lt;StatefulRedisConnection&lt;String, String&gt;&gt; genericObjectPool = ConnectionPoolSupport.createGenericObjectPool(() -&gt; redisClient.connect(), <span class=\"keyword\">new</span> <span class=\"title class_\">GenericObjectPoolConfig</span>&lt;&gt;());</span><br><span class=\"line\">StatefulRedisConnection&lt;String, String&gt; connection = genericObjectPool.borrowObject();</span><br><span class=\"line\"><span class=\"comment\">//StatefulRedisConnection&lt;String, String&gt; connection = redisClient.connect();// &lt;3&gt; 创建线程安全的连接</span></span><br><span class=\"line\">RedisCommands&lt;String, String&gt; redisCommands = connection.sync();<span class=\"comment\">// &lt;4&gt; 创建同步命令</span></span><br><span class=\"line\"><span class=\"comment\">//redisCommands.multi();</span></span><br><span class=\"line\"><span class=\"comment\">//redisCommands.set(&quot;key&quot;, &quot;value&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">//redisCommands.set(&quot;key2&quot;, &quot;value2&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">//redisCommands.exec();</span></span><br><span class=\"line\"><span class=\"type\">SetArgs</span> <span class=\"variable\">setArgs</span> <span class=\"operator\">=</span> SetArgs.Builder.nx().ex(<span class=\"number\">5</span>);</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> redisCommands.set(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;chen&quot;</span>, setArgs);</span><br><span class=\"line\">System.out.println(result);</span><br><span class=\"line\">result = redisCommands.get(<span class=\"string\">&quot;name&quot;</span>);</span><br><span class=\"line\">System.out.println(result);</span><br><span class=\"line\"><span class=\"comment\">// ... 其他操作</span></span><br><span class=\"line\">connection.close();<span class=\"comment\">// &lt;5&gt; 关闭连接</span></span><br><span class=\"line\">redisClient.shutdown();<span class=\"comment\">// &lt;6&gt; 关闭客户端</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n<h2 id=\"Redisson\"><a href=\"#Redisson\" class=\"headerlink\" title=\"Redisson\"></a>Redisson</h2><blockquote>\n<p>Redisson - 是一个高级的分布式协调Redis客服端，能帮助用户在分布式环境中轻松实现一些Java的对象，Redisson、Jedis、Lettuce 是三个不同的操作 Redis 的客户端，Jedis、Lettuce 的 API 更侧重对 Reids 数据库的 CRUD（增删改查），而 Redisson API 侧重于分布式开发</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Config</span> <span class=\"variable\">config</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Config</span>();</span><br><span class=\"line\">config.useSingleServer().setAddress(<span class=\"string\">&quot;redis://127.0.0.1:6379&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">RedissonClient</span> <span class=\"variable\">redissonClient</span> <span class=\"operator\">=</span> Redisson.create(config);</span><br><span class=\"line\">redissonClient.getBucket(<span class=\"string\">&quot;name&quot;</span>).set(<span class=\"string\">&quot;chen&quot;</span>);</span><br><span class=\"line\">System.out.println(redissonClient.getBucket(<span class=\"string\">&quot;name&quot;</span>).get());</span><br></pre></td></tr></table></figure>\n\n<p><strong>之后有机会好好的补充一下</strong></p>\n</blockquote>\n<h1 id=\"lua脚本\"><a href=\"#lua脚本\" class=\"headerlink\" title=\"lua脚本\"></a>lua脚本</h1><blockquote>\n<h3 id=\"Redis中为什么引入Lua脚本？\"><a href=\"#Redis中为什么引入Lua脚本？\" class=\"headerlink\" title=\"Redis中为什么引入Lua脚本？\"></a>Redis中为什么引入Lua脚本？</h3><p>Redis是高性能的key-value<strong>内存数据库</strong>，它帮助我们解决了大部分业务问题；提供丰富的指令集合，据官网上统计有200多个命令。这些命令显然已经满足了我们的常规的业务场景需求。但是在某些特殊的场景下，业务需要<strong>原子性</strong>操作，redis原有的命令是无法完成，所以需要额外开发实现原子操作。</p>\n<p>因为这样的问题，Redis为开发者提供了<code>lua</code>脚本的支持，用户可以向服务器发送lua脚本来执行<strong>自定义动作</strong>，以此获取脚本的响应数据。Redis本身又是<strong>单线程执行</strong>lua脚本，保证了lua脚本在处理逻辑过程中<strong>不会被任意其它请求打断</strong>。</p>\n<h3 id=\"什么是Lua\"><a href=\"#什么是Lua\" class=\"headerlink\" title=\"什么是Lua\"></a>什么是Lua</h3><p>Lua是一种轻量<strong>小巧</strong>的<strong>脚本语言</strong>，用标准C语言编写并以源代码形式开放。</p>\n<p>其设计目的就是为了嵌入应用程序中，从而为应用程序提供灵活的扩展和定制功能。因为广泛的应用于：游戏开发、独立应用脚本、Web 应用脚本、扩展和数据库插件等。</p>\n<p>比如：Lua脚本用在很多游戏上，主要是Lua脚本可以嵌入到其他程序中运行，游戏升级的时候，可以直接升级脚本，而不用重新安装游戏。</p>\n<h3 id=\"使用Lua脚本的好处：\"><a href=\"#使用Lua脚本的好处：\" class=\"headerlink\" title=\"使用Lua脚本的好处：\"></a>使用Lua脚本的好处：</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">① 支持原子性操作 - Redis会将整个脚本作为一个整体执行，中间不会被其他请求插入。因此在脚本运行过程中无需担心会出现竞态条件，无需使用事务</span><br><span class=\"line\"></span><br><span class=\"line\">② 降低网络开销 - 将多个请求通过脚本的形式一次发送到服务器，减少了网络的时延</span><br><span class=\"line\"></span><br><span class=\"line\">③ 脚本复用    - 客户端发送的脚本可支持永久存在redis中，这样其他客户端可以复用这一脚本，而不需要使用代码完成相同的逻辑。</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h2 id=\"Redis中Lua的常用命令\"><a href=\"#Redis中Lua的常用命令\" class=\"headerlink\" title=\"Redis中Lua的常用命令\"></a>Redis中Lua的常用命令</h2><blockquote>\n<p>命令不多，就下面这几个：<br>- EVAL<br>- EVALSHA<br>- SCRIPT LOAD - SCRIPT EXISTS<br>- SCRIPT FLUSH<br>- SCRIPT KILL</p>\n<h3 id=\"EVAL命令\"><a href=\"#EVAL命令\" class=\"headerlink\" title=\"EVAL命令\"></a>EVAL命令</h3><p>命令格式：<code>EVAL script numkeys key [key …] arg [arg …]</code><br>- <code>script</code>参数是一段 Lua5.1 脚本程序。脚本不必(也不应该)定义为一个 Lua 函数<br>- <code>numkeys</code>指定后续参数有几个key，即：key [key …]中key的个数。如没有key，则为0<br>- <code>key [key …]</code> 从 EVAL 的第三个参数开始算起，表示在脚本中所用到的那些 Redis 键(key)。在Lua脚本中通过KEYS[1], KEYS[2]获取。<br>- <code>arg [arg …]</code> 附加参数。在Lua脚本中通过ARGV[1],ARGV[2]获取。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">// 例1：numkeys=1，keys数组只有1个元素key1，arg数组无元素</span><br><span class=\"line\">127.0.0.1:6379&gt; EVAL &quot;return KEYS[1]&quot; 1 key1</span><br><span class=\"line\">&quot;key1&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">// 例2：numkeys=0，keys数组无元素，arg数组元素中有1个元素value1</span><br><span class=\"line\">127.0.0.1:6379&gt; EVAL &quot;return ARGV[1]&quot; 0 value1</span><br><span class=\"line\">&quot;value1&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">// 例3：numkeys=2，keys数组有两个元素key1和key2，arg数组元素中有两个元素first和second </span><br><span class=\"line\">//      其实&#123;KEYS[1],KEYS[2],ARGV[1],ARGV[2]&#125;表示的是Lua语法中“使用默认索引”的table表，</span><br><span class=\"line\">//      相当于java中的map中存放四条数据。Key分别为：1、2、3、4，而对应的value才是：KEYS[1]、KEYS[2]、ARGV[1]、ARGV[2]</span><br><span class=\"line\">//      举此例子仅为说明eval命令中参数的如何使用。项目中编写Lua脚本最好遵从key、arg的规范。</span><br><span class=\"line\">127.0.0.1:6379&gt; eval &quot;return &#123;KEYS[1],KEYS[2],ARGV[1],ARGV[2]&#125;&quot; 2 key1 key2 first second </span><br><span class=\"line\">1) &quot;key1&quot;</span><br><span class=\"line\">2) &quot;key2&quot;</span><br><span class=\"line\">3) &quot;first&quot;</span><br><span class=\"line\">4) &quot;second&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// 例4：使用了redis为lua内置的redis.call函数</span><br><span class=\"line\">//      脚本内容为：先执行SET命令，在执行EXPIRE命令</span><br><span class=\"line\">//      numkeys=1，keys数组有一个元素userAge（代表redis的key）</span><br><span class=\"line\">//      arg数组元素中有两个元素：10（代表userAge对应的value）和60（代表redis的存活时间）</span><br><span class=\"line\">127.0.0.1:6379&gt; EVAL &quot;redis.call(&#x27;SET&#x27;, KEYS[1], ARGV[1]);redis.call(&#x27;EXPIRE&#x27;, KEYS[1], ARGV[2]); return 1;&quot; 1 userAge 10 60</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; get userAge</span><br><span class=\"line\">&quot;10&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; ttl userAge</span><br><span class=\"line\">(integer) 44</span><br></pre></td></tr></table></figure>\n\n<p>通过上面的例4，我们可以发现，脚本中使用redis.call()去调用redis的命令。<br>在 Lua 脚本中，可以使用两个不同函数来执行 Redis 命令，它们分别是： <code>redis.call() 和 redis.pcall()</code><br>这两个函数的唯一区别在于它们使用不同的方式处理执行命令所产生的错误，差别如下：</p>\n<p><strong>错误处理</strong><br>当 redis.call() 在执行命令的过程中发生错误时，脚本会停止执行，并返回一个脚本错误，错误的输出信息会说明错误造成的原因：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; lpush foo a</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\"></span><br><span class=\"line\">127.0.0.1:6379&gt; eval &quot;return redis.call(&#x27;get&#x27;, &#x27;foo&#x27;)&quot; 0</span><br><span class=\"line\">(error) ERR Error running script (call to f_282297a0228f48cd3fc6a55de6316f31422f5d17): ERR Operation against a key holding the wrong kind of value</span><br></pre></td></tr></table></figure>\n\n<p>和 redis.call() 不同， redis.pcall() 出错时并不引发(raise)错误，而是返回一个带 err 域的 Lua 表(table)，用于表示错误：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; EVAL &quot;return redis.pcall(&#x27;get&#x27;, &#x27;foo&#x27;)&quot; 0</span><br><span class=\"line\">(error) ERR Operation against a key holding the wrong kind of value</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"SCRIPT-LOAD命令-和-EVALSHA命令\"><a href=\"#SCRIPT-LOAD命令-和-EVALSHA命令\" class=\"headerlink\" title=\"SCRIPT LOAD命令 和 EVALSHA命令\"></a>SCRIPT LOAD命令 和 EVALSHA命令</h3><p>SCRIPT LOAD命令格式：<code>SCRIPT LOAD script</code><br>EVALSHA命令格式：<code>EVALSHA sha1 numkeys key [key …] arg [arg …]</code></p>\n<p>这两个命令放在一起讲的原因是：<code>EVALSHA</code> 命令中的sha1参数，就是<code>SCRIPT LOAD</code> 命令执行的结果。</p>\n<p><code>SCRIPT LOAD</code> 将脚本 script 添加到Redis服务器的脚本缓存中，并不立即执行这个脚本，而是会立即对输入的脚本进行求值。并返回给定脚本的 SHA1 校验和。如果给定的脚本已经在缓存里面了，那么不执行任何操作。</p>\n<p>在脚本被加入到缓存之后，在任何客户端通过<code>EVALSHA</code>命令，可以使用脚本的 SHA1 校验和来调用这个脚本。脚本可以在缓存中保留无限长的时间，直到执行<code>SCRIPT FLUSH</code>为止。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># SCRIPT LOAD加载脚本，并得到sha1值</span></span></span><br><span class=\"line\">127.0.0.1:6379&gt; SCRIPT LOAD &quot;redis.call(&#x27;SET&#x27;, KEYS[1], ARGV[1]);redis.call(&#x27;EXPIRE&#x27;, KEYS[1], ARGV[2]); return 1;&quot;</span><br><span class=\"line\">&quot;6aeea4b3e96171ef835a78178fceadf1a5dbe345&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># EVALSHA使用sha1值，并拼装和EVAL类似的numkeys和key数组、arg数组，调用脚本。</span></span></span><br><span class=\"line\">127.0.0.1:6379&gt; EVALSHA 6aeea4b3e96171ef835a78178fceadf1a5dbe345 1 userAge 10 60</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; get userAge</span><br><span class=\"line\">&quot;10&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; ttl userAge</span><br><span class=\"line\">(integer) 43</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"SCRIPT-EXISTS-命令\"><a href=\"#SCRIPT-EXISTS-命令\" class=\"headerlink\" title=\"SCRIPT EXISTS 命令\"></a>SCRIPT EXISTS 命令</h3><p>命令格式：<code>SCRIPT EXISTS sha1 [sha1 …]</code><br>作用：给定一个或多个脚本的 SHA1 校验和，返回一个包含 0 和 1 的列表，表示校验和所指定的脚本是否已经被保存在缓存当中</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; SCRIPT EXISTS 6aeea4b3e96171ef835a78178fceadf1a5dbe345</span><br><span class=\"line\">1) (integer) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; SCRIPT EXISTS 6aeea4b3e96171ef835a78178fceadf1a5dbe346</span><br><span class=\"line\">1) (integer) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; SCRIPT EXISTS 6aeea4b3e96171ef835a78178fceadf1a5dbe345 6aeea4b3e96171ef835a78178fceadf1a5dbe366</span><br><span class=\"line\">1) (integer) 1</span><br><span class=\"line\">2) (integer) 0</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"SCRIPT-FLUSH-命令\"><a href=\"#SCRIPT-FLUSH-命令\" class=\"headerlink\" title=\"SCRIPT FLUSH 命令\"></a>SCRIPT FLUSH 命令</h3><p>命令格式：<code>SCRIPT FLUSH</code><br>作用：清除Redis服务端所有 Lua 脚本缓存</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; SCRIPT EXISTS 6aeea4b3e96171ef835a78178fceadf1a5dbe345</span><br><span class=\"line\">1) (integer) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; SCRIPT FLUSH</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; SCRIPT EXISTS 6aeea4b3e96171ef835a78178fceadf1a5dbe345</span><br><span class=\"line\">1) (integer) 0</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"SCRIPT-KILL-命令\"><a href=\"#SCRIPT-KILL-命令\" class=\"headerlink\" title=\"SCRIPT KILL 命令\"></a>SCRIPT KILL 命令</h3><p>命令格式：<code>SCRIPT FLUSH</code><br>作用：杀死当前正在运行的 Lua 脚本，当且仅当这个脚本没有执行过任何写操作时，这个命令才生效。 这个命令主要用于终止运行时间过长的脚本，比如一个因为 BUG 而发生无限 loop 的脚本，诸如此类。</p>\n<p>假如当前正在运行的脚本已经执行过写操作，那么即使执行<code>SCRIPT KILL</code>，也无法将它杀死，因为这是违反 Lua 脚本的原子性执行原则的。在这种情况下，唯一可行的办法是使用<code>SHUTDOWN NOSAVE</code>命令，通过停止整个 Redis 进程来停止脚本的运行，并防止不完整(half-written)的信息被写入数据库中。</p>\n</blockquote>\n<h2 id=\"Redis执行Lua脚本文件\"><a href=\"#Redis执行Lua脚本文件\" class=\"headerlink\" title=\"Redis执行Lua脚本文件\"></a>Redis执行Lua脚本文件</h2><blockquote>\n<p>在第二章中介绍的命令，是在redis客户端中使用命令进行操作。该章节介绍的是直接执行 Lua 的脚本文件。</p>\n<h3 id=\"编写Lua脚本文件\"><a href=\"#编写Lua脚本文件\" class=\"headerlink\" title=\"编写Lua脚本文件\"></a>编写Lua脚本文件</h3><figure class=\"highlight lua\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> key = KEYS[<span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"keyword\">local</span> val = redis.call(<span class=\"string\">&quot;GET&quot;</span>, key);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> val == ARGV[<span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">        redis.call(<span class=\"string\">&#x27;SET&#x27;</span>, KEYS[<span class=\"number\">1</span>], ARGV[<span class=\"number\">2</span>])</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"执行Lua脚本文件\"><a href=\"#执行Lua脚本文件\" class=\"headerlink\" title=\"执行Lua脚本文件\"></a>执行Lua脚本文件</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">执行命令： redis-cli -a 密码 --eval Lua脚本路径 key [key …] ,  arg [arg …] </span><br><span class=\"line\">如：redis-cli -a 123456 --eval ./Redis_CompareAndSet.lua userName , zhangsan lisi </span><br></pre></td></tr></table></figure>\n\n<p><strong>此处敲黑板，注意啦！！！</strong><br>“–eval”而不是命令模式中的”eval”，一定要有前端的两个-<br>脚本路径后紧跟key [key …]，相比命令行模式，少了numkeys这个key数量值<br>key [key …] 和 arg [arg …] 之间的“ , ”，英文逗号前后必须有空格，否则死活都报错</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># Redis客户端执行</span></span></span><br><span class=\"line\">127.0.0.1:6379&gt; set userName zhangsan </span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; get userName</span><br><span class=\"line\">&quot;zhangsan&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># linux服务器执行</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 第一次执行：compareAndSet成功，返回1</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 第二次执行：compareAndSet失败，返回0</span></span></span><br><span class=\"line\">[root@vm01 learn_lua]# redis-cli -a 123456 --eval Redis_CompareAndSet.lua userName , zhangsan lisi</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">[root@vm01 learn_lua]# redis-cli -a 123456 --eval Redis_CompareAndSet.lua userName , zhangsan lisi</span><br><span class=\"line\">(integer) 0</span><br></pre></td></tr></table></figure>\n\n\n</blockquote>\n<h2 id=\"使用Lua控制IP访问频率\"><a href=\"#使用Lua控制IP访问频率\" class=\"headerlink\" title=\"使用Lua控制IP访问频率\"></a>使用Lua控制IP访问频率</h2><blockquote>\n<p>需求：实现一个访问频率控制，某个IP在短时间内频繁访问页面，需要记录并检测出来，就可以通过Lua脚本高效的实现。<br>小声说明：本实例针对固定窗口的访问频率，而动态的非滑动窗口。即：如果规定一分钟内访问10次，记为超限。在本实例中前一分钟的最后一秒访问9次，下一分钟的第1秒又访问9次，不计为超限。<br>脚本如下：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> visitNum = redis.call(<span class=\"string\">&#x27;incr&#x27;</span>, KEYS[<span class=\"number\">1</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> visitNum == <span class=\"number\">1</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">        redis.call(<span class=\"string\">&#x27;expire&#x27;</span>, KEYS[<span class=\"number\">1</span>], ARGV[<span class=\"number\">1</span>])</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">if</span> visitNum &gt; <span class=\"built_in\">tonumber</span>(ARGV[<span class=\"number\">2</span>]) <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n\n<p>演示如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># LimitIP:127.0.0.1为key， 10 3表示：同一IP在10秒内最多访问三次</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 前三次返回1，代表未被限制；第四、五次返回0，代表127.0.0.1这个ip已被拦截</span></span></span><br><span class=\"line\">[root@vm01 learn_lua]# redis-cli -a 123456 --eval Redis_LimitIpVisit.lua LimitIP:127.0.0.1 , 10 3</span><br><span class=\"line\"> (integer) 1</span><br><span class=\"line\">[root@vm01 learn_lua]# redis-cli -a 123456 --eval Redis_LimitIpVisit.lua LimitIP:127.0.0.1 , 10 3</span><br><span class=\"line\"> (integer) 1</span><br><span class=\"line\">[root@vm01 learn_lua]# redis-cli -a 123456 --eval Redis_LimitIpVisit.lua LimitIP:127.0.0.1 , 10 3</span><br><span class=\"line\"> (integer) 1</span><br><span class=\"line\">[root@vm01 learn_lua]# redis-cli -a 123456 --eval Redis_LimitIpVisit.lua LimitIP:127.0.0.1 , 10 3</span><br><span class=\"line\"> (integer) 0</span><br><span class=\"line\">[root@vm01 learn_lua]# redis-cli -a 123456 --eval Redis_LimitIpVisit.lua LimitIP:127.0.0.1 , 10 3</span><br><span class=\"line\"> (integer) 0</span><br></pre></td></tr></table></figure>\n</blockquote>\n","categories":["面试"],"tags":["面试","Redis"]},{"title":"Java函数接口","url":"/2022/10/02/Java%E5%87%BD%E6%95%B0%E6%8E%A5%E5%8F%A3/","content":"<p>本人在阅读Sa-token框架的时候，在研究全局策略的时候，发现了用到了大量的函数式接口，于是写下这篇文章巩固一下自己的知识点。</p>\n<p>总所周知啊，Java在1.8的时候推出了函数接口，分别为Function（函数式接口），Supplier（供给式接口），Consumer（消费式接口），Predicate（断言式接口），这四个后面延申出BiFunction等等相应的函数接口。下面具体介绍。</p>\n<h3 id=\"Function接口\"><a href=\"#Function接口\" class=\"headerlink\" title=\"Function接口\"></a>Function接口</h3><blockquote>\n<p>下面是Function的源码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Function</span>&lt;T, R&gt; &#123;</span><br><span class=\"line\"> R <span class=\"title function_\">apply</span><span class=\"params\">(T t)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">default</span> &lt;V&gt; Function&lt;V, R&gt; <span class=\"title function_\">compose</span><span class=\"params\">(Function&lt;? <span class=\"built_in\">super</span> V, ? extends T&gt; before)</span> &#123;</span><br><span class=\"line\">     Objects.requireNonNull(before);</span><br><span class=\"line\">     <span class=\"keyword\">return</span> (V v) -&gt; apply(before.apply(v));</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">                         </span><br><span class=\"line\"> <span class=\"keyword\">default</span> &lt;V&gt; Function&lt;T, V&gt; <span class=\"title function_\">andThen</span><span class=\"params\">(Function&lt;? <span class=\"built_in\">super</span> R, ? extends V&gt; after)</span> &#123;</span><br><span class=\"line\">     Objects.requireNonNull(after);</span><br><span class=\"line\">     <span class=\"keyword\">return</span> (T t) -&gt; after.apply(apply(t));</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">static</span> &lt;T&gt; Function&lt;T, T&gt; <span class=\"title function_\">identity</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> t -&gt; t;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">     Function&lt;String, Integer&gt; lengthFunction = str -&gt; str.length();</span><br><span class=\"line\">     Function&lt;Integer, Integer&gt; doubleFunction = length -&gt; length * <span class=\"number\">2</span>;</span><br><span class=\"line\">     <span class=\"type\">Integer</span> <span class=\"variable\">doubleLength</span> <span class=\"operator\">=</span> doubleFunction.compose(lengthFunction).apply(<span class=\"string\">&quot;www.wdbyte.com&quot;</span>);</span><br><span class=\"line\">     System.out.println(doubleLength);</span><br><span class=\"line\">&#125;    </span><br><span class=\"line\"><span class=\"comment\">//另一种写法</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">     Function&lt;String, Integer&gt; lengthFunction = str -&gt; str.length();</span><br><span class=\"line\">     Function&lt;Integer, Integer&gt; doubleFunction = length -&gt; length * <span class=\"number\">2</span>;</span><br><span class=\"line\">     <span class=\"type\">Integer</span> <span class=\"variable\">doubleLength</span> <span class=\"operator\">=</span> lengthFunction.andThen(doubleFunction).apply(<span class=\"string\">&quot;www.wdbyte.com&quot;</span>);</span><br><span class=\"line\">     System.out.println(doubleLength);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//输出 28</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>很显然，一般形式为</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Function&lt;T,R&gt; varname = (T) -&gt;&#123;</span><br><span class=\"line\"> 操作...</span><br><span class=\"line\"> <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">apply来调用方法</span></span><br><span class=\"line\"><span class=\"comment\">compose和andThen用来连接其余Function方法</span></span><br><span class=\"line\"><span class=\"comment\">identity用来返回一个lambda方法</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>然后BiFunction相对于Function而言，接受的参数从一个变成两个</strong></p>\n<p>不过特殊的是,BiFunction的andThen方法可以接受Function参数，所以可以进一步抽象成更加通用的方法</p>\n<p>比如工厂模式</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//实体类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Dog</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Dog</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Dog</span><span class=\"params\">(String name, Integer age)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 省略 get set toString</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.function.BiFunction;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">JavaBiFunctionFactory</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        System.out.println(dogFactory(<span class=\"string\">&quot;牧羊犬&quot;</span>, <span class=\"number\">1</span>, Dog::<span class=\"keyword\">new</span>));</span><br><span class=\"line\">        System.out.println(dogFactory(<span class=\"string\">&quot;哈士奇&quot;</span>, <span class=\"number\">2</span>, Dog::<span class=\"keyword\">new</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;R <span class=\"keyword\">extends</span> <span class=\"title class_\">Dog</span>&gt; Dog <span class=\"title function_\">dogFactory</span><span class=\"params\">(String name, Integer age, BiFunction&lt;String, Integer, R&gt; biFunction)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> biFunction.apply(name, age);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n</blockquote>\n<h3 id=\"Supplier接口\"><a href=\"#Supplier接口\" class=\"headerlink\" title=\"Supplier接口\"></a>Supplier接口</h3><blockquote>\n<p>下面是Supplier的源码，看起来非常的简单，就一个返回T</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Supplier</span>&lt;T&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    T <span class=\"title function_\">get</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>由于不需要提供参数，所以可以很方便的用于对象创建</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Java8Supplier</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        Supplier&lt;Integer&gt; supplier = () -&gt; <span class=\"keyword\">new</span> <span class=\"title class_\">Random</span>().nextInt(<span class=\"number\">10</span>);</span><br><span class=\"line\">        System.out.println(supplier.get());</span><br><span class=\"line\">        System.out.println(supplier.get());</span><br><span class=\"line\">       </span><br><span class=\"line\">        Supplier&lt;LocalDateTime&gt; supplier2 = LocalDateTime::now;</span><br><span class=\"line\">        System.out.println(supplier2.get());</span><br><span class=\"line\">        System.out.println(supplier2.get());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在 Java 8 中，为了方便 <code>Supplier</code> 的使用，提供了指定类型的 <code>Supplier</code>，有 <code>BooleanSupplier</code>, <code>DoubleSupplier</code>, <code>IntSupplier</code>, <code>LongSupplier</code>,用这些来规定返回值类型。</p>\n</blockquote>\n<h3 id=\"Consumer接口\"><a href=\"#Consumer接口\" class=\"headerlink\" title=\"Consumer接口\"></a>Consumer接口</h3><blockquote>\n<p>Consumer主要用来消费参数，但是不返回任何值</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Consumer</span>&lt;T&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">accept</span><span class=\"params\">(T t)</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">default</span> Consumer&lt;T&gt; <span class=\"title function_\">andThen</span><span class=\"params\">(Consumer&lt;? <span class=\"built_in\">super</span> T&gt; after)</span> &#123;</span><br><span class=\"line\">        Objects.requireNonNull(after);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (T t) -&gt; &#123; accept(t); after.accept(t); &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Java8Consumer</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        Consumer&lt;String&gt; lengthConsumer = s -&gt; System.out.println(s.length());</span><br><span class=\"line\">        lengthConsumer.accept(<span class=\"string\">&quot;Hello&quot;</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        Consumer&lt;String&gt; printConsumer = System.out::println;</span><br><span class=\"line\">        printConsumer.accept(<span class=\"string\">&quot;Hello&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Java8ConsumerForEach</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        Consumer&lt;String&gt; printConsumer = System.out::println;</span><br><span class=\"line\">        List&lt;String&gt; list = Arrays.asList(<span class=\"string\">&quot;java&quot;</span>, <span class=\"string\">&quot;c#&quot;</span>, <span class=\"string\">&quot;python&quot;</span>);</span><br><span class=\"line\">      </span><br><span class=\"line\">        forEach(list, printConsumer);</span><br><span class=\"line\">        forEach(list, s -&gt; System.out.println(s.length()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"keyword\">void</span> <span class=\"title function_\">forEach</span><span class=\"params\">(List&lt;T&gt; list, Consumer&lt;T&gt; consumer)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (T t : list) &#123;</span><br><span class=\"line\">            consumer.accept(t);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<table>\n<thead>\n<tr>\n<th>函数接口</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>BiConsumer</td>\n<td>传入两个任意类型参数，无返回值</td>\n</tr>\n<tr>\n<td>DoubleConsumer</td>\n<td>传入一个 double 参数，无返回值</td>\n</tr>\n<tr>\n<td>IntConsumer</td>\n<td>传入一个 int 参数，无返回值</td>\n</tr>\n<tr>\n<td>LongConsumer</td>\n<td>传入一个 long 参数，无返回值</td>\n</tr>\n<tr>\n<td>ObjDoubleConsumer</td>\n<td>传入一个任意类型参数，一个 double 参数，无返回值</td>\n</tr>\n<tr>\n<td>ObjIntConsumer</td>\n<td>传入一个任意类型参数，一个 int 参数，无返回值</td>\n</tr>\n<tr>\n<td>ObjLongConsumer</td>\n<td>传入一个任意类型参数，一个 long 参数，无返回值</td>\n</tr>\n</tbody></table>\n</blockquote>\n<h3 id=\"Predicate接口\"><a href=\"#Predicate接口\" class=\"headerlink\" title=\"Predicate接口\"></a>Predicate接口</h3><blockquote>\n<p>这个是断言式接口，什么是断言，其实就是个判断语句，它接受一个T泛型参数，返回值为布尔类型</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Predicate</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"title function_\">test</span><span class=\"params\">(T t)</span>;</span><br><span class=\"line\">    <span class=\"keyword\">default</span> Predicate&lt;T&gt; <span class=\"title function_\">and</span><span class=\"params\">(Predicate&lt;? <span class=\"built_in\">super</span> T&gt; other)</span> &#123;<span class=\"comment\">//使用 and() 方法，可以让前后两个 Predicate 判断条件一起生效。</span></span><br><span class=\"line\">        Objects.requireNonNull(other);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (t) -&gt; test(t) &amp;&amp; other.test(t);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">default</span> Predicate&lt;T&gt; <span class=\"title function_\">negate</span><span class=\"params\">()</span> &#123;<span class=\"comment\">//predicate.negate() 方法会返回一个与指定判断相反的 Predicate。</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (t) -&gt; !test(t);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">default</span> Predicate&lt;T&gt; <span class=\"title function_\">or</span><span class=\"params\">(Predicate&lt;? <span class=\"built_in\">super</span> T&gt; other)</span> &#123;<span class=\"comment\">//使用 and() 方法，可以让前后两个 Predicate 判断条件都生效。</span></span><br><span class=\"line\">        Objects.requireNonNull(other);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (t) -&gt; test(t) || other.test(t);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> &lt;T&gt; Predicate&lt;T&gt; <span class=\"title function_\">isEqual</span><span class=\"params\">(Object targetRef)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"literal\">null</span> == targetRef)</span><br><span class=\"line\">                ? Objects::isNull</span><br><span class=\"line\">                : object -&gt; targetRef.equals(object);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><code>Predicate</code> 的 <code>or()</code> ，<code>and()</code>，<code>negate()</code> 方法可以随意组合 <code>Predicate</code>，组合后的判断逻辑是从左到右，从前到后，顺次判断。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Java8PredicateChain</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        List&lt;Integer&gt; numberList = Arrays.asList(<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Predicate&lt;Integer&gt; lessThan5 = number -&gt; number &lt;= <span class=\"number\">5</span>;</span><br><span class=\"line\">        Predicate&lt;Integer&gt; greaterThan9 = number -&gt; number &gt;= <span class=\"number\">9</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 小于等于 5</span></span><br><span class=\"line\">        System.out.println(filter(numberList, lessThan5));</span><br><span class=\"line\">        <span class=\"comment\">// 大于 5</span></span><br><span class=\"line\">        System.out.println(filter(numberList, lessThan5.negate()));</span><br><span class=\"line\">        <span class=\"comment\">// 小于等于 5 或者大于等于 9</span></span><br><span class=\"line\">        System.out.println(filter(numberList, lessThan5.or(greaterThan9)));</span><br><span class=\"line\">        <span class=\"comment\">// ! (小于等于 5 AND 大于等于 9)</span></span><br><span class=\"line\">        System.out.println(filter(numberList, lessThan5.and(greaterThan9).negate()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; List&lt;T&gt; <span class=\"title function_\">filter</span><span class=\"params\">(List&lt;T&gt; list, Predicate&lt;T&gt; predicate)</span> &#123;</span><br><span class=\"line\">        List&lt;T&gt; resultList = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (T t : list) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (predicate.test(t)) &#123;</span><br><span class=\"line\">                resultList.add(t);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> resultList;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n</blockquote>\n<h3 id=\"UnaryOperator-接口\"><a href=\"#UnaryOperator-接口\" class=\"headerlink\" title=\"UnaryOperator 接口\"></a>UnaryOperator 接口</h3><blockquote>\n<p>其实是Function接口的子类，唯一特点就是默认返回值是T，只接受一个参数T</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Java8UnaryOperatorParams</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        List&lt;String&gt; list = Arrays.asList(<span class=\"string\">&quot;java&quot;</span>, <span class=\"string\">&quot;node&quot;</span>, <span class=\"string\">&quot;c++&quot;</span>, <span class=\"string\">&quot;rust&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 转大写</span></span><br><span class=\"line\">        UnaryOperator&lt;String&gt; upperFun = s -&gt; s.toUpperCase();</span><br><span class=\"line\">        <span class=\"comment\">// 截取 3 位</span></span><br><span class=\"line\">        UnaryOperator&lt;String&gt; subFun = s -&gt; s.substring(<span class=\"number\">0</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">        List&lt;String&gt; resultList = map(list, upperFun, subFun);</span><br><span class=\"line\">        System.out.println(resultList);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; List&lt;T&gt; <span class=\"title function_\">map</span><span class=\"params\">(List&lt;T&gt; list, UnaryOperator&lt;T&gt;... unaryOperator)</span> &#123;</span><br><span class=\"line\">        List&lt;T&gt; resultList = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (T t : list) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (UnaryOperator&lt;T&gt; operator : unaryOperator) &#123;</span><br><span class=\"line\">                t = operator.apply(t);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            resultList.add(t);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> resultList;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>ps:</p>\n<p>这边有个知识点,在java中,…表示可变长度参数列表，表示接受的参数为0到多个Object类型的对象，或者是一个Object[]</p>\n<p>可变长度参数列表必须作为最后一位参数！</p>\n</blockquote>\n","categories":["Java"],"tags":["Java","面试","函数接口"]},{"title":"Sa-token","url":"/2022/10/03/Sa-token%E6%A1%86%E6%9E%B6%E7%90%86%E8%A7%A3/","content":"<p>这是本人打算长篇更新的博客内容，关于Sa-token这个国人开发的鉴权框架，这是我第一个尝试看源码的框架，同时也去尝试了解之前不敢涉足的一些关于Springboot底层的一些代码</p>\n<p>本文没有先后顺序，后期会理顺整理一下</p>\n<h2 id=\"Sa-token-dao-redis\"><a href=\"#Sa-token-dao-redis\" class=\"headerlink\" title=\"Sa-token-dao-redis\"></a>Sa-token-dao-redis</h2><blockquote>\n<p>我第一次看模块就点开了这个模块，主要是最近想回顾redis，然后觉得redis应该不太复杂</p>\n<p>我很惊讶，因为这个模块只有一个代码组件，下面就是源码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SaTokenDaoRedis</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">SaTokenDao</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * String专用 </span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> StringRedisTemplate stringRedisTemplate;    </span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * Object专用 </span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> RedisTemplate&lt;String, Object&gt; objectRedisTemplate;</span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 标记：是否已初始化成功</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> isInit;</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">init</span><span class=\"params\">(RedisConnectionFactory connectionFactory)</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 不重复初始化 </span></span><br><span class=\"line\">      <span class=\"keyword\">if</span>(<span class=\"built_in\">this</span>.isInit) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;     </span><br><span class=\"line\">      <span class=\"comment\">// 指定相应的序列化方案 </span></span><br><span class=\"line\">      <span class=\"type\">StringRedisSerializer</span> <span class=\"variable\">keySerializer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringRedisSerializer</span>();</span><br><span class=\"line\">      <span class=\"type\">JdkSerializationRedisSerializer</span> <span class=\"variable\">valueSerializer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">JdkSerializationRedisSerializer</span>();</span><br><span class=\"line\">      <span class=\"comment\">// 构建StringRedisTemplate</span></span><br><span class=\"line\">      <span class=\"type\">StringRedisTemplate</span> <span class=\"variable\">stringTemplate</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringRedisTemplate</span>();</span><br><span class=\"line\">      stringTemplate.setConnectionFactory(connectionFactory);</span><br><span class=\"line\">      stringTemplate.afterPropertiesSet();</span><br><span class=\"line\">      <span class=\"comment\">// 构建RedisTemplate</span></span><br><span class=\"line\">      RedisTemplate&lt;String, Object&gt; template = <span class=\"keyword\">new</span> <span class=\"title class_\">RedisTemplate</span>&lt;String, Object&gt;();</span><br><span class=\"line\">      template.setConnectionFactory(connectionFactory);</span><br><span class=\"line\">      template.setKeySerializer(keySerializer);</span><br><span class=\"line\">      template.setHashKeySerializer(keySerializer);</span><br><span class=\"line\">      template.setValueSerializer(valueSerializer);</span><br><span class=\"line\">      template.setHashValueSerializer(valueSerializer);</span><br><span class=\"line\">      template.afterPropertiesSet();</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 开始初始化相关组件 </span></span><br><span class=\"line\">      <span class=\"built_in\">this</span>.stringRedisTemplate = stringTemplate;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.objectRedisTemplate = template;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.isInit = <span class=\"literal\">true</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 获取Value，如无返空 </span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> String <span class=\"title function_\">get</span><span class=\"params\">(String key)</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> stringRedisTemplate.opsForValue().get(key);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 写入Value，并设定存活时间 (单位: 秒)</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">set</span><span class=\"params\">(String key, String value, <span class=\"type\">long</span> timeout)</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(timeout == <span class=\"number\">0</span> || timeout &lt;= SaTokenDao.NOT_VALUE_EXPIRE)  &#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 判断是否为永不过期 </span></span><br><span class=\"line\">      <span class=\"keyword\">if</span>(timeout == SaTokenDao.NEVER_EXPIRE) &#123;</span><br><span class=\"line\">         stringRedisTemplate.opsForValue().set(key, value);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">         stringRedisTemplate.opsForValue().set(key, value, timeout, TimeUnit.SECONDS);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 修改指定key-value键值对 (过期时间不变) </span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">update</span><span class=\"params\">(String key, String value)</span> &#123;</span><br><span class=\"line\">      <span class=\"type\">long</span> <span class=\"variable\">expire</span> <span class=\"operator\">=</span> getTimeout(key);</span><br><span class=\"line\">      <span class=\"comment\">// -2 = 无此键 </span></span><br><span class=\"line\">      <span class=\"keyword\">if</span>(expire == SaTokenDao.NOT_VALUE_EXPIRE) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.set(key, value, expire);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 删除Value </span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">delete</span><span class=\"params\">(String key)</span> &#123;</span><br><span class=\"line\">      stringRedisTemplate.delete(key);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 获取Value的剩余存活时间 (单位: 秒) </span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"type\">long</span> <span class=\"title function_\">getTimeout</span><span class=\"params\">(String key)</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> stringRedisTemplate.getExpire(key);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 修改Value的剩余存活时间 (单位: 秒) </span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">updateTimeout</span><span class=\"params\">(String key, <span class=\"type\">long</span> timeout)</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 判断是否想要设置为永久</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span>(timeout == SaTokenDao.NEVER_EXPIRE) &#123;</span><br><span class=\"line\">         <span class=\"type\">long</span> <span class=\"variable\">expire</span> <span class=\"operator\">=</span> getTimeout(key);</span><br><span class=\"line\">         <span class=\"keyword\">if</span>(expire == SaTokenDao.NEVER_EXPIRE) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果其已经被设置为永久，则不作任何处理 </span></span><br><span class=\"line\">         &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果尚未被设置为永久，那么再次set一次</span></span><br><span class=\"line\">            <span class=\"built_in\">this</span>.set(key, <span class=\"built_in\">this</span>.get(key), timeout);</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      stringRedisTemplate.expire(key, timeout, TimeUnit.SECONDS);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 获取Object，如无返空 </span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> Object <span class=\"title function_\">getObject</span><span class=\"params\">(String key)</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> objectRedisTemplate.opsForValue().get(key);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 写入Object，并设定存活时间 (单位: 秒) </span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setObject</span><span class=\"params\">(String key, Object object, <span class=\"type\">long</span> timeout)</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(timeout == <span class=\"number\">0</span> || timeout &lt;= SaTokenDao.NOT_VALUE_EXPIRE)  &#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 判断是否为永不过期 </span></span><br><span class=\"line\">      <span class=\"keyword\">if</span>(timeout == SaTokenDao.NEVER_EXPIRE) &#123;</span><br><span class=\"line\">         objectRedisTemplate.opsForValue().set(key, object);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">         objectRedisTemplate.opsForValue().set(key, object, timeout, TimeUnit.SECONDS);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 更新Object (过期时间不变) </span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">updateObject</span><span class=\"params\">(String key, Object object)</span> &#123;</span><br><span class=\"line\">      <span class=\"type\">long</span> <span class=\"variable\">expire</span> <span class=\"operator\">=</span> getObjectTimeout(key);</span><br><span class=\"line\">      <span class=\"comment\">// -2 = 无此键 </span></span><br><span class=\"line\">      <span class=\"keyword\">if</span>(expire == SaTokenDao.NOT_VALUE_EXPIRE) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.setObject(key, object, expire);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 删除Object </span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">deleteObject</span><span class=\"params\">(String key)</span> &#123;</span><br><span class=\"line\">      objectRedisTemplate.delete(key);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 获取Object的剩余存活时间 (单位: 秒)</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"type\">long</span> <span class=\"title function_\">getObjectTimeout</span><span class=\"params\">(String key)</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> objectRedisTemplate.getExpire(key);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 修改Object的剩余存活时间 (单位: 秒)</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">updateObjectTimeout</span><span class=\"params\">(String key, <span class=\"type\">long</span> timeout)</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 判断是否想要设置为永久</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span>(timeout == SaTokenDao.NEVER_EXPIRE) &#123;</span><br><span class=\"line\">         <span class=\"type\">long</span> <span class=\"variable\">expire</span> <span class=\"operator\">=</span> getObjectTimeout(key);</span><br><span class=\"line\">         <span class=\"keyword\">if</span>(expire == SaTokenDao.NEVER_EXPIRE) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果其已经被设置为永久，则不作任何处理 </span></span><br><span class=\"line\">         &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果尚未被设置为永久，那么再次set一次</span></span><br><span class=\"line\">            <span class=\"built_in\">this</span>.setObject(key, <span class=\"built_in\">this</span>.getObject(key), timeout);</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      objectRedisTemplate.expire(key, timeout, TimeUnit.SECONDS);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 搜索数据 </span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title function_\">searchData</span><span class=\"params\">(String prefix, String keyword, <span class=\"type\">int</span> start, <span class=\"type\">int</span> size, <span class=\"type\">boolean</span> sortType)</span> &#123;</span><br><span class=\"line\">      Set&lt;String&gt; keys = stringRedisTemplate.keys(prefix + <span class=\"string\">&quot;*&quot;</span> + keyword + <span class=\"string\">&quot;*&quot;</span>);</span><br><span class=\"line\">      List&lt;String&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;String&gt;(keys);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> SaFoxUtil.searchList(list, start, size, sortType);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>初看感觉很简单，就是用SpringDataRedis来进行对Sa-token的id一些存取操作</p>\n<p>个人觉得难点在于初始化那块</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * String专用 </span></span><br><span class=\"line\"><span class=\"comment\"> */</span>\t</span><br><span class=\"line\"><span class=\"keyword\">public</span> StringRedisTemplate stringRedisTemplate;\t</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Object专用 </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> RedisTemplate&lt;String, Object&gt; objectRedisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 标记：是否已初始化成功</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> isInit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">init</span><span class=\"params\">(RedisConnectionFactory connectionFactory)</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 不重复初始化 </span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(<span class=\"built_in\">this</span>.isInit) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 指定相应的序列化方案 </span></span><br><span class=\"line\">\t<span class=\"type\">StringRedisSerializer</span> <span class=\"variable\">keySerializer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringRedisSerializer</span>();</span><br><span class=\"line\">\t<span class=\"type\">JdkSerializationRedisSerializer</span> <span class=\"variable\">valueSerializer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">JdkSerializationRedisSerializer</span>();</span><br><span class=\"line\">\t<span class=\"comment\">// 构建StringRedisTemplate</span></span><br><span class=\"line\">\t<span class=\"type\">StringRedisTemplate</span> <span class=\"variable\">stringTemplate</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringRedisTemplate</span>();</span><br><span class=\"line\">\tstringTemplate.setConnectionFactory(connectionFactory);</span><br><span class=\"line\">\tstringTemplate.afterPropertiesSet();</span><br><span class=\"line\">\t<span class=\"comment\">// 构建RedisTemplate</span></span><br><span class=\"line\">\tRedisTemplate&lt;String, Object&gt; template = <span class=\"keyword\">new</span> <span class=\"title class_\">RedisTemplate</span>&lt;String, Object&gt;();</span><br><span class=\"line\">\ttemplate.setConnectionFactory(connectionFactory);</span><br><span class=\"line\">\ttemplate.setKeySerializer(keySerializer);</span><br><span class=\"line\">\ttemplate.setHashKeySerializer(keySerializer);</span><br><span class=\"line\">\ttemplate.setValueSerializer(valueSerializer);</span><br><span class=\"line\">\ttemplate.setHashValueSerializer(valueSerializer);</span><br><span class=\"line\">\ttemplate.afterPropertiesSet();</span><br><span class=\"line\">\t<span class=\"comment\">// 开始初始化相关组件 </span></span><br><span class=\"line\">\t<span class=\"built_in\">this</span>.stringRedisTemplate = stringTemplate;</span><br><span class=\"line\">\t<span class=\"built_in\">this</span>.objectRedisTemplate = template;</span><br><span class=\"line\">\t<span class=\"built_in\">this</span>.isInit = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>首先这个init方法至关重要，初始化RedisTemplate，同时方法是@Autowired注解修饰，这意味着方法会自动调用，参数会自动注入</p>\n<p>那么问题来了，既然这个参数会自动注入，然后参数类型是RedisConnectionFactory，所以我们就要找了。</p>\n<p>最终找到了唯一调用这个方法的类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SaAloneRedisInject</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">EnvironmentAware</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 配置信息的前缀 </span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">ALONE_PREFIX</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;sa-token.alone-redis&quot;</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Sa-Token 持久层接口 </span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"meta\">@Autowired(required = false)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> SaTokenDao saTokenDao;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 开始注入 </span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setEnvironment</span><span class=\"params\">(Environment environment)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 如果为空或者默认实现，则不进行任何操作 </span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(saTokenDao == <span class=\"literal\">null</span> || saTokenDao <span class=\"keyword\">instanceof</span> SaTokenDaoDefaultImpl) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 如果配置文件不包含相关配置，则不进行任何操作 </span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(environment.getProperty(ALONE_PREFIX + <span class=\"string\">&quot;.host&quot;</span>) == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// ------------------- 开始注入 </span></span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 获取cfg对象 </span></span><br><span class=\"line\">\t\t\t<span class=\"type\">RedisProperties</span> <span class=\"variable\">cfg</span> <span class=\"operator\">=</span> Binder.get(environment).bind(ALONE_PREFIX, RedisProperties.class).get();</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 1. Redis配置 </span></span><br><span class=\"line\">\t\t\t<span class=\"type\">RedisStandaloneConfiguration</span> <span class=\"variable\">redisConfig</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RedisStandaloneConfiguration</span>();</span><br><span class=\"line\">\t\t\tredisConfig.setHostName(cfg.getHost());</span><br><span class=\"line\">\t\t\tredisConfig.setPort(cfg.getPort());</span><br><span class=\"line\">\t\t\tredisConfig.setDatabase(cfg.getDatabase());</span><br><span class=\"line\">\t\t\tredisConfig.setPassword(RedisPassword.of(cfg.getPassword())); </span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 2. 连接池配置 </span></span><br><span class=\"line\">\t\t\t<span class=\"type\">GenericObjectPoolConfig</span> <span class=\"variable\">poolConfig</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">GenericObjectPoolConfig</span>();</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// pool配置 </span></span><br><span class=\"line\">\t\t\t<span class=\"type\">Lettuce</span> <span class=\"variable\">lettuce</span> <span class=\"operator\">=</span> cfg.getLettuce();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(lettuce.getPool() != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\tRedisProperties.<span class=\"type\">Pool</span> <span class=\"variable\">pool</span> <span class=\"operator\">=</span> cfg.getLettuce().getPool();</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 连接池最大连接数</span></span><br><span class=\"line\">\t\t\t\tpoolConfig.setMaxTotal(pool.getMaxActive());\t</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 连接池中的最大空闲连接 </span></span><br><span class=\"line\">\t\t\t\tpoolConfig.setMaxIdle(pool.getMaxIdle());   \t</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 连接池中的最小空闲连接</span></span><br><span class=\"line\">\t\t\t\tpoolConfig.setMinIdle(pool.getMinIdle());\t\t</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 连接池最大阻塞等待时间（使用负值表示没有限制）</span></span><br><span class=\"line\">\t\t\t\tpoolConfig.setMaxWaitMillis(pool.getMaxWait().toMillis());</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tLettucePoolingClientConfiguration.<span class=\"type\">LettucePoolingClientConfigurationBuilder</span> <span class=\"variable\">builder</span> <span class=\"operator\">=</span> LettucePoolingClientConfiguration.builder();</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// timeout </span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(cfg.getTimeout() != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\tbuilder.commandTimeout(cfg.getTimeout());</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// shutdownTimeout </span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(lettuce.getShutdownTimeout() != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\tbuilder.shutdownTimeout(lettuce.getShutdownTimeout());</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 创建Factory对象 </span></span><br><span class=\"line\">\t\t\t<span class=\"type\">LettuceClientConfiguration</span> <span class=\"variable\">clientConfig</span> <span class=\"operator\">=</span> builder.poolConfig(poolConfig).build();</span><br><span class=\"line\">\t\t\t<span class=\"type\">LettuceConnectionFactory</span> <span class=\"variable\">factory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">LettuceConnectionFactory</span>(redisConfig, clientConfig);</span><br><span class=\"line\">\t\t\tfactory.afterPropertiesSet();</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 3. 开始初始化 SaTokenDao </span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 如果是SaTokenDaoRedis</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\tClass.forName(<span class=\"string\">&quot;cn.dev33.satoken.dao.SaTokenDaoRedis&quot;</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">SaTokenDaoRedis</span> <span class=\"variable\">dao</span> <span class=\"operator\">=</span> (SaTokenDaoRedis)saTokenDao;</span><br><span class=\"line\">\t\t\t\tdao.isInit = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t\t\tdao.init(factory);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 如果是SaTokenDaoRedisJackson</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\tClass.forName(<span class=\"string\">&quot;cn.dev33.satoken.dao.SaTokenDaoRedisJackson&quot;</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">SaTokenDaoRedisJackson</span> <span class=\"variable\">dao</span> <span class=\"operator\">=</span> (SaTokenDaoRedisJackson)saTokenDao;</span><br><span class=\"line\">\t\t\t\tdao.isInit = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t\t\tdao.init(factory);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 骗过编辑器，增加配置文件代码提示 </span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> 配置对象</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"meta\">@ConfigurationProperties(prefix = ALONE_PREFIX)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> RedisProperties <span class=\"title function_\">getSaAloneRedisConfig</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RedisProperties</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>首先很明显这个类由@Configuration修饰，注入到IOC容器中，以便Springboot默认执行setEnvironment（）方法</p>\n<p>然后，下面这段话,将配置文件中的属性对应成对象，并实例化获得</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Binder.get(environment).bind(ALONE_PREFIX, RedisProperties.class).get();</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">RedisStandaloneConfiguration</span> <span class=\"variable\">redisConfig</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RedisStandaloneConfiguration</span>();</span><br><span class=\"line\">redisConfig.setHostName(cfg.getHost());</span><br><span class=\"line\">redisConfig.setPort(cfg.getPort());</span><br><span class=\"line\">redisConfig.setDatabase(cfg.getDatabase());</span><br><span class=\"line\">redisConfig.setPassword(RedisPassword.of(cfg.getPassword())); </span><br><span class=\"line\"><span class=\"comment\">//这边就是配置redis</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//接下来就是连接池配置</span></span><br><span class=\"line\"><span class=\"type\">GenericObjectPoolConfig</span> <span class=\"variable\">poolConfig</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">GenericObjectPoolConfig</span>();</span><br><span class=\"line\"><span class=\"comment\">// pool配置 </span></span><br><span class=\"line\"><span class=\"type\">Lettuce</span> <span class=\"variable\">lettuce</span> <span class=\"operator\">=</span> cfg.getLettuce();</span><br><span class=\"line\"><span class=\"keyword\">if</span>(lettuce.getPool() != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\tRedisProperties.<span class=\"type\">Pool</span> <span class=\"variable\">pool</span> <span class=\"operator\">=</span> cfg.getLettuce().getPool();</span><br><span class=\"line\">\t<span class=\"comment\">// 连接池最大连接数</span></span><br><span class=\"line\">\tpoolConfig.setMaxTotal(pool.getMaxActive());\t</span><br><span class=\"line\">\t<span class=\"comment\">// 连接池中的最大空闲连接 </span></span><br><span class=\"line\">\tpoolConfig.setMaxIdle(pool.getMaxIdle());   \t</span><br><span class=\"line\">\t<span class=\"comment\">// 连接池中的最小空闲连接</span></span><br><span class=\"line\">\tpoolConfig.setMinIdle(pool.getMinIdle());\t\t</span><br><span class=\"line\">\t<span class=\"comment\">// 连接池最大阻塞等待时间（使用负值表示没有限制）</span></span><br><span class=\"line\">\tpoolConfig.setMaxWaitMillis(pool.getMaxWait().toMillis());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">LettucePoolingClientConfiguration.<span class=\"type\">LettucePoolingClientConfigurationBuilder</span> <span class=\"variable\">builder</span> <span class=\"operator\">=</span> LettucePoolingClientConfiguration.builder();</span><br><span class=\"line\"><span class=\"comment\">// timeout </span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(cfg.getTimeout() != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\tbuilder.commandTimeout(cfg.getTimeout());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// shutdownTimeout </span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(lettuce.getShutdownTimeout() != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\tbuilder.shutdownTimeout(lettuce.getShutdownTimeout());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建Factory对象 </span></span><br><span class=\"line\"><span class=\"type\">LettuceClientConfiguration</span> <span class=\"variable\">clientConfig</span> <span class=\"operator\">=</span> builder.poolConfig(poolConfig).build();</span><br><span class=\"line\"><span class=\"type\">LettuceConnectionFactory</span> <span class=\"variable\">factory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">LettuceConnectionFactory</span>(redisConfig, clientConfig);</span><br><span class=\"line\">factory.afterPropertiesSet();</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 初始化SaTokenDao </span></span><br><span class=\"line\"><span class=\"comment\">// 如果是SaTokenDaoRedis</span></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\tClass.forName(<span class=\"string\">&quot;cn.dev33.satoken.dao.SaTokenDaoRedis&quot;</span>);</span><br><span class=\"line\">\t<span class=\"type\">SaTokenDaoRedis</span> <span class=\"variable\">dao</span> <span class=\"operator\">=</span> (SaTokenDaoRedis)saTokenDao;</span><br><span class=\"line\">\tdao.isInit = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\tdao.init(factory);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 如果是SaTokenDaoRedisJackson</span></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\tClass.forName(<span class=\"string\">&quot;cn.dev33.satoken.dao.SaTokenDaoRedisJackson&quot;</span>);</span><br><span class=\"line\">\t<span class=\"type\">SaTokenDaoRedisJackson</span> <span class=\"variable\">dao</span> <span class=\"operator\">=</span> (SaTokenDaoRedisJackson)saTokenDao;</span><br><span class=\"line\">\tdao.isInit = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\tdao.init(factory);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\te.printStackTrace();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//尝试去找到对应包下的类，根据找到的情况初始化dao</span></span><br></pre></td></tr></table></figure>\n\n<p>对于之前那个init上面用@Autowired的问题，还是有许多疑问，比如在SaTokenDaoRedis先注入进IOC，然后再SaAloneRedisInject里面调用setEnvironment（）方法进行注入，这个时候会调用init（）方法，然后调用默认的JedisConnectionFactory容器对象。</p>\n<p>最好的解释是，setEnvironment（）先运行，然后调用SaTokenDaoRedis的init（）方法对内部进行初始化，如果没有的话，才执行默认的连接工厂。</p>\n<p>为此我特地去查了下Springboot中的依赖注入顺序，发现setEnvironment确实先运行</p>\n</blockquote>\n","categories":["Java"],"tags":["Java","框架","个人理解"]},{"title":"Java虚拟线程","url":"/2022/10/09/Java%E8%99%9A%E6%8B%9F%E7%BA%BF%E7%A8%8B/","content":"<p>因为在Java19之前，Java只有一种线程，然后为了与19中的虚拟线程区分开来，所以之前的线程统称为平台线程。</p>\n<p>平台线程与操作系统的内核线程是一一对应的。</p>\n<p>然后我们主要来谈论19中新添加（模仿）的线程–虚拟线程</p>\n<h3 id=\"虚拟线程特征\"><a href=\"#虚拟线程特征\" class=\"headerlink\" title=\"虚拟线程特征\"></a>虚拟线程特征</h3><ul>\n<li>是用户模式线程</li>\n<li>由Java运行时调度</li>\n<li>虚拟线程和内核线程是M对N的对应关系，也就是M个虚拟线程会被映射到N个内核线程上 </li>\n</ul>\n<h3 id=\"虚拟线程可以使用独占线程处理每个请求的并发风格，也就是thread-per-request\"><a href=\"#虚拟线程可以使用独占线程处理每个请求的并发风格，也就是thread-per-request\" class=\"headerlink\" title=\"虚拟线程可以使用独占线程处理每个请求的并发风格，也就是thread-per-request\"></a>虚拟线程可以使用独占线程处理每个请求的并发风格，也就是thread-per-request</h3><h3 id=\"thread-per-request特点\"><a href=\"#thread-per-request特点\" class=\"headerlink\" title=\"thread-per-request特点\"></a>thread-per-request特点</h3><ul>\n<li>使用独占的线程来处理该请求</li>\n<li>易于理解和编程实现</li>\n<li>易于调优和性能调优</li>\n</ul>\n<p>但是thread-per-request不能用平台线程来实现，因为平台线程是操作系统中的线程操作的一种封装，而操作系统的线程会占用资源，存在数量上限，对于一个海量级别的服务端来说，不可能一个请求来，然后去生成一个平台线程。</p>\n<p>为了实现thread-per-request，目前有这几种解决思路</p>\n<ul>\n<li>依赖于非阻塞I/O和异步编程（用少量线程处理大量的请求）</li>\n<li>可以提升系统的吞吐量</li>\n<li>开发人员必须熟悉所使用的底层框架</li>\n</ul>\n<h3 id=\"使用虚拟线程好处\"><a href=\"#使用虚拟线程好处\" class=\"headerlink\" title=\"使用虚拟线程好处\"></a>使用虚拟线程好处</h3><ul>\n<li>使用最自然的方式来编写代码</li>\n<li>把请求的处理逻辑全部在一个虚拟线程中完成</li>\n<li>降低了编写高并发服务端应用的难度</li>\n</ul>\n<p>虚拟线程不需要放入线程池</p>\n<h3 id=\"虚拟线程的调度\"><a href=\"#虚拟线程的调度\" class=\"headerlink\" title=\"虚拟线程的调度\"></a>虚拟线程的调度</h3><ul>\n<li>由JDK负责调度</li>\n<li>JDK把虚拟线程分配个平台线程</li>\n<li>平台线程则由操作系统负责调度</li>\n</ul>\n<p>一个虚拟线程所分配的平台线程被称为该虚拟线程的<strong>载体</strong>，然后一个虚拟线程可能被调度到多个载体上，载体的标识对于虚拟线程是不可见的</p>\n<p>JDK调度虚拟线程时，使用的是一个以FIFO模式工作的work-stealing ForkJoinPool，该ForkJoinPool的paralleism决定了调度时可以使用的平台线程的数量</p>\n<h3 id=\"虚拟线程的执行\"><a href=\"#虚拟线程的执行\" class=\"headerlink\" title=\"虚拟线程的执行\"></a>虚拟线程的执行</h3><ul>\n<li><p>把虚拟线程绑定到平台线程</p>\n</li>\n<li><p>从平台线程上接触绑定，当虚拟线程在等待I/O或是执行某些阻塞操作时，<strong>可以从平台线程上解除绑定</strong></p>\n<p><strong>等待阻塞操作完成之后，可以绑定到新的平台线程上继续执行</strong></p>\n</li>\n<li><p>对于应用代码来说是透明的</p>\n</li>\n</ul>\n<p>有些JDK中的阻塞操作并不会解除对平台线程的绑定,因此会阻塞平台线程和底层的操作系统线程，比如</p>\n<p>文件操作、Object.wait()方法调用，这些阻塞操作的实现会在内部对此进行补偿</p>\n<p>临时增加JDK的调度器可以使用的线程数量</p>\n<h3 id=\"在下面两种情况下，虚拟线程会被Pin在载体上而无法解除绑定\"><a href=\"#在下面两种情况下，虚拟线程会被Pin在载体上而无法解除绑定\" class=\"headerlink\" title=\"在下面两种情况下，虚拟线程会被Pin在载体上而无法解除绑定\"></a>在下面两种情况下，虚拟线程会被Pin在载体上而无法解除绑定</h3><ul>\n<li>在执行Synchronized方法或块时</li>\n<li>在执行native方法或外部方法时</li>\n</ul>\n<h3 id=\"创建虚拟线程\"><a href=\"#创建虚拟线程\" class=\"headerlink\" title=\"创建虚拟线程\"></a>创建虚拟线程</h3><blockquote>\n<h3 id=\"第一种\"><a href=\"#第一种\" class=\"headerlink\" title=\"第一种\"></a>第一种</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">var</span> <span class=\"variable\">thread</span> <span class=\"operator\">=</span> Thread.ofVirtual().name(<span class=\"string\">&quot;my virtual&quot;</span>).start(() -&gt; System.out.println(<span class=\"string\">&quot;运行&quot;</span>));</span><br></pre></td></tr></table></figure>\n\n<p>一个新的虚拟线程被创建并启动，返回的时java.lang.Thread类的对象</p>\n<h3 id=\"第二种\"><a href=\"#第二种\" class=\"headerlink\" title=\"第二种\"></a>第二种</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Thread.startVirtualThread(Runnable task)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"第三种\"><a href=\"#第三种\" class=\"headerlink\" title=\"第三种\"></a>第三种</h3><p>使用线程工厂来实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">var</span> <span class=\"variable\">factory</span> <span class=\"operator\">=</span> Thread.ofVirtual().factory();</span><br><span class=\"line\"><span class=\"type\">var</span> <span class=\"variable\">thread</span> <span class=\"operator\">=</span> factory.newThread(()-&gt; System.out.println(<span class=\"string\">&quot;在工厂中创建&quot;</span>));</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"第四种\"><a href=\"#第四种\" class=\"headerlink\" title=\"第四种\"></a>第四种</h3><p>使用线程池</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Executors.newVirtualThreadPerTaskExecutor();</span><br><span class=\"line\">Executors.newThreadPerTaskExecutor(ThreadFactory threadFactory);</span><br></pre></td></tr></table></figure>\n\n<p>用Executors对象所能创建的线程数量理论上没有上限(受限于内存)</p>\n</blockquote>\n","categories":["Java"],"tags":["Java","Juc","个人理解"]},{"title":"AOP自己实现demo","url":"/2022/10/10/AOP%E8%87%AA%E5%B7%B1%E5%AE%9E%E7%8E%B0demo/","content":"<p>跟着</p>\n","categories":["Java"],"tags":["Java","个人理解","AOP"]},{"title":"AOP初级","url":"/2022/10/10/AOP%E5%88%9D%E7%BA%A7/","content":"<p>今天主要来谈谈AOP面向切面编程，这东西我已经在项目里运用过好多次，但是从来没有一个系统性的整理，所以，用几篇文章来好好的梳理一下什么是AOP，并且如何在项目里充分运用它。</p>\n<h2 id=\"什么是AOP\"><a href=\"#什么是AOP\" class=\"headerlink\" title=\"什么是AOP\"></a>什么是AOP</h2><blockquote>\n<p>AOP面向切面编程，通过预编译方式和运行期间动态代理实现程序功能的统一维护的一种技术。AOP是OOP的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</p>\n<p>最简单的例子就是，你实现了一个加法函数，但是你不想在改变原函数功能的基础之上，实现乘法。这时候你可以在外部添加一个类，然后通过AOP的技术给这个方法添加功能的操作，这就是AOP。</p>\n</blockquote>\n<h3 id=\"AOP的特点是什么\"><a href=\"#AOP的特点是什么\" class=\"headerlink\" title=\"AOP的特点是什么\"></a>AOP的特点是什么</h3><blockquote>\n<p>AOP代表的是一个横向的关系，将“对象”比作一个空心的圆柱体，其中封装的是对象的属性和行为；则面向方面编程的方法，就是将这个圆柱体以切面形式剖开，选择性的提供业务逻辑。而剖开的切面，也就是所谓的“方面”了。然后它又以巧夺天功的妙手将这些剖开的切面复原，不留痕迹，但完成了效果。</p>\n</blockquote>\n<h3 id=\"实现AOP的技术\"><a href=\"#实现AOP的技术\" class=\"headerlink\" title=\"实现AOP的技术\"></a>实现AOP的技术</h3><blockquote>\n<p>主要分为两大类</p>\n<ul>\n<li><strong>采用动态代理技术，利用截取消息的方式，对该消息进行装饰，以取代原有对象行为的执行</strong></li>\n<li><strong>采用静态织入的方式，引入特定的语法创建“方面”，从而使得编译器可以在编译期间织入有关“方面”的代码</strong></li>\n</ul>\n</blockquote>\n<p>然后AOP的底层原理就是使用了动态代理</p>\n<p>主要分为两种情况</p>\n<p>（1）有接口，使用了JDK的动态代理</p>\n<p>（2）没有接口，使用了CGLIB代理</p>\n<h3 id=\"AOP使用场景\"><a href=\"#AOP使用场景\" class=\"headerlink\" title=\"AOP使用场景\"></a>AOP使用场景</h3><blockquote>\n<p>利用AOP可以对我们边缘业务进行隔离，降低无关业务逻辑耦合性。提高程序的可重用性，同时提高了开发的效率。一般用于<code>日志记录，性能统计，安全控制，权限管理，事务处理，异常处理，资源池管理</code></p>\n</blockquote>\n<h1 id=\"技术要点\"><a href=\"#技术要点\" class=\"headerlink\" title=\"技术要点\"></a>技术要点</h1><ol>\n<li>通知（Advice）包含了需要用于多个应用对象的横切行为，完全听不懂，没关系，通俗一点说就是定义了“什么时候”和“做什么”。</li>\n<li>连接点（Join Point）是程序执行过程中能够应用通知的所有点。</li>\n<li>切点（Poincut）是定义了在“什么地方”进行切入，哪些连接点会得到通知。显然，切点一定是连接点。</li>\n<li>切面（Aspect）是通知和切点的结合。通知和切点共同定义了切面的全部内容——是什么，何时，何地完成功能。</li>\n<li>引入（Introduction）允许我们向现有的类中添加新方法或者属性。</li>\n<li>织入（Weaving）是把切面应用到目标对象并创建新的代理对象的过程，分为编译期织入、类加载期织入和运行期织入。</li>\n</ol>\n<h1 id=\"整合使用\"><a href=\"#整合使用\" class=\"headerlink\" title=\"整合使用\"></a>整合使用</h1><h2 id=\"导入依赖\"><a href=\"#导入依赖\" class=\"headerlink\" title=\"导入依赖\"></a>导入依赖</h2><p>在springboot中使用aop要导aop依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--aop 切面--&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-aop<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>注意这里版本依赖于<code>spring-boot-start-parent</code>父pom中的<code>spring-boot-dependencies</code></p>\n<h2 id=\"编写拦截的bean\"><a href=\"#编写拦截的bean\" class=\"headerlink\" title=\"编写拦截的bean\"></a>编写拦截的bean</h2><p>这里我们定义一个<code>controller</code>用于拦截所有请求的记录</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AopController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">sayHello</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"定义切面\"><a href=\"#定义切面\" class=\"headerlink\" title=\"定义切面\"></a>定义切面</h2><p>SpringBoot在使用切面的时候采用<code>@Aspect</code>注解对POJO进行标注，该注解表明该类不仅仅是一个POJO，还是一个切面容器</p>\n<h2 id=\"定义切点\"><a href=\"#定义切点\" class=\"headerlink\" title=\"定义切点\"></a>定义切点</h2><p>切点是通过<code>@Pointcut</code>注解和<code>切点表达式</code>定义的。</p>\n<p>@Pointcut注解可以在一个切面内定义可<code>重用</code>的切点。</p>\n<p>由于Spring切面粒度最小是达到<code>方法级别</code>，而<code>execution表达式</code>可以用于明确指定方法返回类型，类名，方法名和参数名等与方法相关的部件，并且实际中，大部分需要使用AOP的业务场景也只需要达到方法级别即可，因而execution表达式的使用是最为广泛的。如图是execution表达式的语法：</p>\n<p><a href=\"https://files.mdnice.com/user/16746/b14924c2-d1ee-4195-8435-14ad7c2b6159.png\"><img src=\"/2022/10/10/AOP%E5%88%9D%E7%BA%A7/b14924c2-d1ee-4195-8435-14ad7c2b6159.png\" alt=\"img\"></a></p>\n<p>execution表示在方法执行的时候触发。以“”开头，表明方法返回值类型为任意类型。然后是全限定的类名和方法名，“”可以表示任意类和任意方法。对于方法参数列表，可以使用“..”表示参数为任意类型。如果需要多个表达式，可以使用“&amp;&amp;”、“||”和“!”完成与、或、非的操作。</p>\n<h2 id=\"定义通知\"><a href=\"#定义通知\" class=\"headerlink\" title=\"定义通知\"></a>定义通知</h2><p>通知有五种类型，分别是：</p>\n<ol>\n<li>前置通知（@Before）：在目标方法调用之前调用通知</li>\n<li>后置通知（@After）：在目标方法完成之后调用通知</li>\n<li>环绕通知（@Around）：在被通知的方法调用之前和调用之后执行自定义的方法</li>\n<li>返回通知（@AfterReturning）：在目标方法成功执行之后调用通知</li>\n<li>异常通知（@AfterThrowing）：在目标方法抛出异常之后调用通知</li>\n</ol>\n<p>代码中定义了三种类型的通知，使用@Before注解标识前置通知，打印“beforeAdvice…”，使用@After注解标识后置通知，打印“AfterAdvice…”，使用@Around注解标识环绕通知，在方法执行前和执行之后分别打印“before”和“after”。这样一个切面就定义好了，代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AopAdvice</span> &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"meta\">@Pointcut(&quot;execution (* com.shangguan.aop.controller.*.*(..))&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Before(&quot;test()&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">beforeAdvice</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;beforeAdvice...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@After(&quot;test()&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterAdvice</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;afterAdvice...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Around(&quot;test()&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">aroundAdvice</span><span class=\"params\">(ProceedingJoinPoint proceedingJoinPoint)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;before&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            proceedingJoinPoint.proceed();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable t) &#123;</span><br><span class=\"line\">            t.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;after&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果<br><a href=\"https://files.mdnice.com/user/16746/fa1b0129-ca1c-4f1a-9f29-fbed848bad4a.png\"><img src=\"/2022/10/10/AOP%E5%88%9D%E7%BA%A7/fa1b0129-ca1c-4f1a-9f29-fbed848bad4a.png\" alt=\"img\"></a></p>\n<h1 id=\"案例场景\"><a href=\"#案例场景\" class=\"headerlink\" title=\"案例场景\"></a>案例场景</h1><p>这里我们通过一个日志记录场景来完整的使用Aop切面业务层只需关心代码逻辑实现而不用关心请求参数和响应参数的日志记录</p>\n<p>那么首先我们需要自定义一个全局日志记录的切面类<code>GlobalLogAspect</code></p>\n<p>然后在该类添加@Aspect注解，然后在定义一个公共的切入点（Pointcut），指向需要处理的包，然后在定义一个前置通知(添加@Before注解)，后置通知(添加@AfterReturning)和环绕通知（添加@Around）方法实现即可</p>\n<h2 id=\"日志信息类\"><a href=\"#日志信息类\" class=\"headerlink\" title=\"日志信息类\"></a>日志信息类</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> cn.soboys.core;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LogSubject</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 操作描述</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String description;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 操作用户</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String username;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 操作时间</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String startTime;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 消耗时间</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String spendTime;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * URL</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String url;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 请求类型</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String method;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * IP地址</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String ip;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 请求参数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Object parameter;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 请求返回的结果</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Object result;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 城市</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String city;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 请求设备信息</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String device;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"全局日志拦截\"><a href=\"#全局日志拦截\" class=\"headerlink\" title=\"全局日志拦截\"></a>全局日志拦截</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> cn.soboys.core;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.reflect.MethodSignature;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BaseAspectSupport</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Method <span class=\"title function_\">resolveMethod</span><span class=\"params\">(ProceedingJoinPoint point)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">MethodSignature</span> <span class=\"variable\">signature</span> <span class=\"operator\">=</span> (MethodSignature)point.getSignature();<span class=\"comment\">//获取方法签名</span></span><br><span class=\"line\">        Class&lt;?&gt; targetClass = point.getTarget().getClass();<span class=\"comment\">//获取切入点的目标类</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Method</span> <span class=\"variable\">method</span> <span class=\"operator\">=</span> getDeclaredMethod(targetClass, signature.getName(),</span><br><span class=\"line\">                signature.getMethod().getParameterTypes());</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (method == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalStateException</span>(<span class=\"string\">&quot;无法解析目标方法: &quot;</span> + signature.getMethod().getName());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> method;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Method <span class=\"title function_\">getDeclaredMethod</span><span class=\"params\">(Class&lt;?&gt; clazz, String name, Class&lt;?&gt;... parameterTypes)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> clazz.getDeclaredMethod(name, parameterTypes);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (NoSuchMethodException e) &#123;</span><br><span class=\"line\">            Class&lt;?&gt; superClass = clazz.getSuperclass();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (superClass != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> getDeclaredMethod(superClass, name, parameterTypes);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>GlobalLogAspect</code>类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> cn.soboys.core;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> cn.hutool.core.date.DateUtil;</span><br><span class=\"line\"><span class=\"keyword\">import</span> cn.hutool.core.date.TimeInterval;</span><br><span class=\"line\"><span class=\"keyword\">import</span> cn.hutool.json.JSONUtil;</span><br><span class=\"line\"><span class=\"keyword\">import</span> cn.soboys.core.utils.HttpContextUtil;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.swagger.annotations.ApiOperation;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.AfterThrowing;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.Around;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestBody;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Parameter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">GlobalLogAspect</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">BaseAspectSupport</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 定义切面Pointcut</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Pointcut(&quot;execution(public * cn.soboys.mallapi.controller.*.*(..))&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">log</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 环绕通知</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> joinPoint</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Around(&quot;log()&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">doAround</span><span class=\"params\">(ProceedingJoinPoint joinPoint)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">LogSubject</span> <span class=\"variable\">logSubject</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">LogSubject</span>();</span><br><span class=\"line\">        <span class=\"comment\">//记录时间定时器</span></span><br><span class=\"line\">        <span class=\"type\">TimeInterval</span> <span class=\"variable\">timer</span> <span class=\"operator\">=</span> DateUtil.timer(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        <span class=\"comment\">//执行结果</span></span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> joinPoint.proceed();</span><br><span class=\"line\">        logSubject.setResult(result);</span><br><span class=\"line\">        <span class=\"comment\">//执行消耗时间</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">endTime</span> <span class=\"operator\">=</span> timer.intervalPretty();</span><br><span class=\"line\">        logSubject.setSpendTime(endTime);</span><br><span class=\"line\">        <span class=\"comment\">//执行参数</span></span><br><span class=\"line\">        <span class=\"type\">Method</span> <span class=\"variable\">method</span> <span class=\"operator\">=</span> resolveMethod(joinPoint);</span><br><span class=\"line\">        logSubject.setParameter(getParameter(method, joinPoint.getArgs()));</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"type\">HttpServletRequest</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> HttpContextUtil.getRequest();</span><br><span class=\"line\">        <span class=\"comment\">// 接口请求时间</span></span><br><span class=\"line\">        logSubject.setStartTime(DateUtil.now());</span><br><span class=\"line\">        <span class=\"comment\">//请求链接</span></span><br><span class=\"line\">        logSubject.setUrl(request.getRequestURL().toString());</span><br><span class=\"line\">        <span class=\"comment\">//请求方法GET,POST等</span></span><br><span class=\"line\">        logSubject.setMethod(request.getMethod());</span><br><span class=\"line\">        <span class=\"comment\">//请求设备信息</span></span><br><span class=\"line\">        logSubject.setDevice(HttpContextUtil.getDevice());</span><br><span class=\"line\">        <span class=\"comment\">//请求地址</span></span><br><span class=\"line\">        logSubject.setIp(HttpContextUtil.getIpAddr());</span><br><span class=\"line\">        <span class=\"comment\">//接口描述</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (method.isAnnotationPresent(ApiOperation.class)) &#123;</span><br><span class=\"line\">            <span class=\"type\">ApiOperation</span> <span class=\"variable\">apiOperation</span> <span class=\"operator\">=</span> method.getAnnotation(ApiOperation.class);</span><br><span class=\"line\">            logSubject.setDescription(apiOperation.value());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> JSONUtil.toJsonPrettyStr(logSubject);</span><br><span class=\"line\">        log.info(a);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据方法和传入的参数获取请求参数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Object <span class=\"title function_\">getParameter</span><span class=\"params\">(Method method, Object[] args)</span> &#123;</span><br><span class=\"line\">        List&lt;Object&gt; argList = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        Parameter[] parameters = method.getParameters();</span><br><span class=\"line\">        Map&lt;String, Object&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; parameters.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//将RequestBody注解修饰的参数作为请求参数</span></span><br><span class=\"line\">            <span class=\"type\">RequestBody</span> <span class=\"variable\">requestBody</span> <span class=\"operator\">=</span> parameters[i].getAnnotation(RequestBody.class);</span><br><span class=\"line\">            <span class=\"comment\">//将RequestParam注解修饰的参数作为请求参数</span></span><br><span class=\"line\">            <span class=\"type\">RequestParam</span> <span class=\"variable\">requestParam</span> <span class=\"operator\">=</span> parameters[i].getAnnotation(RequestParam.class);</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">key</span> <span class=\"operator\">=</span> parameters[i].getName();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (requestBody != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                argList.add(args[i]);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (requestParam != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                map.put(key, args[i]);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                map.put(key, args[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (map.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            argList.add(map);</span><br><span class=\"line\">        &#125;        <span class=\"keyword\">if</span> (argList.size() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (argList.size() == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> argList.get(<span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> argList;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["Java"],"tags":["Java","个人理解","AOP"]}]